# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_geoda')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_geoda')
    _geoda = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_geoda', [dirname(__file__)])
        except ImportError:
            import _geoda
            return _geoda
        try:
            _mod = imp.load_module('_geoda', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _geoda = swig_import_helper()
    del swig_import_helper
else:
    import _geoda
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _geoda.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _geoda.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _geoda.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _geoda.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _geoda.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _geoda.SwigPyIterator_equal(self, x)

    def copy(self):
        return _geoda.SwigPyIterator_copy(self)

    def next(self):
        return _geoda.SwigPyIterator_next(self)

    def __next__(self):
        return _geoda.SwigPyIterator___next__(self)

    def previous(self):
        return _geoda.SwigPyIterator_previous(self)

    def advance(self, n):
        return _geoda.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _geoda.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _geoda.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _geoda.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _geoda.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _geoda.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _geoda.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _geoda.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VecFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecFloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _geoda.VecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _geoda.VecFloat___nonzero__(self)

    def __bool__(self):
        return _geoda.VecFloat___bool__(self)

    def __len__(self):
        return _geoda.VecFloat___len__(self)

    def __getslice__(self, i, j):
        return _geoda.VecFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _geoda.VecFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _geoda.VecFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _geoda.VecFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _geoda.VecFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _geoda.VecFloat___setitem__(self, *args)

    def pop(self):
        return _geoda.VecFloat_pop(self)

    def append(self, x):
        return _geoda.VecFloat_append(self, x)

    def empty(self):
        return _geoda.VecFloat_empty(self)

    def size(self):
        return _geoda.VecFloat_size(self)

    def swap(self, v):
        return _geoda.VecFloat_swap(self, v)

    def begin(self):
        return _geoda.VecFloat_begin(self)

    def end(self):
        return _geoda.VecFloat_end(self)

    def rbegin(self):
        return _geoda.VecFloat_rbegin(self)

    def rend(self):
        return _geoda.VecFloat_rend(self)

    def clear(self):
        return _geoda.VecFloat_clear(self)

    def get_allocator(self):
        return _geoda.VecFloat_get_allocator(self)

    def pop_back(self):
        return _geoda.VecFloat_pop_back(self)

    def erase(self, *args):
        return _geoda.VecFloat_erase(self, *args)

    def __init__(self, *args):
        this = _geoda.new_VecFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _geoda.VecFloat_push_back(self, x)

    def front(self):
        return _geoda.VecFloat_front(self)

    def back(self):
        return _geoda.VecFloat_back(self)

    def assign(self, n, x):
        return _geoda.VecFloat_assign(self, n, x)

    def resize(self, *args):
        return _geoda.VecFloat_resize(self, *args)

    def insert(self, *args):
        return _geoda.VecFloat_insert(self, *args)

    def reserve(self, n):
        return _geoda.VecFloat_reserve(self, n)

    def capacity(self):
        return _geoda.VecFloat_capacity(self)
    __swig_destroy__ = _geoda.delete_VecFloat
    __del__ = lambda self: None
VecFloat_swigregister = _geoda.VecFloat_swigregister
VecFloat_swigregister(VecFloat)

class VecString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _geoda.VecString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _geoda.VecString___nonzero__(self)

    def __bool__(self):
        return _geoda.VecString___bool__(self)

    def __len__(self):
        return _geoda.VecString___len__(self)

    def __getslice__(self, i, j):
        return _geoda.VecString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _geoda.VecString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _geoda.VecString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _geoda.VecString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _geoda.VecString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _geoda.VecString___setitem__(self, *args)

    def pop(self):
        return _geoda.VecString_pop(self)

    def append(self, x):
        return _geoda.VecString_append(self, x)

    def empty(self):
        return _geoda.VecString_empty(self)

    def size(self):
        return _geoda.VecString_size(self)

    def swap(self, v):
        return _geoda.VecString_swap(self, v)

    def begin(self):
        return _geoda.VecString_begin(self)

    def end(self):
        return _geoda.VecString_end(self)

    def rbegin(self):
        return _geoda.VecString_rbegin(self)

    def rend(self):
        return _geoda.VecString_rend(self)

    def clear(self):
        return _geoda.VecString_clear(self)

    def get_allocator(self):
        return _geoda.VecString_get_allocator(self)

    def pop_back(self):
        return _geoda.VecString_pop_back(self)

    def erase(self, *args):
        return _geoda.VecString_erase(self, *args)

    def __init__(self, *args):
        this = _geoda.new_VecString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _geoda.VecString_push_back(self, x)

    def front(self):
        return _geoda.VecString_front(self)

    def back(self):
        return _geoda.VecString_back(self)

    def assign(self, n, x):
        return _geoda.VecString_assign(self, n, x)

    def resize(self, *args):
        return _geoda.VecString_resize(self, *args)

    def insert(self, *args):
        return _geoda.VecString_insert(self, *args)

    def reserve(self, n):
        return _geoda.VecString_reserve(self, n)

    def capacity(self):
        return _geoda.VecString_capacity(self)
    __swig_destroy__ = _geoda.delete_VecString
    __del__ = lambda self: None
VecString_swigregister = _geoda.VecString_swigregister
VecString_swigregister(VecString)

class VecDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _geoda.VecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _geoda.VecDouble___nonzero__(self)

    def __bool__(self):
        return _geoda.VecDouble___bool__(self)

    def __len__(self):
        return _geoda.VecDouble___len__(self)

    def __getslice__(self, i, j):
        return _geoda.VecDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _geoda.VecDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _geoda.VecDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _geoda.VecDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _geoda.VecDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _geoda.VecDouble___setitem__(self, *args)

    def pop(self):
        return _geoda.VecDouble_pop(self)

    def append(self, x):
        return _geoda.VecDouble_append(self, x)

    def empty(self):
        return _geoda.VecDouble_empty(self)

    def size(self):
        return _geoda.VecDouble_size(self)

    def swap(self, v):
        return _geoda.VecDouble_swap(self, v)

    def begin(self):
        return _geoda.VecDouble_begin(self)

    def end(self):
        return _geoda.VecDouble_end(self)

    def rbegin(self):
        return _geoda.VecDouble_rbegin(self)

    def rend(self):
        return _geoda.VecDouble_rend(self)

    def clear(self):
        return _geoda.VecDouble_clear(self)

    def get_allocator(self):
        return _geoda.VecDouble_get_allocator(self)

    def pop_back(self):
        return _geoda.VecDouble_pop_back(self)

    def erase(self, *args):
        return _geoda.VecDouble_erase(self, *args)

    def __init__(self, *args):
        this = _geoda.new_VecDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _geoda.VecDouble_push_back(self, x)

    def front(self):
        return _geoda.VecDouble_front(self)

    def back(self):
        return _geoda.VecDouble_back(self)

    def assign(self, n, x):
        return _geoda.VecDouble_assign(self, n, x)

    def resize(self, *args):
        return _geoda.VecDouble_resize(self, *args)

    def insert(self, *args):
        return _geoda.VecDouble_insert(self, *args)

    def reserve(self, n):
        return _geoda.VecDouble_reserve(self, n)

    def capacity(self):
        return _geoda.VecDouble_capacity(self)
    __swig_destroy__ = _geoda.delete_VecDouble
    __del__ = lambda self: None
VecDouble_swigregister = _geoda.VecDouble_swigregister
VecDouble_swigregister(VecDouble)

class VecVecDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecVecDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecVecDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _geoda.VecVecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _geoda.VecVecDouble___nonzero__(self)

    def __bool__(self):
        return _geoda.VecVecDouble___bool__(self)

    def __len__(self):
        return _geoda.VecVecDouble___len__(self)

    def __getslice__(self, i, j):
        return _geoda.VecVecDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _geoda.VecVecDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _geoda.VecVecDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _geoda.VecVecDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _geoda.VecVecDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _geoda.VecVecDouble___setitem__(self, *args)

    def pop(self):
        return _geoda.VecVecDouble_pop(self)

    def append(self, x):
        return _geoda.VecVecDouble_append(self, x)

    def empty(self):
        return _geoda.VecVecDouble_empty(self)

    def size(self):
        return _geoda.VecVecDouble_size(self)

    def swap(self, v):
        return _geoda.VecVecDouble_swap(self, v)

    def begin(self):
        return _geoda.VecVecDouble_begin(self)

    def end(self):
        return _geoda.VecVecDouble_end(self)

    def rbegin(self):
        return _geoda.VecVecDouble_rbegin(self)

    def rend(self):
        return _geoda.VecVecDouble_rend(self)

    def clear(self):
        return _geoda.VecVecDouble_clear(self)

    def get_allocator(self):
        return _geoda.VecVecDouble_get_allocator(self)

    def pop_back(self):
        return _geoda.VecVecDouble_pop_back(self)

    def erase(self, *args):
        return _geoda.VecVecDouble_erase(self, *args)

    def __init__(self, *args):
        this = _geoda.new_VecVecDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _geoda.VecVecDouble_push_back(self, x)

    def front(self):
        return _geoda.VecVecDouble_front(self)

    def back(self):
        return _geoda.VecVecDouble_back(self)

    def assign(self, n, x):
        return _geoda.VecVecDouble_assign(self, n, x)

    def resize(self, *args):
        return _geoda.VecVecDouble_resize(self, *args)

    def insert(self, *args):
        return _geoda.VecVecDouble_insert(self, *args)

    def reserve(self, n):
        return _geoda.VecVecDouble_reserve(self, n)

    def capacity(self):
        return _geoda.VecVecDouble_capacity(self)
    __swig_destroy__ = _geoda.delete_VecVecDouble
    __del__ = lambda self: None
VecVecDouble_swigregister = _geoda.VecVecDouble_swigregister
VecVecDouble_swigregister(VecVecDouble)

class VecInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _geoda.VecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _geoda.VecInt___nonzero__(self)

    def __bool__(self):
        return _geoda.VecInt___bool__(self)

    def __len__(self):
        return _geoda.VecInt___len__(self)

    def __getslice__(self, i, j):
        return _geoda.VecInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _geoda.VecInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _geoda.VecInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _geoda.VecInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _geoda.VecInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _geoda.VecInt___setitem__(self, *args)

    def pop(self):
        return _geoda.VecInt_pop(self)

    def append(self, x):
        return _geoda.VecInt_append(self, x)

    def empty(self):
        return _geoda.VecInt_empty(self)

    def size(self):
        return _geoda.VecInt_size(self)

    def swap(self, v):
        return _geoda.VecInt_swap(self, v)

    def begin(self):
        return _geoda.VecInt_begin(self)

    def end(self):
        return _geoda.VecInt_end(self)

    def rbegin(self):
        return _geoda.VecInt_rbegin(self)

    def rend(self):
        return _geoda.VecInt_rend(self)

    def clear(self):
        return _geoda.VecInt_clear(self)

    def get_allocator(self):
        return _geoda.VecInt_get_allocator(self)

    def pop_back(self):
        return _geoda.VecInt_pop_back(self)

    def erase(self, *args):
        return _geoda.VecInt_erase(self, *args)

    def __init__(self, *args):
        this = _geoda.new_VecInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _geoda.VecInt_push_back(self, x)

    def front(self):
        return _geoda.VecInt_front(self)

    def back(self):
        return _geoda.VecInt_back(self)

    def assign(self, n, x):
        return _geoda.VecInt_assign(self, n, x)

    def resize(self, *args):
        return _geoda.VecInt_resize(self, *args)

    def insert(self, *args):
        return _geoda.VecInt_insert(self, *args)

    def reserve(self, n):
        return _geoda.VecInt_reserve(self, n)

    def capacity(self):
        return _geoda.VecInt_capacity(self)
    __swig_destroy__ = _geoda.delete_VecInt
    __del__ = lambda self: None
VecInt_swigregister = _geoda.VecInt_swigregister
VecInt_swigregister(VecInt)

class VecVecInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecVecInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecVecInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _geoda.VecVecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _geoda.VecVecInt___nonzero__(self)

    def __bool__(self):
        return _geoda.VecVecInt___bool__(self)

    def __len__(self):
        return _geoda.VecVecInt___len__(self)

    def __getslice__(self, i, j):
        return _geoda.VecVecInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _geoda.VecVecInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _geoda.VecVecInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _geoda.VecVecInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _geoda.VecVecInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _geoda.VecVecInt___setitem__(self, *args)

    def pop(self):
        return _geoda.VecVecInt_pop(self)

    def append(self, x):
        return _geoda.VecVecInt_append(self, x)

    def empty(self):
        return _geoda.VecVecInt_empty(self)

    def size(self):
        return _geoda.VecVecInt_size(self)

    def swap(self, v):
        return _geoda.VecVecInt_swap(self, v)

    def begin(self):
        return _geoda.VecVecInt_begin(self)

    def end(self):
        return _geoda.VecVecInt_end(self)

    def rbegin(self):
        return _geoda.VecVecInt_rbegin(self)

    def rend(self):
        return _geoda.VecVecInt_rend(self)

    def clear(self):
        return _geoda.VecVecInt_clear(self)

    def get_allocator(self):
        return _geoda.VecVecInt_get_allocator(self)

    def pop_back(self):
        return _geoda.VecVecInt_pop_back(self)

    def erase(self, *args):
        return _geoda.VecVecInt_erase(self, *args)

    def __init__(self, *args):
        this = _geoda.new_VecVecInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _geoda.VecVecInt_push_back(self, x)

    def front(self):
        return _geoda.VecVecInt_front(self)

    def back(self):
        return _geoda.VecVecInt_back(self)

    def assign(self, n, x):
        return _geoda.VecVecInt_assign(self, n, x)

    def resize(self, *args):
        return _geoda.VecVecInt_resize(self, *args)

    def insert(self, *args):
        return _geoda.VecVecInt_insert(self, *args)

    def reserve(self, n):
        return _geoda.VecVecInt_reserve(self, n)

    def capacity(self):
        return _geoda.VecVecInt_capacity(self)
    __swig_destroy__ = _geoda.delete_VecVecInt
    __del__ = lambda self: None
VecVecInt_swigregister = _geoda.VecVecInt_swigregister
VecVecInt_swigregister(VecVecInt)

class VecUINT8(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecUINT8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecUINT8, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _geoda.VecUINT8_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _geoda.VecUINT8___nonzero__(self)

    def __bool__(self):
        return _geoda.VecUINT8___bool__(self)

    def __len__(self):
        return _geoda.VecUINT8___len__(self)

    def __getslice__(self, i, j):
        return _geoda.VecUINT8___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _geoda.VecUINT8___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _geoda.VecUINT8___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _geoda.VecUINT8___delitem__(self, *args)

    def __getitem__(self, *args):
        return _geoda.VecUINT8___getitem__(self, *args)

    def __setitem__(self, *args):
        return _geoda.VecUINT8___setitem__(self, *args)

    def pop(self):
        return _geoda.VecUINT8_pop(self)

    def append(self, x):
        return _geoda.VecUINT8_append(self, x)

    def empty(self):
        return _geoda.VecUINT8_empty(self)

    def size(self):
        return _geoda.VecUINT8_size(self)

    def swap(self, v):
        return _geoda.VecUINT8_swap(self, v)

    def begin(self):
        return _geoda.VecUINT8_begin(self)

    def end(self):
        return _geoda.VecUINT8_end(self)

    def rbegin(self):
        return _geoda.VecUINT8_rbegin(self)

    def rend(self):
        return _geoda.VecUINT8_rend(self)

    def clear(self):
        return _geoda.VecUINT8_clear(self)

    def get_allocator(self):
        return _geoda.VecUINT8_get_allocator(self)

    def pop_back(self):
        return _geoda.VecUINT8_pop_back(self)

    def erase(self, *args):
        return _geoda.VecUINT8_erase(self, *args)

    def __init__(self, *args):
        this = _geoda.new_VecUINT8(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _geoda.VecUINT8_push_back(self, x)

    def front(self):
        return _geoda.VecUINT8_front(self)

    def back(self):
        return _geoda.VecUINT8_back(self)

    def assign(self, n, x):
        return _geoda.VecUINT8_assign(self, n, x)

    def resize(self, *args):
        return _geoda.VecUINT8_resize(self, *args)

    def insert(self, *args):
        return _geoda.VecUINT8_insert(self, *args)

    def reserve(self, n):
        return _geoda.VecUINT8_reserve(self, n)

    def capacity(self):
        return _geoda.VecUINT8_capacity(self)
    __swig_destroy__ = _geoda.delete_VecUINT8
    __del__ = lambda self: None
VecUINT8_swigregister = _geoda.VecUINT8_swigregister
VecUINT8_swigregister(VecUINT8)

class VecVecUINT8(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecVecUINT8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecVecUINT8, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _geoda.VecVecUINT8_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _geoda.VecVecUINT8___nonzero__(self)

    def __bool__(self):
        return _geoda.VecVecUINT8___bool__(self)

    def __len__(self):
        return _geoda.VecVecUINT8___len__(self)

    def __getslice__(self, i, j):
        return _geoda.VecVecUINT8___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _geoda.VecVecUINT8___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _geoda.VecVecUINT8___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _geoda.VecVecUINT8___delitem__(self, *args)

    def __getitem__(self, *args):
        return _geoda.VecVecUINT8___getitem__(self, *args)

    def __setitem__(self, *args):
        return _geoda.VecVecUINT8___setitem__(self, *args)

    def pop(self):
        return _geoda.VecVecUINT8_pop(self)

    def append(self, x):
        return _geoda.VecVecUINT8_append(self, x)

    def empty(self):
        return _geoda.VecVecUINT8_empty(self)

    def size(self):
        return _geoda.VecVecUINT8_size(self)

    def swap(self, v):
        return _geoda.VecVecUINT8_swap(self, v)

    def begin(self):
        return _geoda.VecVecUINT8_begin(self)

    def end(self):
        return _geoda.VecVecUINT8_end(self)

    def rbegin(self):
        return _geoda.VecVecUINT8_rbegin(self)

    def rend(self):
        return _geoda.VecVecUINT8_rend(self)

    def clear(self):
        return _geoda.VecVecUINT8_clear(self)

    def get_allocator(self):
        return _geoda.VecVecUINT8_get_allocator(self)

    def pop_back(self):
        return _geoda.VecVecUINT8_pop_back(self)

    def erase(self, *args):
        return _geoda.VecVecUINT8_erase(self, *args)

    def __init__(self, *args):
        this = _geoda.new_VecVecUINT8(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _geoda.VecVecUINT8_push_back(self, x)

    def front(self):
        return _geoda.VecVecUINT8_front(self)

    def back(self):
        return _geoda.VecVecUINT8_back(self)

    def assign(self, n, x):
        return _geoda.VecVecUINT8_assign(self, n, x)

    def resize(self, *args):
        return _geoda.VecVecUINT8_resize(self, *args)

    def insert(self, *args):
        return _geoda.VecVecUINT8_insert(self, *args)

    def reserve(self, n):
        return _geoda.VecVecUINT8_reserve(self, n)

    def capacity(self):
        return _geoda.VecVecUINT8_capacity(self)
    __swig_destroy__ = _geoda.delete_VecVecUINT8
    __del__ = lambda self: None
VecVecUINT8_swigregister = _geoda.VecVecUINT8_swigregister
VecVecUINT8_swigregister(VecVecUINT8)

class GeoDaProxy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeoDaProxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeoDaProxy, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _geoda.new_GeoDaProxy(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _geoda.delete_GeoDaProxy
    __del__ = lambda self: None

    def getLayer_names(self):
        return _geoda.GeoDaProxy_getLayer_names(self)
GeoDaProxy_swigregister = _geoda.GeoDaProxy_swigregister
GeoDaProxy_swigregister(GeoDaProxy)

# This file is compatible with both classic and new-style classes.


