/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGR
#define SWIGR
#endif


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* Remove global namespace pollution */
#if !defined(SWIG_NO_R_NO_REMAP)
# define R_NO_REMAP
#endif
#if !defined(SWIG_NO_STRICT_R_HEADERS)
# define STRICT_R_HEADERS
#endif

#include <Rdefines.h>
#include <Rversion.h>

#ifdef __cplusplus
#include <exception>
extern "C" {
#endif

/* for raw pointer */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_R_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_R_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_R_NewPointerObj(ptr, type, flags)

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

#if R_VERSION >= R_Version(2,6,0)
#define VMAXTYPE void *
#else
#define VMAXTYPE char *
#endif

/*
  This is mainly a way to avoid having lots of local variables that may 
  conflict with those in the routine.

   Change name to R_SWIG_Callb....
*/
typedef struct RCallbackFunctionData {

  SEXP fun;
  SEXP userData;


  SEXP expr;
  SEXP retValue;
  int errorOccurred;

  SEXP el;  /* Temporary pointer used in the construction of the expression to call the R function. */

  struct RCallbackFunctionData *previous;   /* Stack */

} RCallbackFunctionData;

static RCallbackFunctionData  *callbackFunctionDataStack;


SWIGRUNTIME SEXP
R_SWIG_debug_getCallbackFunctionData()
{
  int n, i;
  SEXP ans;
  RCallbackFunctionData  *p = callbackFunctionDataStack;

  n = 0;
  while(p) { 
    n++;
    p = p->previous;
  }

  Rf_protect(ans = Rf_allocVector(VECSXP, n));
  for(p = callbackFunctionDataStack, i = 0; i < n; p = p->previous, i++) 
      SET_VECTOR_ELT(ans, i, p->fun);

  Rf_unprotect(1);

  return(ans);
}



SWIGRUNTIME RCallbackFunctionData *
R_SWIG_pushCallbackFunctionData(SEXP fun, SEXP userData)
{
   RCallbackFunctionData *el;
   el = (RCallbackFunctionData *) calloc(1, sizeof(RCallbackFunctionData));
   el->fun = fun;
   el->userData = userData;
   el->previous = callbackFunctionDataStack;

   callbackFunctionDataStack = el;

   return(el);
}


SWIGRUNTIME SEXP
R_SWIG_R_pushCallbackFunctionData(SEXP fun, SEXP userData)
{
    R_SWIG_pushCallbackFunctionData(fun, userData);
    return R_NilValue;
}

SWIGRUNTIME RCallbackFunctionData *
R_SWIG_getCallbackFunctionData()
{
  if(!callbackFunctionDataStack) {
    Rf_error("Supposedly impossible error occurred in the SWIG callback mechanism."
            "  No callback function data set.");
  }
  
  return callbackFunctionDataStack;
}

SWIGRUNTIME void
R_SWIG_popCallbackFunctionData(int doFree)
{
  RCallbackFunctionData  *el = NULL;
  if(!callbackFunctionDataStack)
    return ; /* Error !!! */

  el = callbackFunctionDataStack ;
  callbackFunctionDataStack = callbackFunctionDataStack->previous;

  if(doFree)
     free(el);
}


/*
  Interface to S function
      is(obj, type)
  which is to be used to determine if an 
  external pointer inherits from the right class.

  Ideally, we would like to be able to do this without an explicit call to the is() function.
  When the S4 class system uses its own SEXP types, then we will hopefully be able to do this
  in the C code.

  Should we make the expression static and preserve it to avoid the overhead of 
  allocating each time.
*/
SWIGRUNTIME int
R_SWIG_checkInherits(SEXP obj, SEXP tag, const char *type)
{
  SEXP e, val;
  int check_err = 0;

  Rf_protect(e = Rf_allocVector(LANGSXP, 3));
  SETCAR(e, Rf_install("extends"));

  SETCAR(CDR(e), Rf_mkString(CHAR(PRINTNAME(tag))));
  SETCAR(CDR(CDR(e)), Rf_mkString(type));

  val = R_tryEval(e, R_GlobalEnv, &check_err);
  Rf_unprotect(1);
  if(check_err) 
    return(0);


  return(LOGICAL(val)[0]);
}


SWIGRUNTIME void *
R_SWIG_resolveExternalRef(SEXP arg, const char * const type, const char * const argName, Rboolean nullOk)
{
  void *ptr;
  SEXP orig = arg;

  if(TYPEOF(arg) != EXTPTRSXP) 
    arg = GET_SLOT(arg, Rf_mkString("ref"));

  
  if(TYPEOF(arg) != EXTPTRSXP) {
    Rf_error("argument %s must be an external pointer (from an ExternalReference)", argName);
  }


  ptr = R_ExternalPtrAddr(arg);

  if(ptr == NULL && nullOk == (Rboolean) FALSE) {
    Rf_error("the external pointer (of type %s) for argument %s has value NULL", argName, type);
  }

  if(type[0] && R_ExternalPtrTag(arg) != Rf_install(type) && strcmp(type, "voidRef")
      && !R_SWIG_checkInherits(orig,  R_ExternalPtrTag(arg), type)) {
    Rf_error("the external pointer for argument %s has tag %s, not the expected value %s",
             argName, CHAR(PRINTNAME(R_ExternalPtrTag(arg))), type);
  }


  return(ptr);
}

SWIGRUNTIME void
R_SWIG_ReferenceFinalizer(SEXP el)
{
  void *ptr = R_SWIG_resolveExternalRef(el, "", "<finalizer>",  (Rboolean) 1);
  fprintf(stderr, "In R_SWIG_ReferenceFinalizer for %p\n", ptr);
  Rf_PrintValue(el);

  if(ptr) {
     if(TYPEOF(el) != EXTPTRSXP)
        el = GET_SLOT(el, Rf_mkString("ref"));

     if(TYPEOF(el) == EXTPTRSXP)
        R_ClearExternalPtr(el);

     free(ptr);
  }

  return;
}

SWIGRUNTIME SEXP
SWIG_MakePtr(void *ptr, const char *typeName, int flags)
{
  SEXP external, r_obj;

  Rf_protect(external = R_MakeExternalPtr(ptr, Rf_install(typeName), R_NilValue));
  Rf_protect(r_obj = NEW_OBJECT(MAKE_CLASS((char *) typeName)));

  if (flags & SWIG_POINTER_OWN)
    R_RegisterCFinalizer(external, R_SWIG_ReferenceFinalizer);

  r_obj = SET_SLOT(r_obj, Rf_mkString((char *) "ref"), external);
  SET_S4_OBJECT(r_obj);
  Rf_unprotect(2);

  return(r_obj);
}


SWIGRUNTIME SEXP
R_SWIG_create_SWIG_R_Array(const char *typeName, SEXP ref, int len)
{
   SEXP arr;

/*XXX remove the char * cast when we can. MAKE_CLASS should be declared appropriately. */
   Rf_protect(arr = NEW_OBJECT(MAKE_CLASS((char *) typeName)));
   Rf_protect(arr = R_do_slot_assign(arr, Rf_mkString("ref"), ref));
   Rf_protect(arr = R_do_slot_assign(arr, Rf_mkString("dims"), Rf_ScalarInteger(len)));

   Rf_unprotect(3); 			   
   SET_S4_OBJECT(arr);	
   return arr;
}

#define ADD_OUTPUT_ARG(result, pos, value, name)  r_ans = AddOutputArgToReturn(pos, value, name, OutputValues);

SWIGRUNTIME SEXP
AddOutputArgToReturn(int pos, SEXP value, const char *name, SEXP output)
{
  SET_VECTOR_ELT(output, pos, value);

  return(output);
}

/* Create a new pointer object */
SWIGRUNTIMEINLINE SEXP
SWIG_R_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  SEXP rptr;
  if (!ptr) {
     return R_NilValue;
  }
  rptr = R_MakeExternalPtr(ptr, 
  R_MakeExternalPtr(type, R_NilValue, R_NilValue), R_NilValue); 
  SET_S4_OBJECT(rptr);
  return rptr;
}


/* Convert a pointer value */
SWIGRUNTIMEINLINE int
SWIG_R_ConvertPtr(SEXP obj, void **ptr, swig_type_info *ty, int flags) {
  void *vptr;
  if (!obj) return SWIG_ERROR;
  if (obj == R_NilValue) {
    if (ptr) *ptr = NULL;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  vptr = R_ExternalPtrAddr(obj);
  if (ty) {
    swig_type_info *to = (swig_type_info*) 
      R_ExternalPtrAddr(R_ExternalPtrTag(obj));
    if (to == ty) {
      if (ptr) *ptr = vptr;
    } else {
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      int newmemory = 0;
      if (ptr) *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  } else {
      if (ptr) *ptr = vptr;
 }
  return SWIG_OK;
}

SWIGRUNTIME swig_module_info *
SWIG_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_SetModule(void *v, swig_module_info *swig_module) {
}

typedef struct {
  void *pack;
  swig_type_info *ty;
  size_t size;
} RSwigPacked;

/* Create a new packed object */

SWIGRUNTIMEINLINE SEXP RSwigPacked_New(void *ptr, size_t sz,
		  swig_type_info *ty) {
  SEXP rptr;
  RSwigPacked *sobj = 
  (RSwigPacked*) malloc(sizeof(RSwigPacked));
  if (sobj) {
    void *pack = malloc(sz);
    if (pack) {
      memcpy(pack, ptr, sz);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = sz;
    } else {
      sobj = 0;
    }
  }
  rptr = R_MakeExternalPtr(sobj, R_NilValue, R_NilValue); 
  return rptr;
}

SWIGRUNTIME swig_type_info *
RSwigPacked_UnpackData(SEXP obj, void *ptr, size_t size)
{
    RSwigPacked *sobj = 
        (RSwigPacked *)R_ExternalPtrAddr(obj);
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
}

SWIGRUNTIMEINLINE SEXP
SWIG_R_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? RSwigPacked_New((void *) ptr, sz, type) : R_NilValue;
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_R_ConvertPacked(SEXP obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = RSwigPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

#ifdef __cplusplus
#define SWIG_exception_noreturn(code, msg) do { throw std::runtime_error(msg); } while(0)
#else
#define SWIG_exception_noreturn(code, msg) do { return result; } while(0)
#endif

#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { Rf_warning(msg); return Rf_ScalarLogical(NA_LOGICAL); return Rf_ScalarLogical(NA_LOGICAL); } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { Rf_warning(msg); return Rf_ScalarLogical(NA_LOGICAL); return Rf_ScalarLogical(NA_LOGICAL); } else 



  #define SWIG_exception(code, msg) do { switch (code) {case SWIG_IndexError: return Rf_ScalarLogical(NA_LOGICAL); default: Rf_warning(msg); return Rf_ScalarLogical(NA_LOGICAL); return Rf_ScalarLogical(NA_LOGICAL);}; } while(0) 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AbstractLocalSA swig_types[0]
#define SWIGTYPE_p_GeoDa swig_types[1]
#define SWIGTYPE_p_GeoDaColumn swig_types[2]
#define SWIGTYPE_p_GeoDaIntColumn swig_types[3]
#define SWIGTYPE_p_GeoDaRealColumn swig_types[4]
#define SWIGTYPE_p_GeoDaStringColumn swig_types[5]
#define SWIGTYPE_p_GeoDaTable swig_types[6]
#define SWIGTYPE_p_GeoDaWeight swig_types[7]
#define SWIGTYPE_p_UniLisa swig_types[8]
#define SWIGTYPE_p_allocator_type swig_types[9]
#define SWIGTYPE_p_char swig_types[10]
#define SWIGTYPE_p_difference_type swig_types[11]
#define SWIGTYPE_p_size_type swig_types[12]
#define SWIGTYPE_p_std__allocatorT_GeoDaColumn_p_t swig_types[13]
#define SWIGTYPE_p_std__allocatorT_char_t swig_types[14]
#define SWIGTYPE_p_std__allocatorT_double_t swig_types[15]
#define SWIGTYPE_p_std__allocatorT_float_t swig_types[16]
#define SWIGTYPE_p_std__allocatorT_int_t swig_types[17]
#define SWIGTYPE_p_std__allocatorT_std__string_t swig_types[18]
#define SWIGTYPE_p_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t swig_types[19]
#define SWIGTYPE_p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t swig_types[20]
#define SWIGTYPE_p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t swig_types[21]
#define SWIGTYPE_p_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t swig_types[22]
#define SWIGTYPE_p_std__allocatorT_unsigned_char_t swig_types[23]
#define SWIGTYPE_p_std__allocatorT_void_p_t swig_types[24]
#define SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t swig_types[25]
#define SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t swig_types[26]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[27]
#define SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t swig_types[28]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[29]
#define SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t swig_types[30]
#define SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t swig_types[31]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[32]
#define SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t swig_types[33]
#define SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t swig_types[34]
#define SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t swig_types[35]
#define SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t swig_types[36]
#define SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t swig_types[37]
#define SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t swig_types[38]
#define SWIGTYPE_p_std__vectorT_wxInt64_std__allocatorT_wxInt64_t_t swig_types[39]
#define SWIGTYPE_p_std__vectorT_wxString_std__allocatorT_wxString_t_t swig_types[40]
#define SWIGTYPE_p_uint64_t swig_types[41]
#define SWIGTYPE_p_value_type swig_types[42]
#define SWIGTYPE_p_void swig_types[43]
#define SWIGTYPE_p_wxString swig_types[44]
static swig_type_info *swig_types[46];
static swig_module_info swig_module = {swig_types, 45, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#define SWIGVERSION 0x040000 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <typeinfo>
#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>


#include <stddef.h>


#include <algorithm>


#include <vector>


#include <utility>


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */

  template <class Type> struct traits_from_ptr {
    static SEXP from(Type *val, int owner = 0) {
      return SWIG_R_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static SEXP from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static SEXP from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type>
  inline SEXP from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline SEXP from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(SEXP obj, Type **val) {
      Type *p = 0;
      swig_type_info *descriptor = type_info<Type>();
      int res = descriptor ? SWIG_R_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(SEXP obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(SEXP obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(SEXP obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(SEXP obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(SEXP obj) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
        throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(SEXP obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
          throw std::invalid_argument("bad type");
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(SEXP obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (throw_error)
          throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(SEXP obj) {
    return traits_as<Type, typename traits<Type>::category>::as(obj);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(SEXP obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(SEXP obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(SEXP obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


  namespace swig {
    template <>  struct traits< void > {
      typedef pointer_category category;
      static const char* type_name() { return"void"; }
    };
  }


#include <functional>
namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


  namespace swig {
    // vectors of doubles
    template <>
      struct traits_from_ptr<std::vector<double> > {
      static SEXP from (std::vector<double > *val, int owner = 0) {
        SEXP result;
        PROTECT(result = Rf_allocVector(REALSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            NUMERIC_POINTER(result)[pos] = ((*val)[pos]);
          }
        UNPROTECT(1);
        return(result);
      }
    };
    // vectors of floats
    template <>
      struct traits_from_ptr<std::vector<float> > {
      static SEXP from (std::vector<float > *val, int owner = 0) {
        SEXP result;
        PROTECT(result = Rf_allocVector(REALSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            NUMERIC_POINTER(result)[pos] = ((*val)[pos]);
          }
        UNPROTECT(1);
        return(result);
      }
    };
    // vectors of unsigned 8bit int
    template <>
      struct traits_from_ptr<std::vector<unsigned char> > {
      static SEXP from (std::vector<unsigned char > *val, int owner = 0) {
        SEXP result;
        PROTECT(result = Rf_allocVector(INTSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            INTEGER_POINTER(result)[pos] = ((*val)[pos]);
          }
        UNPROTECT(1);
        return(result);
      }
    };
    // vectors of 8bit int
    template <>
      struct traits_from_ptr<std::vector<signed char> > {
      static SEXP from (std::vector<signed char > *val, int owner = 0) {
        SEXP result;
        PROTECT(result = Rf_allocVector(INTSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            INTEGER_POINTER(result)[pos] = ((*val)[pos]);
          }
        UNPROTECT(1);
        return(result);
      }
    };

    // vectors of unsigned 16bit int
    template <>
      struct traits_from_ptr<std::vector<unsigned short int> > {
      static SEXP from (std::vector<unsigned short int > *val, int owner = 0) {
        SEXP result;
        PROTECT(result = Rf_allocVector(INTSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            INTEGER_POINTER(result)[pos] = ((*val)[pos]);
          }
        UNPROTECT(1);
        return(result);
      }
    };
    // vectors of 16bit int
    template <>
      struct traits_from_ptr<std::vector<short int> > {
      static SEXP from (std::vector<short int > *val, int owner = 0) {
        SEXP result;
        PROTECT(result = Rf_allocVector(INTSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            INTEGER_POINTER(result)[pos] = ((*val)[pos]);
          }
        UNPROTECT(1);
        return(result);
      }
    };

   // vectors of 32 bit unsigned int
    template <>
      struct traits_from_ptr<std::vector<unsigned int> > {
      static SEXP from (std::vector<unsigned int> *val, int owner = 0) {
        SEXP result;
        PROTECT(result = Rf_allocVector(INTSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            INTEGER_POINTER(result)[pos] = ((*val)[pos]);
          }
        UNPROTECT(1);
        return(result);
      }
    };

    // vectors of 32bit int
    template <>
      struct traits_from_ptr<std::vector<int> > {
      static SEXP from (std::vector<int > *val, int owner = 0) {
        SEXP result;
        PROTECT(result = Rf_allocVector(INTSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            INTEGER_POINTER(result)[pos] = ((*val)[pos]);
          }
        UNPROTECT(1);
        return(result);
      }
    };

   // vectors of 64 bit unsigned int
#if defined(SWIGWORDSIZE64)
    template <>
      struct traits_from_ptr<std::vector<unsigned long int> > {
      static SEXP from (std::vector<unsigned long int> *val, int owner = 0) {
        SEXP result;
        PROTECT(result = Rf_allocVector(INTSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            INTEGER_POINTER(result)[pos] = ((*val)[pos]);
          }
        UNPROTECT(1);
        return(result);
      }
    };
     // vectors of 64 bit int
    template <>
      struct traits_from_ptr<std::vector<long int> > {
      static SEXP from (std::vector<long int> *val, int owner = 0) {
        SEXP result;
        PROTECT(result = Rf_allocVector(INTSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            INTEGER_POINTER(result)[pos] = ((*val)[pos]);
          }
        UNPROTECT(1);
        return(result);
      }
    };
#else
    template <>
      struct traits_from_ptr<std::vector<unsigned long long int> > {
      static SEXP from (std::vector<unsigned long long int> *val, int owner = 0) {
        SEXP result;
        PROTECT(result = Rf_allocVector(INTSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            INTEGER_POINTER(result)[pos] = ((*val)[pos]);
          }
        UNPROTECT(1);
        return(result);
      }
    };
     // vectors of 64 bit int
    template <>
      struct traits_from_ptr<std::vector<long long int> > {
      static SEXP from (std::vector<long long int> *val, int owner = 0) {
        SEXP result;
        PROTECT(result = Rf_allocVector(INTSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            INTEGER_POINTER(result)[pos] = ((*val)[pos]);
          }
        UNPROTECT(1);
        return(result);
      }
    };
#endif
    // vectors of bool
    template <>
      struct traits_from_ptr<std::vector<bool> > {
      static SEXP from (std::vector<bool> *val, int owner = 0) {
        SEXP result;
        PROTECT(result = Rf_allocVector(LGLSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            LOGICAL_POINTER(result)[pos] = ((*val)[pos]);
          }
        UNPROTECT(1);
        return(result);
      }
    };
    
    // vectors of strings
    template <>
      struct traits_from_ptr<std::vector<std::basic_string<char> > > {
      static SEXP from (std::vector<std::basic_string<char> > *val, int owner = 0) {
        SEXP result;
         PROTECT(result = Rf_allocVector(STRSXP, val->size()));
         for (unsigned pos = 0; pos < val->size(); pos++)
           {
             CHARACTER_POINTER(result)[pos] = Rf_mkChar(((*val)[pos]).c_str());
           }
        UNPROTECT(1);
        return(result);
      }
    };

    // catch all that does everything with vectors
    template <typename T>
      struct traits_from_ptr< std::vector< T > > {
      static SEXP from (std::vector< T > *val, int owner = 0) {
        return SWIG_R_NewPointerObj(val, type_info< std::vector< T >  >(), owner);
      }
    };
    /////////////////////////////////////////////////
    template <>
  struct traits_asptr < std::vector<double> > {
    static int asptr(SEXP obj, std::vector<double> **val) {
      std::vector<double> *p;
      // not sure how to check the size of the SEXP obj is correct
      unsigned int sexpsz = Rf_length(obj);
      p = new std::vector<double>(sexpsz);
      double *S = NUMERIC_POINTER(obj);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
          (*p)[pos] = static_cast<double>(S[pos]);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      return res;
    }
  };

    template <>
  struct traits_asptr < std::vector<float> > {
    static int asptr(SEXP obj, std::vector<float> **val) {
      std::vector<float> *p;
      // not sure how to check the size of the SEXP obj is correct
      unsigned int sexpsz = Rf_length(obj);
      p = new std::vector<float>(sexpsz);
      double *S = NUMERIC_POINTER(obj);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
          (*p)[pos] = static_cast<double>(S[pos]);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      return res;
    }
  };

    // 8 bit integer types
    template <>
  struct traits_asptr < std::vector<unsigned char> > {
    static int asptr(SEXP obj, std::vector<unsigned char> **val) {
      std::vector<unsigned char> *p;
      unsigned int sexpsz = Rf_length(obj);
      p = new std::vector<unsigned char>(sexpsz);
      SEXP coerced;
      PROTECT(coerced = Rf_coerceVector(obj, INTSXP));
      int *S = INTEGER_POINTER(coerced);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
          (*p)[pos] = static_cast<unsigned char>(S[pos]);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      UNPROTECT(1);
      return res;
    }
  };

    template <>
  struct traits_asptr < std::vector<signed char> > {
    static int asptr(SEXP obj, std::vector<signed char> **val) {
      std::vector<signed char> *p;
      // not sure how to check the size of the SEXP obj is correct
      int sexpsz = Rf_length(obj);
      p = new std::vector<signed char>(sexpsz);
      SEXP coerced;
      PROTECT(coerced = Rf_coerceVector(obj, INTSXP));
      int *S = INTEGER_POINTER(coerced);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
          (*p)[pos] = static_cast<signed char>(S[pos]);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      UNPROTECT(1);
      return res;
    }
  };

   // 16 bit integer types
    template <>
  struct traits_asptr < std::vector<unsigned short int> > {
    static int asptr(SEXP obj, std::vector<unsigned short int> **val) {
      std::vector<unsigned short int> *p;
      unsigned int sexpsz = Rf_length(obj);
      p = new std::vector<unsigned short int>(sexpsz);
      SEXP coerced;
      PROTECT(coerced = Rf_coerceVector(obj, INTSXP));
      int *S = INTEGER_POINTER(coerced);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
          (*p)[pos] = static_cast<unsigned short int>(S[pos]);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      UNPROTECT(1);
      return res;
    }
  };

    template <>
  struct traits_asptr < std::vector<short int> > {
    static int asptr(SEXP obj, std::vector<short int> **val) {
      std::vector<short int> *p;
      // not sure how to check the size of the SEXP obj is correct
      int sexpsz = Rf_length(obj);
      p = new std::vector<short int>(sexpsz);
      SEXP coerced;
      PROTECT(coerced = Rf_coerceVector(obj, INTSXP));
      int *S = INTEGER_POINTER(coerced);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
          (*p)[pos] = static_cast<short int>(S[pos]);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      UNPROTECT(1);
      return res;
    }
  };
    // 32 bit integer types
    template <>
  struct traits_asptr < std::vector<unsigned int> > {
    static int asptr(SEXP obj, std::vector<unsigned int> **val) {
      std::vector<unsigned int> *p;
      unsigned int sexpsz = Rf_length(obj);
      p = new std::vector<unsigned int>(sexpsz);
      SEXP coerced;
      PROTECT(coerced = Rf_coerceVector(obj, INTSXP));
      int *S = INTEGER_POINTER(coerced);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
          (*p)[pos] = static_cast<unsigned int>(S[pos]);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      UNPROTECT(1);
      return res;
    }
  };

    template <>
  struct traits_asptr < std::vector<int> > {
    static int asptr(SEXP obj, std::vector<int> **val) {
      std::vector<int> *p;
      // not sure how to check the size of the SEXP obj is correct
      int sexpsz = Rf_length(obj);
      p = new std::vector<int>(sexpsz);
      SEXP coerced;
      PROTECT(coerced = Rf_coerceVector(obj, INTSXP));
      int *S = INTEGER_POINTER(coerced);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
          (*p)[pos] = static_cast<int>(S[pos]);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      UNPROTECT(1);
      return res;
    }
  };

#if defined(SWIGWORDSIZE64)
    // 64 bit integer types
    template <>
  struct traits_asptr < std::vector<unsigned long int> > {
    static int asptr(SEXP obj, std::vector<unsigned long int> **val) {
      std::vector<unsigned long int> *p;
      unsigned int sexpsz = Rf_length(obj);
      p = new std::vector<unsigned long int>(sexpsz);
      SEXP coerced;
      PROTECT(coerced = Rf_coerceVector(obj, INTSXP));
      int *S = INTEGER_POINTER(coerced);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
          (*p)[pos] = static_cast<unsigned long int>(S[pos]);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      UNPROTECT(1);
      return res;
    }
  };

    template <>
  struct traits_asptr < std::vector<long int> > {
    static int asptr(SEXP obj, std::vector<long int> **val) {
      std::vector<long int> *p;
      // not sure how to check the size of the SEXP obj is correct
      int sexpsz = Rf_length(obj);
      p = new std::vector<long int>(sexpsz);
      SEXP coerced;
      PROTECT(coerced = Rf_coerceVector(obj, INTSXP));
      int *S = INTEGER_POINTER(coerced);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
          (*p)[pos] = static_cast<long int>(S[pos]);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      UNPROTECT(1);
      return res;
    }
  };

#else
    // 64 bit integer types
    template <>
  struct traits_asptr < std::vector<unsigned long long int> > {
    static int asptr(SEXP obj, std::vector<unsigned long long int> **val) {
      std::vector<unsigned long long int> *p;
      unsigned int sexpsz = Rf_length(obj);
      p = new std::vector<unsigned long long int>(sexpsz);
      SEXP coerced;
      PROTECT(coerced = Rf_coerceVector(obj, INTSXP));
      int *S = INTEGER_POINTER(coerced);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
          (*p)[pos] = static_cast<unsigned long long int>(S[pos]);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      UNPROTECT(1);
      return res;
    }
  };

    template <>
  struct traits_asptr < std::vector<long long int> > {
    static int asptr(SEXP obj, std::vector<long long int> **val) {
      std::vector<long long int> *p;
      // not sure how to check the size of the SEXP obj is correct
      int sexpsz = Rf_length(obj);
      p = new std::vector<long long int>(sexpsz);
      SEXP coerced;
      PROTECT(coerced = Rf_coerceVector(obj, INTSXP));
      int *S = INTEGER_POINTER(coerced);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
          (*p)[pos] = static_cast<long long int>(S[pos]);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      UNPROTECT(1);
      return res;
    }
  };

#endif

    template <>
  struct traits_asptr < std::vector<bool> > {
    static int asptr(SEXP obj, std::vector<bool> **val) {
      std::vector<bool> *p;
      // not sure how to check the size of the SEXP obj is correct
      int sexpsz = Rf_length(obj);
      p = new std::vector<bool>(sexpsz);
      SEXP coerced;
      PROTECT(coerced = Rf_coerceVector(obj, LGLSXP));
      int *S = LOGICAL_POINTER(coerced);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
          (*p)[pos] = static_cast<bool>(S[pos]);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      UNPROTECT(1);
      return res;
    }
  };

    template <>
      struct traits_asptr < std::vector<std::basic_string<char> > > {
      static int asptr(SEXP obj, std::vector<std::basic_string<char> > **val) {
	std::vector<std::basic_string<char> > *p;
      // R character vectors are STRSXP containing CHARSXP
      // access a CHARSXP using STRING_ELT
      int sexpsz = Rf_length(obj);
      p = new std::vector<std::basic_string<char> >(sexpsz);
      SEXP coerced;
      PROTECT(coerced = Rf_coerceVector(obj, STRSXP));
      //SEXP *S = CHARACTER_POINTER(coerced);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
	  const char * thecstring = CHAR(STRING_ELT(coerced, pos));
          (*p)[pos] = std::basic_string<char>(thecstring);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      UNPROTECT(1);
      return res;
    }
  };

    // catchall for R to vector conversion
  template <typename T>
  struct traits_asptr < std::vector<T> > {
    static int asptr(SEXP obj, std::vector<T> **val) {
      std::vector<T> *p;
      int res = SWIG_R_ConvertPtr(obj, (void**)&p, type_info< std::vector<T> >(), 0);
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      return res;
    }
  };

  // now for vectors of vectors. These will be represented as lists of vectors on the
  // catch all that does everything with vectors
  template <>
    struct traits_from_ptr<std::vector<std::vector<unsigned int> > > {
      static SEXP from (std::vector< std::vector<unsigned int> > *val, int owner = 0) {
        SEXP result;
        // allocate the R list
        PROTECT(result = Rf_allocVector(VECSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            // allocate the R vector
            SET_VECTOR_ELT(result, pos, Rf_allocVector(INTSXP, val->at(pos).size()));
            // Fill the R vector
            for (unsigned vpos = 0; vpos < val->at(pos).size(); ++vpos)
              {
                INTEGER_POINTER(VECTOR_ELT(result, pos))[vpos] = static_cast<int>(val->at(pos).at(vpos));
              }
          }
        UNPROTECT(1);
        return(result);
      }
    };


  template <>
    struct traits_from_ptr<std::vector<std::vector<int> > > {
      static SEXP from (std::vector< std::vector<int > > *val, int owner = 0) {
        SEXP result;
        // allocate the R list
        PROTECT(result = Rf_allocVector(VECSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            // allocate the R vector
            SET_VECTOR_ELT(result, pos, Rf_allocVector(INTSXP, val->at(pos).size()));
            // Fill the R vector
            for (unsigned vpos = 0; vpos < val->at(pos).size(); ++vpos)
              {
                INTEGER_POINTER(VECTOR_ELT(result, pos))[vpos] = static_cast<int>(val->at(pos).at(vpos));
              }
          }
        UNPROTECT(1);
        return(result);
      }
    };

  template <>
    struct traits_from_ptr<std::vector<std::vector<float> > > {
      static SEXP from (std::vector< std::vector<float > > *val, int owner = 0) {
        SEXP result;
        // allocate the R list
        PROTECT(result = Rf_allocVector(VECSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            // allocate the R vector
            SET_VECTOR_ELT(result, pos, Rf_allocVector(REALSXP, val->at(pos).size()));
            // Fill the R vector
            for (unsigned vpos = 0; vpos < val->at(pos).size(); ++vpos)
              {
                NUMERIC_POINTER(VECTOR_ELT(result, pos))[vpos] = static_cast<double>(val->at(pos).at(vpos));
              }
          }
        UNPROTECT(1);
        return(result);
      }
    };

  template <>
    struct traits_from_ptr<std::vector<std::vector<double> > > {
      static SEXP from (std::vector< std::vector<double > > *val, int owner = 0) {
        SEXP result;
        // allocate the R list
        PROTECT(result = Rf_allocVector(VECSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            // allocate the R vector
            SET_VECTOR_ELT(result, pos, Rf_allocVector(REALSXP, val->at(pos).size()));
            // Fill the R vector
            for (unsigned vpos = 0; vpos < val->at(pos).size(); ++vpos)
              {
                NUMERIC_POINTER(VECTOR_ELT(result, pos))[vpos] = static_cast<double>(val->at(pos).at(vpos));
              }
          }
        UNPROTECT(1);
        return(result);
      }
    };

  template <>
    struct traits_from_ptr<std::vector<std::vector<bool> > > {
      static SEXP from (std::vector< std::vector<bool> > *val, int owner = 0) {
        SEXP result;
        // allocate the R list
        PROTECT(result = Rf_allocVector(VECSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            // allocate the R vector
            SET_VECTOR_ELT(result, pos, Rf_allocVector(LGLSXP, val->at(pos).size()));
            // Fill the R vector
            for (unsigned vpos = 0; vpos < val->at(pos).size(); ++vpos)
              {
                LOGICAL_POINTER(VECTOR_ELT(result, pos))[vpos] = (val->at(pos).at(vpos));
              }
          }
        UNPROTECT(1);
        return(result);
      }
    };

  template <typename T>
    struct traits_from_ptr< std::vector < std::vector< T > > > {
    static SEXP from (std::vector < std::vector< T > > *val, int owner = 0) {
      return SWIG_R_NewPointerObj(val, type_info< std::vector < std::vector< T > > >(), owner);
    }
  };

  /////////////////////////////////////////////////////////////////

  // R side
  template <>
    struct traits_asptr < std::vector< std::vector<unsigned int> > > {
    static int asptr(SEXP obj, std::vector< std::vector<unsigned int> > **val) {
      std::vector <std::vector<unsigned int> > *p;
      // this is the length of the list
      unsigned int sexpsz = Rf_length(obj);
      p = new std::vector< std::vector<unsigned int> > (sexpsz);

      for (unsigned listpos = 0; listpos < sexpsz; ++listpos)
        {
          unsigned vecsize = Rf_length(VECTOR_ELT(obj, listpos));
          for (unsigned vpos = 0; vpos < vecsize; ++vpos)
            {
              (*p)[listpos].push_back(static_cast<int>(INTEGER_POINTER(VECTOR_ELT(obj, listpos))[vpos]));
            }
        }

      int res = SWIG_OK;

      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      return res;
    }
  };

  template <>
    struct traits_asptr < std::vector< std::vector< int> > > {
    static int asptr(SEXP obj, std::vector< std::vector< int> > **val) {
      std::vector <std::vector< int> > *p;
      // this is the length of the list
      unsigned int sexpsz = Rf_length(obj);
      p = new std::vector< std::vector< int> > (sexpsz);

      for (unsigned listpos = 0; listpos < sexpsz; ++listpos)
        {
          unsigned vecsize = Rf_length(VECTOR_ELT(obj, listpos));
          for (unsigned vpos = 0; vpos < vecsize; ++vpos)
            {
              (*p)[listpos].push_back(static_cast<int>(INTEGER_POINTER(VECTOR_ELT(obj, listpos))[vpos]));
            }
        }

      int res = SWIG_OK;

      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      return res;
    }
  };

  template <>
    struct traits_asptr < std::vector< std::vector< float> > > {
    static int asptr(SEXP obj, std::vector< std::vector< float> > **val) {
      std::vector <std::vector< float> > *p;
      // this is the length of the list
      unsigned int sexpsz = Rf_length(obj);
      p = new std::vector< std::vector< float> > (sexpsz);

      for (unsigned listpos = 0; listpos < sexpsz; ++listpos)
        {
          unsigned vecsize = Rf_length(VECTOR_ELT(obj, listpos));
          for (unsigned vpos = 0; vpos < vecsize; ++vpos)
            {
              (*p)[listpos].push_back(static_cast<float>(NUMERIC_POINTER(VECTOR_ELT(obj, listpos))[vpos]));
            }
        }

      int res = SWIG_OK;

      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      return res;
    }
  };

  template <>
    struct traits_asptr < std::vector< std::vector< double> > > {
    static int asptr(SEXP obj, std::vector< std::vector< double> > **val) {
      std::vector <std::vector< double> > *p;
      // this is the length of the list
      unsigned int sexpsz = Rf_length(obj);
      p = new std::vector< std::vector< double> > (sexpsz);

      for (unsigned listpos = 0; listpos < sexpsz; ++listpos)
        {
          unsigned vecsize = Rf_length(VECTOR_ELT(obj, listpos));
          for (unsigned vpos = 0; vpos < vecsize; ++vpos)
            {
              (*p)[listpos].push_back(static_cast<double>(NUMERIC_POINTER(VECTOR_ELT(obj, listpos))[vpos]));
            }
        }

      int res = SWIG_OK;

      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      return res;
    }
  };

  template <>
    struct traits_asptr < std::vector< std::vector< bool > > > {
    static int asptr(SEXP obj, std::vector< std::vector< bool> > **val) {
      std::vector <std::vector< bool > > *p;
      // this is the length of the list
      unsigned int sexpsz = Rf_length(obj);
      p = new std::vector< std::vector< bool > > (sexpsz);

      for (unsigned listpos = 0; listpos < sexpsz; ++listpos)
        {
          unsigned vecsize = Rf_length(VECTOR_ELT(obj, listpos));
          for (unsigned vpos = 0; vpos < vecsize; ++vpos)
            {
              (*p)[listpos].push_back(static_cast<bool>(LOGICAL_POINTER(VECTOR_ELT(obj, listpos))[vpos]));
            }
        }

      int res = SWIG_OK;

      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      return res;
    }
  };

  //  catchall
  template <typename T>
    struct traits_asptr < std::vector< std::vector<T> > > {
    static int asptr(SEXP obj, std::vector< std::vector<T> > **val) {
      std::vector< std::vector<T> > *p;
      Rprintf("vector of vectors - unsupported content\n");
      int res = SWIG_R_ConvertPtr(obj, (void**)&p, type_info< std::vector< std::vector<T> > > (), 0);
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      return res;
    }
  };

  }


      namespace swig {
	template <>  struct traits<std::vector< void*, std::allocator< void * > > > {
	  typedef value_category category;
	  static const char* type_name() {
	    return "std::vector<" "void" " *," "std::allocator< void * >" " >";
	  }
	};
      }
    
SWIGINTERN bool std_vector_Sl_void_Sm__Sg____nonzero__(std::vector< void * > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< void * >::size_type std_vector_Sl_void_Sm__Sg____len__(std::vector< void * > const *self){
      return self->size();
    }

SWIGINTERNINLINE SEXP
SWIG_From_long  (long value)
{
	return Rf_ScalarInteger((int)value);
}


SWIGINTERNINLINE SEXP
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}

SWIGINTERN std::vector< void * >::value_type std_vector_Sl_void_Sm__Sg__pop(std::vector< void * > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< void*,std::allocator< void * > >::value_type x = self->back();
      self->pop_back();
      return x;
    }

#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERNINLINE  int
SWIG_AsVal_long (SEXP obj, long *val)
{
   if (val) *val = Rf_asInteger(obj);
   return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_int (SEXP obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}

SWIGINTERN std::vector< void *,std::allocator< void * > > *std_vector_Sl_void_Sm__Sg____getslice__(std::vector< void * > *self,std::vector< void * >::difference_type i,std::vector< void * >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_void_Sm__Sg____setslice__(std::vector< void * > *self,std::vector< void * >::difference_type i,std::vector< void * >::difference_type j,std::vector< void *,std::allocator< void * > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_void_Sm__Sg____delslice__(std::vector< void * > *self,std::vector< void * >::difference_type i,std::vector< void * >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_void_Sm__Sg____delitem__(std::vector< void * > *self,std::vector< void * >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< void * >::value_type std_vector_Sl_void_Sm__Sg____getitem__(std::vector< void * > *self,std::vector< void * >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_void_Sm__Sg____setitem__(std::vector< void * > *self,std::vector< void * >::difference_type i,std::vector< void * >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_void_Sm__Sg__append(std::vector< void * > *self,std::vector< void * >::value_type x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits< std::vector<float> > {
      typedef pointer_category category;
      static const char* type_name() {
        return"std::vector<float>";
      }
    };
  }
 
SWIGINTERN bool std_vector_Sl_float_Sg____nonzero__(std::vector< float > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< float >::size_type std_vector_Sl_float_Sg____len__(std::vector< float > const *self){
      return self->size();
    }
SWIGINTERN std::vector< float >::value_type std_vector_Sl_float_Sg__pop(std::vector< float > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< float,std::allocator< float > >::value_type x = self->back();
      self->pop_back();
      return x;
    }

SWIGINTERNINLINE SEXP
SWIG_From_double  (double value)
{
	return Rf_ScalarReal(value);
}


SWIGINTERNINLINE SEXP
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}

SWIGINTERN std::vector< float,std::allocator< float > > *std_vector_Sl_float_Sg____getslice__(std::vector< float > *self,std::vector< float >::difference_type i,std::vector< float >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_float_Sg____setslice__(std::vector< float > *self,std::vector< float >::difference_type i,std::vector< float >::difference_type j,std::vector< float,std::allocator< float > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_float_Sg____delslice__(std::vector< float > *self,std::vector< float >::difference_type i,std::vector< float >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_float_Sg____delitem__(std::vector< float > *self,std::vector< float >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< float >::value_type const &std_vector_Sl_float_Sg____getitem__(std::vector< float > const *self,std::vector< float >::difference_type i){
      return *(swig::cgetpos(self, i));
    }

#include <float.h>


#include <math.h>


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined(__cplusplus) && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std { }
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
  using namespace std;
  return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 2))
#  define SWIG_isfinite(X) (__builtin_isfinite(X))
# elif defined(__clang__) && defined(__has_builtin)
#  if __has_builtin(__builtin_isfinite)
#   define SWIG_isfinite(X) (__builtin_isfinite(X))
#  endif
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERNINLINE  int
SWIG_AsVal_double (SEXP obj, double *val)
{
   if (val) *val = Rf_asReal(obj);
   return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_float (SEXP obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}

SWIGINTERN void std_vector_Sl_float_Sg____setitem__(std::vector< float > *self,std::vector< float >::difference_type i,std::vector< float >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_float_Sg__append(std::vector< float > *self,std::vector< float >::value_type const &x){
      self->push_back(x);
    }

SWIGINTERN int
SWIG_AsCharPtrAndSize(SEXP obj, char** cptr, size_t* psize, int *alloc)
{
  if (cptr && Rf_isString(obj)) {
    char *cstr = const_cast< char * >(CHAR(STRING_ELT(obj, 0)));
    int len = strlen(cstr);

    if (alloc) {
      if (*alloc == SWIG_NEWOBJ) {
        *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        *alloc = SWIG_NEWOBJ;
      } else {
        *cptr = cstr;
      }
    } else {
      *cptr = reinterpret_cast< char * >(malloc(len + 1));
      *cptr = strcpy(*cptr, cstr);
    }
    if (psize) *psize = len + 1;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (SEXP obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_R_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_std_string (SEXP obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


SWIGINTERN SEXP
SWIG_FromCharPtrAndSize(const char* carray, size_t size) 
{
  SEXP t, c;
  if (!carray) return R_NilValue;
/* See R internals document 1.10.  
   MkCharLen was introduced in 2.7.0.  Use that instead of hand
   creating vector.

   Starting in 2.8.0 creating strings via vectors was deprecated in
   order to allow for use of CHARSXP caches. */

  Rf_protect(t = Rf_allocVector(STRSXP, 1));
#if R_VERSION >=  R_Version(2,7,0)
  c = Rf_mkCharLen(carray, size);
#else
  c = Rf_allocVector(CHARSXP, size);
  strncpy((char *)CHAR(c), carray, size);
#endif
  SET_STRING_ELT(t, 0, c);
  Rf_unprotect(1);
  return t;
}


SWIGINTERNINLINE SEXP
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


namespace swig {
  template <> struct traits< std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };
  template <>  struct traits_asval< std::string > {
    typedef std::string value_type;
    static int asval(SEXP obj, value_type *val) {
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from< std::string > {
    typedef std::string value_type;
    static SEXP from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    
SWIGINTERN bool std_vector_Sl_std_string_Sg____nonzero__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::string >::size_type std_vector_Sl_std_string_Sg____len__(std::vector< std::string > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__pop(std::vector< std::string > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::string,std::allocator< std::string > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j,std::vector< std::string,std::allocator< std::string > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem__(std::vector< std::string > *self,std::vector< std::string >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg____getitem__(std::vector< std::string > const *self,std::vector< std::string >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_string_Sg__append(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits< std::vector<double> > {
      typedef pointer_category category;
      static const char* type_name() {
        return"std::vector<double>";
      }
    };
  }
 
SWIGINTERN bool std_vector_Sl_double_Sg____nonzero__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< double >::size_type std_vector_Sl_double_Sg____len__(std::vector< double > const *self){
      return self->size();
    }
SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__pop(std::vector< double > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< double,std::allocator< double > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j,std::vector< double,std::allocator< double > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem__(std::vector< double > *self,std::vector< double >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg____getitem__(std::vector< double > const *self,std::vector< double >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_double_Sg__append(std::vector< double > *self,std::vector< double >::value_type const &x){
      self->push_back(x);
    }

SWIGINTERN int
SWIG_AsCharArray(SEXP obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (SEXP obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


SWIGINTERNINLINE SEXP
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


namespace swig {
  template <> struct traits< char > {
    typedef value_category category;
    static const char* type_name() { return"char"; }
  };
  template <>  struct traits_asval< char > {
    typedef char value_type;
    static int asval(SEXP obj, value_type *val) {
      return SWIG_AsVal_char (obj, val);
    }
  };
  template <>  struct traits_from< char > {
    typedef char value_type;
    static SEXP from(const value_type& val) {
      return SWIG_From_char  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< char, std::allocator< char > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "char" "," "std::allocator< char >" " >";
	  }
	};
      }
    
SWIGINTERN bool std_vector_Sl_char_Sg____nonzero__(std::vector< char > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< char >::size_type std_vector_Sl_char_Sg____len__(std::vector< char > const *self){
      return self->size();
    }
SWIGINTERN std::vector< char >::value_type std_vector_Sl_char_Sg__pop(std::vector< char > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< char,std::allocator< char > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< char,std::allocator< char > > *std_vector_Sl_char_Sg____getslice__(std::vector< char > *self,std::vector< char >::difference_type i,std::vector< char >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_char_Sg____setslice__(std::vector< char > *self,std::vector< char >::difference_type i,std::vector< char >::difference_type j,std::vector< char,std::allocator< char > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_char_Sg____delslice__(std::vector< char > *self,std::vector< char >::difference_type i,std::vector< char >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_char_Sg____delitem__(std::vector< char > *self,std::vector< char >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< char >::value_type const &std_vector_Sl_char_Sg____getitem__(std::vector< char > const *self,std::vector< char >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_char_Sg____setitem__(std::vector< char > *self,std::vector< char >::difference_type i,std::vector< char >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_char_Sg__append(std::vector< char > *self,std::vector< char >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits< std::vector< std::vector<double> > > {
      typedef pointer_category category;
      static const char* type_name() {
        return"std::vector< std::vector<double> >";
      }
    };
  }
 
SWIGINTERN bool std_vector_Sl_std_vector_Sl_double_Sg__Sg____nonzero__(std::vector< std::vector< double > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::vector< double > >::size_type std_vector_Sl_std_vector_Sl_double_Sg__Sg____len__(std::vector< std::vector< double > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::vector< double > >::value_type std_vector_Sl_std_vector_Sl_double_Sg__Sg__pop(std::vector< std::vector< double > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *std_vector_Sl_std_vector_Sl_double_Sg__Sg____getslice__(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i,std::vector< std::vector< double > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____setslice__(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i,std::vector< std::vector< double > >::difference_type j,std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____delslice__(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i,std::vector< std::vector< double > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____delitem__(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::vector< double > >::value_type const &std_vector_Sl_std_vector_Sl_double_Sg__Sg____getitem__(std::vector< std::vector< double > > const *self,std::vector< std::vector< double > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem__(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i,std::vector< std::vector< double > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__append(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits< std::vector<int> > {
      typedef pointer_category category;
      static const char* type_name() {
        return"std::vector<int>";
      }
    };
  }
 
SWIGINTERN bool std_vector_Sl_int_Sg____nonzero__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< int >::size_type std_vector_Sl_int_Sg____len__(std::vector< int > const *self){
      return self->size();
    }
SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__pop(std::vector< int > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< int,std::allocator< int > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j,std::vector< int,std::allocator< int > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem__(std::vector< int > *self,std::vector< int >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg____getitem__(std::vector< int > const *self,std::vector< int >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_int_Sg__append(std::vector< int > *self,std::vector< int >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits< std::vector< std::vector<int> > > {
      typedef pointer_category category;
      static const char* type_name() {
        return"std::vector< std::vector<int> >";
      }
    };
  }
 
SWIGINTERN bool std_vector_Sl_std_vector_Sl_int_Sg__Sg____nonzero__(std::vector< std::vector< int > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::vector< int > >::size_type std_vector_Sl_std_vector_Sl_int_Sg__Sg____len__(std::vector< std::vector< int > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::vector< int > >::value_type std_vector_Sl_std_vector_Sl_int_Sg__Sg__pop(std::vector< std::vector< int > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *std_vector_Sl_std_vector_Sl_int_Sg__Sg____getslice__(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i,std::vector< std::vector< int > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____setslice__(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i,std::vector< std::vector< int > >::difference_type j,std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____delslice__(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i,std::vector< std::vector< int > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____delitem__(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::vector< int > >::value_type const &std_vector_Sl_std_vector_Sl_int_Sg__Sg____getitem__(std::vector< std::vector< int > > const *self,std::vector< std::vector< int > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem__(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i,std::vector< std::vector< int > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__append(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits< std::vector<unsigned char> > {
      typedef pointer_category category;
      static const char* type_name() {
        return"std::vector<unsigned char>";
      }
    };
  }
 
SWIGINTERN bool std_vector_Sl_unsigned_SS_char_Sg____nonzero__(std::vector< unsigned char > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< unsigned char >::size_type std_vector_Sl_unsigned_SS_char_Sg____len__(std::vector< unsigned char > const *self){
      return self->size();
    }
SWIGINTERN std::vector< unsigned char >::value_type std_vector_Sl_unsigned_SS_char_Sg__pop(std::vector< unsigned char > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< unsigned char,std::allocator< unsigned char > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< unsigned char,std::allocator< unsigned char > > *std_vector_Sl_unsigned_SS_char_Sg____getslice__(std::vector< unsigned char > *self,std::vector< unsigned char >::difference_type i,std::vector< unsigned char >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg____setslice__(std::vector< unsigned char > *self,std::vector< unsigned char >::difference_type i,std::vector< unsigned char >::difference_type j,std::vector< unsigned char,std::allocator< unsigned char > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg____delslice__(std::vector< unsigned char > *self,std::vector< unsigned char >::difference_type i,std::vector< unsigned char >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg____delitem__(std::vector< unsigned char > *self,std::vector< unsigned char >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< unsigned char >::value_type const &std_vector_Sl_unsigned_SS_char_Sg____getitem__(std::vector< unsigned char > const *self,std::vector< unsigned char >::difference_type i){
      return *(swig::cgetpos(self, i));
    }

SWIGINTERNINLINE SEXP
SWIG_From_unsigned_SS_long  (unsigned long value)
{
	return Rf_ScalarInteger((int)value);
}


SWIGINTERNINLINE SEXP
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE  int
SWIG_AsVal_unsigned_SS_long (SEXP obj, unsigned long *val)
{
   if (val) *val = Rf_asInteger(obj);
   return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (SEXP obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}

SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg____setitem__(std::vector< unsigned char > *self,std::vector< unsigned char >::difference_type i,std::vector< unsigned char >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__append(std::vector< unsigned char > *self,std::vector< unsigned char >::value_type const &x){
      self->push_back(x);
    }

      namespace swig {
	template <>  struct traits<std::vector< std::vector< unsigned char,std::allocator< unsigned char > >, std::allocator< std::vector< unsigned char,std::allocator< unsigned char > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< unsigned char,std::allocator< unsigned char > >" "," "std::allocator< std::vector< unsigned char,std::allocator< unsigned char > > >" " >";
	  }
	};
      }
    
SWIGINTERN bool std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg____nonzero__(std::vector< std::vector< unsigned char > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::vector< unsigned char > >::size_type std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg____len__(std::vector< std::vector< unsigned char > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::vector< unsigned char > >::value_type std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__pop(std::vector< std::vector< unsigned char > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::vector< unsigned char,std::allocator< unsigned char > >,std::allocator< std::vector< unsigned char,std::allocator< unsigned char > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::vector< unsigned char,std::allocator< unsigned char > >,std::allocator< std::vector< unsigned char,std::allocator< unsigned char > > > > *std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg____getslice__(std::vector< std::vector< unsigned char > > *self,std::vector< std::vector< unsigned char > >::difference_type i,std::vector< std::vector< unsigned char > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg____setslice__(std::vector< std::vector< unsigned char > > *self,std::vector< std::vector< unsigned char > >::difference_type i,std::vector< std::vector< unsigned char > >::difference_type j,std::vector< std::vector< unsigned char,std::allocator< unsigned char > >,std::allocator< std::vector< unsigned char,std::allocator< unsigned char > > > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg____delslice__(std::vector< std::vector< unsigned char > > *self,std::vector< std::vector< unsigned char > >::difference_type i,std::vector< std::vector< unsigned char > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg____delitem__(std::vector< std::vector< unsigned char > > *self,std::vector< std::vector< unsigned char > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::vector< unsigned char > >::value_type const &std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg____getitem__(std::vector< std::vector< unsigned char > > const *self,std::vector< std::vector< unsigned char > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg____setitem__(std::vector< std::vector< unsigned char > > *self,std::vector< std::vector< unsigned char > >::difference_type i,std::vector< std::vector< unsigned char > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__append(std::vector< std::vector< unsigned char > > *self,std::vector< std::vector< unsigned char > >::value_type const &x){
      self->push_back(x);
    }

      namespace swig {
	template <>  struct traits<std::vector< std::vector< char,std::allocator< char > >, std::allocator< std::vector< char,std::allocator< char > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< char,std::allocator< char > >" "," "std::allocator< std::vector< char,std::allocator< char > > >" " >";
	  }
	};
      }
    
SWIGINTERN bool std_vector_Sl_std_vector_Sl_char_Sg__Sg____nonzero__(std::vector< std::vector< char > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::vector< char > >::size_type std_vector_Sl_std_vector_Sl_char_Sg__Sg____len__(std::vector< std::vector< char > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::vector< char > >::value_type std_vector_Sl_std_vector_Sl_char_Sg__Sg__pop(std::vector< std::vector< char > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::vector< char,std::allocator< char > >,std::allocator< std::vector< char,std::allocator< char > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::vector< char,std::allocator< char > >,std::allocator< std::vector< char,std::allocator< char > > > > *std_vector_Sl_std_vector_Sl_char_Sg__Sg____getslice__(std::vector< std::vector< char > > *self,std::vector< std::vector< char > >::difference_type i,std::vector< std::vector< char > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_char_Sg__Sg____setslice__(std::vector< std::vector< char > > *self,std::vector< std::vector< char > >::difference_type i,std::vector< std::vector< char > >::difference_type j,std::vector< std::vector< char,std::allocator< char > >,std::allocator< std::vector< char,std::allocator< char > > > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_char_Sg__Sg____delslice__(std::vector< std::vector< char > > *self,std::vector< std::vector< char > >::difference_type i,std::vector< std::vector< char > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_char_Sg__Sg____delitem__(std::vector< std::vector< char > > *self,std::vector< std::vector< char > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::vector< char > >::value_type const &std_vector_Sl_std_vector_Sl_char_Sg__Sg____getitem__(std::vector< std::vector< char > > const *self,std::vector< std::vector< char > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_char_Sg__Sg____setitem__(std::vector< std::vector< char > > *self,std::vector< std::vector< char > >::difference_type i,std::vector< std::vector< char > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_char_Sg__Sg__append(std::vector< std::vector< char > > *self,std::vector< std::vector< char > >::value_type const &x){
      self->push_back(x);
    }

    #include <GeodaWeight.h>
    #include <AbstractLocalSA.h>
    #include <UniLisa.h>
    #include <libgeoda.h>


  namespace swig {
    template <>  struct traits< std::vector<bool> > {
      typedef pointer_category category;
      static const char* type_name() {
        return"std::vector<bool>";
      }
    };
  }
 

  namespace swig {
    template <>  struct traits< std::vector<long long int> > {
      typedef pointer_category category;
      static const char* type_name() {
        return"std::vector<long long int>";
      }
    };
  }
 




  namespace swig {
    template <>  struct traits< GeoDaColumn > {
      typedef pointer_category category;
      static const char* type_name() { return"GeoDaColumn"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< GeoDaColumn*, std::allocator< GeoDaColumn * > > > {
	  typedef value_category category;
	  static const char* type_name() {
	    return "std::vector<" "GeoDaColumn" " *," "std::allocator< GeoDaColumn * >" " >";
	  }
	};
      }
    
SWIGINTERN bool std_vector_Sl_GeoDaColumn_Sm__Sg____nonzero__(std::vector< GeoDaColumn * > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< GeoDaColumn * >::size_type std_vector_Sl_GeoDaColumn_Sm__Sg____len__(std::vector< GeoDaColumn * > const *self){
      return self->size();
    }
SWIGINTERN std::vector< GeoDaColumn * >::value_type std_vector_Sl_GeoDaColumn_Sm__Sg__pop(std::vector< GeoDaColumn * > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< GeoDaColumn*,std::allocator< GeoDaColumn * > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< GeoDaColumn *,std::allocator< GeoDaColumn * > > *std_vector_Sl_GeoDaColumn_Sm__Sg____getslice__(std::vector< GeoDaColumn * > *self,std::vector< GeoDaColumn * >::difference_type i,std::vector< GeoDaColumn * >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_GeoDaColumn_Sm__Sg____setslice__(std::vector< GeoDaColumn * > *self,std::vector< GeoDaColumn * >::difference_type i,std::vector< GeoDaColumn * >::difference_type j,std::vector< GeoDaColumn *,std::allocator< GeoDaColumn * > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_GeoDaColumn_Sm__Sg____delslice__(std::vector< GeoDaColumn * > *self,std::vector< GeoDaColumn * >::difference_type i,std::vector< GeoDaColumn * >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_GeoDaColumn_Sm__Sg____delitem__(std::vector< GeoDaColumn * > *self,std::vector< GeoDaColumn * >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< GeoDaColumn * >::value_type std_vector_Sl_GeoDaColumn_Sm__Sg____getitem__(std::vector< GeoDaColumn * > *self,std::vector< GeoDaColumn * >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_GeoDaColumn_Sm__Sg____setitem__(std::vector< GeoDaColumn * > *self,std::vector< GeoDaColumn * >::difference_type i,std::vector< GeoDaColumn * >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_GeoDaColumn_Sm__Sg__append(std::vector< GeoDaColumn * > *self,std::vector< GeoDaColumn * >::value_type x){
      self->push_back(x);
    }
                                   // Example code.
std::vector<std::vector<unsigned char> > func()
{
    std::vector<std::vector<unsigned char> > vv;
    std::vector<unsigned char> v;
    v.push_back((unsigned char)1);
    v.push_back((unsigned char)2);
    v.push_back((unsigned char)3);
    vv.push_back(v);
    v.clear();
    v.push_back((unsigned char)4);
    v.push_back((unsigned char)5);
    vv.push_back(v);
    return vv;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT SEXP
R_swig_VecVoid___nonzero__ ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVoid___nonzero__" "', argument " "1"" of type '" "std::vector< void * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  result = (bool)std_vector_Sl_void_Sm__Sg____nonzero__((std::vector< void * > const *)arg1);
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVoid___len__ ( SEXP self, SEXP s_swig_copy)
{
  std::vector< void * >::size_type result;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVoid___len__" "', argument " "1"" of type '" "std::vector< void * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  result = std_vector_Sl_void_Sm__Sg____len__((std::vector< void * > const *)arg1);
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVoid_pop ( SEXP self, SEXP s_swig_copy)
{
  std::vector< void * >::value_type result;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVoid_pop" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  try {
    result = (std::vector< void * >::value_type)std_vector_Sl_void_Sm__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVoid___getslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< void *,std::allocator< void * > > *result = 0 ;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::difference_type arg2 ;
  std::vector< void * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVoid___getslice__" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVoid___getslice__" "', argument " "2"" of type '" "std::vector< void * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< void * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecVoid___getslice__" "', argument " "3"" of type '" "std::vector< void * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< void * >::difference_type >(val3);
  try {
    result = (std::vector< void *,std::allocator< void * > > *)std_vector_Sl_void_Sm__Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, SWIG_POINTER_OWN |  0 );
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVoid___setslice__ ( SEXP self, SEXP i, SEXP j, SEXP v)
{
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::difference_type arg2 ;
  std::vector< void * >::difference_type arg3 ;
  std::vector< void *,std::allocator< void * > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVoid___setslice__" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVoid___setslice__" "', argument " "2"" of type '" "std::vector< void * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< void * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecVoid___setslice__" "', argument " "3"" of type '" "std::vector< void * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< void * >::difference_type >(val3);
  {
    std::vector< void*,std::allocator< void * > > *ptr = (std::vector< void*,std::allocator< void * > > *)0;
    res4 = swig::asptr(v, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VecVoid___setslice__" "', argument " "4"" of type '" "std::vector< void *,std::allocator< void * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVoid___setslice__" "', argument " "4"" of type '" "std::vector< void *,std::allocator< void * > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_void_Sm__Sg____setslice__(arg1,arg2,arg3,(std::vector< void *,std::allocator< void * > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  } catch(std::invalid_argument &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVoid___delslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::difference_type arg2 ;
  std::vector< void * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVoid___delslice__" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVoid___delslice__" "', argument " "2"" of type '" "std::vector< void * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< void * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecVoid___delslice__" "', argument " "3"" of type '" "std::vector< void * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< void * >::difference_type >(val3);
  try {
    std_vector_Sl_void_Sm__Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVoid___delitem__ ( SEXP self, SEXP i)
{
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVoid___delitem__" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVoid___delitem__" "', argument " "2"" of type '" "std::vector< void * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< void * >::difference_type >(val2);
  try {
    std_vector_Sl_void_Sm__Sg____delitem__(arg1,arg2);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVoid___getitem__ ( SEXP self, SEXP i, SEXP s_swig_copy)
{
  std::vector< void * >::value_type result;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVoid___getitem__" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVoid___getitem__" "', argument " "2"" of type '" "std::vector< void * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< void * >::difference_type >(val2);
  try {
    result = (std::vector< void * >::value_type)std_vector_Sl_void_Sm__Sg____getitem__(arg1,arg2);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVoid___setitem__ ( SEXP self, SEXP i, SEXP x)
{
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::difference_type arg2 ;
  std::vector< void * >::value_type arg3 = (std::vector< void * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVoid___setitem__" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVoid___setitem__" "', argument " "2"" of type '" "std::vector< void * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< void * >::difference_type >(val2);
  res3 = SWIG_R_ConvertPtr(x, SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecVoid___setitem__" "', argument " "3"" of type '" "std::vector< void * >::value_type""'"); 
  }
  try {
    std_vector_Sl_void_Sm__Sg____setitem__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVoid_append ( SEXP self, SEXP x)
{
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::value_type arg2 = (std::vector< void * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVoid_append" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  res2 = SWIG_R_ConvertPtr(x, SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecVoid_append" "', argument " "2"" of type '" "std::vector< void * >::value_type""'"); 
  }
  std_vector_Sl_void_Sm__Sg__append(arg1,arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecVoid__SWIG_0 ( )
{
  std::vector< void * > *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (std::vector< void * > *)new std::vector< void * >();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, SWIG_POINTER_OWN |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecVoid__SWIG_1 ( SEXP other)
{
  std::vector< void * > *result = 0 ;
  std::vector< void * > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    std::vector< void*,std::allocator< void * > > *ptr = (std::vector< void*,std::allocator< void * > > *)0;
    res1 = swig::asptr(other, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VecVoid" "', argument " "1"" of type '" "std::vector< void * > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VecVoid" "', argument " "1"" of type '" "std::vector< void * > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< void * > *)new std::vector< void * >((std::vector< void * > const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVoid_empty ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVoid_empty" "', argument " "1"" of type '" "std::vector< void * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  result = (bool)((std::vector< void * > const *)arg1)->empty();
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVoid_size ( SEXP self, SEXP s_swig_copy)
{
  std::vector< void * >::size_type result;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVoid_size" "', argument " "1"" of type '" "std::vector< void * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  result = ((std::vector< void * > const *)arg1)->size();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVoid_swap ( SEXP self, SEXP v)
{
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVoid_swap" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  res2 = SWIG_R_ConvertPtr(v, &argp2, SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecVoid_swap" "', argument " "2"" of type '" "std::vector< void * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVoid_swap" "', argument " "2"" of type '" "std::vector< void * > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< void * > * >(argp2);
  (arg1)->swap(*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVoid_clear ( SEXP self)
{
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVoid_clear" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  (arg1)->clear();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVoid_get_allocator ( SEXP self, SEXP s_swig_copy)
{
  SwigValueWrapper< std::allocator< void * > > result;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVoid_get_allocator" "', argument " "1"" of type '" "std::vector< void * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  result = ((std::vector< void * > const *)arg1)->get_allocator();
  r_ans = SWIG_R_NewPointerObj((new std::vector< void * >::allocator_type(static_cast< const std::vector< void * >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_void_p_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecVoid__SWIG_2 ( SEXP size)
{
  std::vector< void * > *result = 0 ;
  std::vector< void * >::size_type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecVoid" "', argument " "1"" of type '" "std::vector< void * >::size_type""'");
  } 
  arg1 = static_cast< std::vector< void * >::size_type >(val1);
  result = (std::vector< void * > *)new std::vector< void * >(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVoid_pop_back ( SEXP self)
{
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVoid_pop_back" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  (arg1)->pop_back();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVoid_resize__SWIG_0 ( SEXP self, SEXP new_size)
{
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVoid_resize" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVoid_resize" "', argument " "2"" of type '" "std::vector< void * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< void * >::size_type >(val2);
  (arg1)->resize(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecVoid__SWIG_3 ( SEXP size, SEXP value)
{
  std::vector< void * > *result = 0 ;
  std::vector< void * >::size_type arg1 ;
  std::vector< void * >::value_type arg2 = (std::vector< void * >::value_type) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecVoid" "', argument " "1"" of type '" "std::vector< void * >::size_type""'");
  } 
  arg1 = static_cast< std::vector< void * >::size_type >(val1);
  res2 = SWIG_R_ConvertPtr(value, SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VecVoid" "', argument " "2"" of type '" "std::vector< void * >::value_type""'"); 
  }
  result = (std::vector< void * > *)new std::vector< void * >(arg1,arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, SWIG_POINTER_OWN |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVoid_push_back ( SEXP self, SEXP x)
{
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::value_type arg2 = (std::vector< void * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVoid_push_back" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  res2 = SWIG_R_ConvertPtr(x, SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecVoid_push_back" "', argument " "2"" of type '" "std::vector< void * >::value_type""'"); 
  }
  (arg1)->push_back(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVoid_front ( SEXP self, SEXP s_swig_copy)
{
  std::vector< void * >::value_type result;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVoid_front" "', argument " "1"" of type '" "std::vector< void * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  result = (std::vector< void * >::value_type)((std::vector< void * > const *)arg1)->front();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVoid_back ( SEXP self, SEXP s_swig_copy)
{
  std::vector< void * >::value_type result;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVoid_back" "', argument " "1"" of type '" "std::vector< void * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  result = (std::vector< void * >::value_type)((std::vector< void * > const *)arg1)->back();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVoid_assign ( SEXP self, SEXP n, SEXP x)
{
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::size_type arg2 ;
  std::vector< void * >::value_type arg3 = (std::vector< void * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVoid_assign" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVoid_assign" "', argument " "2"" of type '" "std::vector< void * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< void * >::size_type >(val2);
  res3 = SWIG_R_ConvertPtr(x, SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecVoid_assign" "', argument " "3"" of type '" "std::vector< void * >::value_type""'"); 
  }
  (arg1)->assign(arg2,arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVoid_resize__SWIG_1 ( SEXP self, SEXP new_size, SEXP x)
{
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::size_type arg2 ;
  std::vector< void * >::value_type arg3 = (std::vector< void * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVoid_resize" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVoid_resize" "', argument " "2"" of type '" "std::vector< void * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< void * >::size_type >(val2);
  res3 = SWIG_R_ConvertPtr(x, SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecVoid_resize" "', argument " "3"" of type '" "std::vector< void * >::value_type""'"); 
  }
  (arg1)->resize(arg2,arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVoid_reserve ( SEXP self, SEXP n)
{
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVoid_reserve" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVoid_reserve" "', argument " "2"" of type '" "std::vector< void * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< void * >::size_type >(val2);
  (arg1)->reserve(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVoid_capacity ( SEXP self, SEXP s_swig_copy)
{
  std::vector< void * >::size_type result;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVoid_capacity" "', argument " "1"" of type '" "std::vector< void * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  result = ((std::vector< void * > const *)arg1)->capacity();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_VecVoid ( SEXP self)
{
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VecVoid" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecFloat___nonzero__ ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFloat___nonzero__" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (bool)std_vector_Sl_float_Sg____nonzero__((std::vector< float > const *)arg1);
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecFloat___len__ ( SEXP self, SEXP s_swig_copy)
{
  std::vector< float >::size_type result;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFloat___len__" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = std_vector_Sl_float_Sg____len__((std::vector< float > const *)arg1);
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecFloat_pop ( SEXP self, SEXP s_swig_copy)
{
  std::vector< float >::value_type result;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFloat_pop" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  try {
    result = (std::vector< float >::value_type)std_vector_Sl_float_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = SWIG_From_float(static_cast< float >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecFloat___getslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< float,std::allocator< float > > *result = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  std::vector< float >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFloat___getslice__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecFloat___getslice__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecFloat___getslice__" "', argument " "3"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< float >::difference_type >(val3);
  try {
    result = (std::vector< float,std::allocator< float > > *)std_vector_Sl_float_Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_OWN |  0 );
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecFloat___setslice__ ( SEXP self, SEXP i, SEXP j, SEXP v)
{
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  std::vector< float >::difference_type arg3 ;
  std::vector< float,std::allocator< float > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFloat___setslice__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecFloat___setslice__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecFloat___setslice__" "', argument " "3"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< float >::difference_type >(val3);
  {
    std::vector< float,std::allocator< float > > *ptr = (std::vector< float,std::allocator< float > > *)0;
    res4 = swig::asptr(v, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VecFloat___setslice__" "', argument " "4"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecFloat___setslice__" "', argument " "4"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_float_Sg____setslice__(arg1,arg2,arg3,(std::vector< float,std::allocator< float > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  } catch(std::invalid_argument &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecFloat___delslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  std::vector< float >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFloat___delslice__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecFloat___delslice__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecFloat___delslice__" "', argument " "3"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< float >::difference_type >(val3);
  try {
    std_vector_Sl_float_Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecFloat___delitem__ ( SEXP self, SEXP i)
{
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFloat___delitem__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecFloat___delitem__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  try {
    std_vector_Sl_float_Sg____delitem__(arg1,arg2);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecFloat___getitem__ ( SEXP self, SEXP i, SEXP s_swig_copy)
{
  std::vector< float >::value_type *result = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFloat___getitem__" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecFloat___getitem__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  try {
    result = (std::vector< float >::value_type *) &std_vector_Sl_float_Sg____getitem__((std::vector< float > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = SWIG_From_float(static_cast< float >(*result));
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecFloat___setitem__ ( SEXP self, SEXP i, SEXP x)
{
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< float >::value_type temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFloat___setitem__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecFloat___setitem__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_float(x, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecFloat___setitem__" "', argument " "3"" of type '" "std::vector< float >::value_type""'");
  } 
  temp3 = static_cast< std::vector< float >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_float_Sg____setitem__(arg1,arg2,(float const &)*arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecFloat_append ( SEXP self, SEXP x)
{
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< float >::value_type temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFloat_append" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(x, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecFloat_append" "', argument " "2"" of type '" "std::vector< float >::value_type""'");
  } 
  temp2 = static_cast< std::vector< float >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_float_Sg__append(arg1,(float const &)*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecFloat__SWIG_0 ( )
{
  std::vector< float > *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (std::vector< float > *)new std::vector< float >();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_OWN |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecFloat__SWIG_1 ( SEXP other)
{
  std::vector< float > *result = 0 ;
  std::vector< float > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    std::vector< float,std::allocator< float > > *ptr = (std::vector< float,std::allocator< float > > *)0;
    res1 = swig::asptr(other, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VecFloat" "', argument " "1"" of type '" "std::vector< float > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VecFloat" "', argument " "1"" of type '" "std::vector< float > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecFloat_empty ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFloat_empty" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (bool)((std::vector< float > const *)arg1)->empty();
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecFloat_size ( SEXP self, SEXP s_swig_copy)
{
  std::vector< float >::size_type result;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFloat_size" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = ((std::vector< float > const *)arg1)->size();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecFloat_swap ( SEXP self, SEXP v)
{
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFloat_swap" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  res2 = SWIG_R_ConvertPtr(v, &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecFloat_swap" "', argument " "2"" of type '" "std::vector< float > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecFloat_swap" "', argument " "2"" of type '" "std::vector< float > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< float > * >(argp2);
  (arg1)->swap(*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecFloat_clear ( SEXP self)
{
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFloat_clear" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  (arg1)->clear();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecFloat_get_allocator ( SEXP self, SEXP s_swig_copy)
{
  SwigValueWrapper< std::allocator< float > > result;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFloat_get_allocator" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = ((std::vector< float > const *)arg1)->get_allocator();
  r_ans = SWIG_R_NewPointerObj((new std::vector< float >::allocator_type(static_cast< const std::vector< float >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_float_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecFloat__SWIG_2 ( SEXP size)
{
  std::vector< float > *result = 0 ;
  std::vector< float >::size_type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecFloat" "', argument " "1"" of type '" "std::vector< float >::size_type""'");
  } 
  arg1 = static_cast< std::vector< float >::size_type >(val1);
  result = (std::vector< float > *)new std::vector< float >(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecFloat_pop_back ( SEXP self)
{
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFloat_pop_back" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  (arg1)->pop_back();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecFloat_resize__SWIG_0 ( SEXP self, SEXP new_size)
{
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFloat_resize" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecFloat_resize" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
  } 
  arg2 = static_cast< std::vector< float >::size_type >(val2);
  (arg1)->resize(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecFloat__SWIG_3 ( SEXP size, SEXP value)
{
  std::vector< float > *result = 0 ;
  std::vector< float >::size_type arg1 ;
  std::vector< float >::value_type *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  std::vector< float >::value_type temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecFloat" "', argument " "1"" of type '" "std::vector< float >::size_type""'");
  } 
  arg1 = static_cast< std::vector< float >::size_type >(val1);
  ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VecFloat" "', argument " "2"" of type '" "std::vector< float >::value_type""'");
  } 
  temp2 = static_cast< std::vector< float >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< float > *)new std::vector< float >(arg1,(std::vector< float >::value_type const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_OWN |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecFloat_push_back ( SEXP self, SEXP x)
{
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< float >::value_type temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFloat_push_back" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(x, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecFloat_push_back" "', argument " "2"" of type '" "std::vector< float >::value_type""'");
  } 
  temp2 = static_cast< std::vector< float >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< float >::value_type const &)*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecFloat_front ( SEXP self, SEXP s_swig_copy)
{
  std::vector< float >::value_type *result = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFloat_front" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (std::vector< float >::value_type *) &((std::vector< float > const *)arg1)->front();
  r_ans = SWIG_From_float(static_cast< float >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecFloat_back ( SEXP self, SEXP s_swig_copy)
{
  std::vector< float >::value_type *result = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFloat_back" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (std::vector< float >::value_type *) &((std::vector< float > const *)arg1)->back();
  r_ans = SWIG_From_float(static_cast< float >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecFloat_assign ( SEXP self, SEXP n, SEXP x)
{
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< float >::value_type temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFloat_assign" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecFloat_assign" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
  } 
  arg2 = static_cast< std::vector< float >::size_type >(val2);
  ecode3 = SWIG_AsVal_float(x, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecFloat_assign" "', argument " "3"" of type '" "std::vector< float >::value_type""'");
  } 
  temp3 = static_cast< std::vector< float >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< float >::value_type const &)*arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecFloat_resize__SWIG_1 ( SEXP self, SEXP new_size, SEXP x)
{
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< float >::value_type temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFloat_resize" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecFloat_resize" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
  } 
  arg2 = static_cast< std::vector< float >::size_type >(val2);
  ecode3 = SWIG_AsVal_float(x, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecFloat_resize" "', argument " "3"" of type '" "std::vector< float >::value_type""'");
  } 
  temp3 = static_cast< std::vector< float >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< float >::value_type const &)*arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecFloat_reserve ( SEXP self, SEXP n)
{
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFloat_reserve" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecFloat_reserve" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
  } 
  arg2 = static_cast< std::vector< float >::size_type >(val2);
  (arg1)->reserve(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecFloat_capacity ( SEXP self, SEXP s_swig_copy)
{
  std::vector< float >::size_type result;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecFloat_capacity" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = ((std::vector< float > const *)arg1)->capacity();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_VecFloat ( SEXP self)
{
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VecFloat" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecString___nonzero__ ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecString___nonzero__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)std_vector_Sl_std_string_Sg____nonzero__((std::vector< std::string > const *)arg1);
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecString___len__ ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::string >::size_type result;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecString___len__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = std_vector_Sl_std_string_Sg____len__((std::vector< std::string > const *)arg1);
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecString_pop ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::string >::value_type result;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecString_pop" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  try {
    result = std_vector_Sl_std_string_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = SWIG_From_std_string(static_cast< std::string >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecString___getslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecString___getslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecString___getslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecString___getslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  try {
    result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecString___setslice__ ( SEXP self, SEXP i, SEXP j, SEXP v)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecString___setslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecString___setslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecString___setslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(v, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VecString___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecString___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg____setslice__(arg1,arg2,arg3,(std::vector< std::string,std::allocator< std::string > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  } catch(std::invalid_argument &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecString___delslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecString___delslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecString___delslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecString___delslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  try {
    std_vector_Sl_std_string_Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecString___delitem__ ( SEXP self, SEXP i)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecString___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecString___delitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  try {
    std_vector_Sl_std_string_Sg____delitem__(arg1,arg2);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecString___getitem__ ( SEXP self, SEXP i, SEXP s_swig_copy)
{
  std::vector< std::string >::value_type *result = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecString___getitem__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecString___getitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg____getitem__((std::vector< std::string > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = SWIG_From_std_string(static_cast< std::string >(*result));
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecString___setitem__ ( SEXP self, SEXP i, SEXP x)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecString___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecString___setitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(x, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecString___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecString___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg____setitem__(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecString_append ( SEXP self, SEXP x)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecString_append" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(x, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecString_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecString_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_string_Sg__append(arg1,(std::string const &)*arg2);
  r_ans = R_NilValue;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecString__SWIG_0 ( )
{
  std::vector< std::string > *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecString__SWIG_1 ( SEXP other)
{
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res1 = swig::asptr(other, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VecString" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VecString" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecString_empty ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecString_empty" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecString_size ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::string >::size_type result;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecString_size" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->size();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecString_swap ( SEXP self, SEXP v)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecString_swap" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_R_ConvertPtr(v, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecString_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecString_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  (arg1)->swap(*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecString_clear ( SEXP self)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecString_clear" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  (arg1)->clear();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecString_get_allocator ( SEXP self, SEXP s_swig_copy)
{
  SwigValueWrapper< std::allocator< std::string > > result;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecString_get_allocator" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->get_allocator();
  r_ans = SWIG_R_NewPointerObj((new std::vector< std::string >::allocator_type(static_cast< const std::vector< std::string >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__string_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecString__SWIG_2 ( SEXP size)
{
  std::vector< std::string > *result = 0 ;
  std::vector< std::string >::size_type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecString" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecString_pop_back ( SEXP self)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecString_pop_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  (arg1)->pop_back();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecString_resize__SWIG_0 ( SEXP self, SEXP new_size)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecString_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecString_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  (arg1)->resize(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecString__SWIG_3 ( SEXP size, SEXP value)
{
  std::vector< std::string > *result = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecString" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(value, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VecString" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VecString" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1,(std::vector< std::string >::value_type const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecString_push_back ( SEXP self, SEXP x)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecString_push_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(x, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecString_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecString_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
  r_ans = R_NilValue;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecString_front ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::string >::value_type *result = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecString_front" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->front();
  r_ans = SWIG_From_std_string(static_cast< std::string >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecString_back ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::string >::value_type *result = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecString_back" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->back();
  r_ans = SWIG_From_std_string(static_cast< std::string >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecString_assign ( SEXP self, SEXP n, SEXP x)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecString_assign" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecString_assign" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(x, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecString_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecString_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::string >::value_type const &)*arg3);
  r_ans = R_NilValue;
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecString_resize__SWIG_1 ( SEXP self, SEXP new_size, SEXP x)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecString_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecString_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(x, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecString_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecString_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::string >::value_type const &)*arg3);
  r_ans = R_NilValue;
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecString_reserve ( SEXP self, SEXP n)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecString_reserve" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecString_reserve" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  (arg1)->reserve(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecString_capacity ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::string >::size_type result;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecString_capacity" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->capacity();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_VecString ( SEXP self)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VecString" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecDouble___nonzero__ ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecDouble___nonzero__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)std_vector_Sl_double_Sg____nonzero__((std::vector< double > const *)arg1);
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecDouble___len__ ( SEXP self, SEXP s_swig_copy)
{
  std::vector< double >::size_type result;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecDouble___len__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = std_vector_Sl_double_Sg____len__((std::vector< double > const *)arg1);
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecDouble_pop ( SEXP self, SEXP s_swig_copy)
{
  std::vector< double >::value_type result;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecDouble_pop" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  try {
    result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecDouble___getslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< double,std::allocator< double > > *result = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecDouble___getslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecDouble___getslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecDouble___getslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecDouble___setslice__ ( SEXP self, SEXP i, SEXP j, SEXP v)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecDouble___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecDouble___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecDouble___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(v, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VecDouble___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecDouble___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_double_Sg____setslice__(arg1,arg2,arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  } catch(std::invalid_argument &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecDouble___delslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecDouble___delslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecDouble___delslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecDouble___delslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    std_vector_Sl_double_Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecDouble___delitem__ ( SEXP self, SEXP i)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecDouble___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecDouble___delitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    std_vector_Sl_double_Sg____delitem__(arg1,arg2);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecDouble___getitem__ ( SEXP self, SEXP i, SEXP s_swig_copy)
{
  std::vector< double >::value_type *result = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecDouble___getitem__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecDouble___getitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg____getitem__((std::vector< double > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = SWIG_From_double(static_cast< double >(*result));
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecDouble___setitem__ ( SEXP self, SEXP i, SEXP x)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecDouble___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecDouble___setitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_double(x, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecDouble___setitem__" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_double_Sg____setitem__(arg1,arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecDouble_append ( SEXP self, SEXP x)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecDouble_append" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(x, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecDouble_append" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_double_Sg__append(arg1,(double const &)*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecDouble__SWIG_0 ( )
{
  std::vector< double > *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (std::vector< double > *)new std::vector< double >();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecDouble__SWIG_1 ( SEXP other)
{
  std::vector< double > *result = 0 ;
  std::vector< double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(other, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VecDouble" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VecDouble" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecDouble_empty ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecDouble_empty" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)((std::vector< double > const *)arg1)->empty();
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecDouble_size ( SEXP self, SEXP s_swig_copy)
{
  std::vector< double >::size_type result;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecDouble_size" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->size();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecDouble_swap ( SEXP self, SEXP v)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecDouble_swap" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_R_ConvertPtr(v, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecDouble_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecDouble_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  (arg1)->swap(*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecDouble_clear ( SEXP self)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecDouble_clear" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->clear();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecDouble_get_allocator ( SEXP self, SEXP s_swig_copy)
{
  SwigValueWrapper< std::allocator< double > > result;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecDouble_get_allocator" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->get_allocator();
  r_ans = SWIG_R_NewPointerObj((new std::vector< double >::allocator_type(static_cast< const std::vector< double >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_double_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecDouble__SWIG_2 ( SEXP size)
{
  std::vector< double > *result = 0 ;
  std::vector< double >::size_type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecDouble" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecDouble_pop_back ( SEXP self)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecDouble_pop_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->pop_back();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecDouble_resize__SWIG_0 ( SEXP self, SEXP new_size)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecDouble_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecDouble_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->resize(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecDouble__SWIG_3 ( SEXP size, SEXP value)
{
  std::vector< double > *result = 0 ;
  std::vector< double >::size_type arg1 ;
  std::vector< double >::value_type *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecDouble" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  ecode2 = SWIG_AsVal_double(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VecDouble" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< double > *)new std::vector< double >(arg1,(std::vector< double >::value_type const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecDouble_push_back ( SEXP self, SEXP x)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecDouble_push_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(x, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecDouble_push_back" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecDouble_front ( SEXP self, SEXP s_swig_copy)
{
  std::vector< double >::value_type *result = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecDouble_front" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->front();
  r_ans = SWIG_From_double(static_cast< double >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecDouble_back ( SEXP self, SEXP s_swig_copy)
{
  std::vector< double >::value_type *result = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecDouble_back" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->back();
  r_ans = SWIG_From_double(static_cast< double >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecDouble_assign ( SEXP self, SEXP n, SEXP x)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecDouble_assign" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecDouble_assign" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(x, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecDouble_assign" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< double >::value_type const &)*arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecDouble_resize__SWIG_1 ( SEXP self, SEXP new_size, SEXP x)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecDouble_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecDouble_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(x, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecDouble_resize" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< double >::value_type const &)*arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecDouble_reserve ( SEXP self, SEXP n)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecDouble_reserve" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecDouble_reserve" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->reserve(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecDouble_capacity ( SEXP self, SEXP s_swig_copy)
{
  std::vector< double >::size_type result;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecDouble_capacity" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->capacity();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_VecDouble ( SEXP self)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VecDouble" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecChar___nonzero__ ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecChar___nonzero__" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = (bool)std_vector_Sl_char_Sg____nonzero__((std::vector< char > const *)arg1);
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecChar___len__ ( SEXP self, SEXP s_swig_copy)
{
  std::vector< char >::size_type result;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecChar___len__" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = std_vector_Sl_char_Sg____len__((std::vector< char > const *)arg1);
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecChar_pop ( SEXP self, SEXP s_swig_copy)
{
  std::vector< char >::value_type result;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecChar_pop" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  try {
    result = (std::vector< char >::value_type)std_vector_Sl_char_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  {
    char tmp[2] = "x";
    tmp[0] = result;    
    r_ans = Rf_mkString(tmp); 
  }
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecChar___getslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< char,std::allocator< char > > *result = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::difference_type arg2 ;
  std::vector< char >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecChar___getslice__" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecChar___getslice__" "', argument " "2"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecChar___getslice__" "', argument " "3"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< char >::difference_type >(val3);
  try {
    result = (std::vector< char,std::allocator< char > > *)std_vector_Sl_char_Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, SWIG_POINTER_OWN |  0 );
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecChar___setslice__ ( SEXP self, SEXP i, SEXP j, SEXP v)
{
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::difference_type arg2 ;
  std::vector< char >::difference_type arg3 ;
  std::vector< char,std::allocator< char > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecChar___setslice__" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecChar___setslice__" "', argument " "2"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecChar___setslice__" "', argument " "3"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< char >::difference_type >(val3);
  {
    std::vector< char,std::allocator< char > > *ptr = (std::vector< char,std::allocator< char > > *)0;
    res4 = swig::asptr(v, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VecChar___setslice__" "', argument " "4"" of type '" "std::vector< char,std::allocator< char > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecChar___setslice__" "', argument " "4"" of type '" "std::vector< char,std::allocator< char > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_char_Sg____setslice__(arg1,arg2,arg3,(std::vector< char,std::allocator< char > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  } catch(std::invalid_argument &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecChar___delslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::difference_type arg2 ;
  std::vector< char >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecChar___delslice__" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecChar___delslice__" "', argument " "2"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecChar___delslice__" "', argument " "3"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< char >::difference_type >(val3);
  try {
    std_vector_Sl_char_Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecChar___delitem__ ( SEXP self, SEXP i)
{
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecChar___delitem__" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecChar___delitem__" "', argument " "2"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< char >::difference_type >(val2);
  try {
    std_vector_Sl_char_Sg____delitem__(arg1,arg2);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecChar___getitem__ ( SEXP self, SEXP i, SEXP s_swig_copy)
{
  std::vector< char >::value_type *result = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecChar___getitem__" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecChar___getitem__" "', argument " "2"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< char >::difference_type >(val2);
  try {
    result = (std::vector< char >::value_type *) &std_vector_Sl_char_Sg____getitem__((std::vector< char > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = SWIG_From_char(static_cast< char >(*result));
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecChar___setitem__ ( SEXP self, SEXP i, SEXP x)
{
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::difference_type arg2 ;
  std::vector< char >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< char >::value_type temp3 ;
  char val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecChar___setitem__" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecChar___setitem__" "', argument " "2"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_char(x, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecChar___setitem__" "', argument " "3"" of type '" "std::vector< char >::value_type""'");
  } 
  temp3 = static_cast< std::vector< char >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_char_Sg____setitem__(arg1,arg2,(char const &)*arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecChar_append ( SEXP self, SEXP x)
{
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< char >::value_type temp2 ;
  char val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecChar_append" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(x, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecChar_append" "', argument " "2"" of type '" "std::vector< char >::value_type""'");
  } 
  temp2 = static_cast< std::vector< char >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_char_Sg__append(arg1,(char const &)*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecChar__SWIG_0 ( )
{
  std::vector< char > *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (std::vector< char > *)new std::vector< char >();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, SWIG_POINTER_OWN |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecChar__SWIG_1 ( SEXP other)
{
  std::vector< char > *result = 0 ;
  std::vector< char > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    std::vector< char,std::allocator< char > > *ptr = (std::vector< char,std::allocator< char > > *)0;
    res1 = swig::asptr(other, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VecChar" "', argument " "1"" of type '" "std::vector< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VecChar" "', argument " "1"" of type '" "std::vector< char > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< char > *)new std::vector< char >((std::vector< char > const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecChar_empty ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecChar_empty" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = (bool)((std::vector< char > const *)arg1)->empty();
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecChar_size ( SEXP self, SEXP s_swig_copy)
{
  std::vector< char >::size_type result;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecChar_size" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = ((std::vector< char > const *)arg1)->size();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecChar_swap ( SEXP self, SEXP v)
{
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecChar_swap" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  res2 = SWIG_R_ConvertPtr(v, &argp2, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecChar_swap" "', argument " "2"" of type '" "std::vector< char > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecChar_swap" "', argument " "2"" of type '" "std::vector< char > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< char > * >(argp2);
  (arg1)->swap(*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecChar_clear ( SEXP self)
{
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecChar_clear" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  (arg1)->clear();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecChar_get_allocator ( SEXP self, SEXP s_swig_copy)
{
  SwigValueWrapper< std::allocator< char > > result;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecChar_get_allocator" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = ((std::vector< char > const *)arg1)->get_allocator();
  r_ans = SWIG_R_NewPointerObj((new std::vector< char >::allocator_type(static_cast< const std::vector< char >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_char_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecChar__SWIG_2 ( SEXP size)
{
  std::vector< char > *result = 0 ;
  std::vector< char >::size_type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecChar" "', argument " "1"" of type '" "std::vector< char >::size_type""'");
  } 
  arg1 = static_cast< std::vector< char >::size_type >(val1);
  result = (std::vector< char > *)new std::vector< char >(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecChar_pop_back ( SEXP self)
{
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecChar_pop_back" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  (arg1)->pop_back();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecChar_resize__SWIG_0 ( SEXP self, SEXP new_size)
{
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecChar_resize" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecChar_resize" "', argument " "2"" of type '" "std::vector< char >::size_type""'");
  } 
  arg2 = static_cast< std::vector< char >::size_type >(val2);
  (arg1)->resize(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecChar__SWIG_3 ( SEXP size, SEXP value)
{
  std::vector< char > *result = 0 ;
  std::vector< char >::size_type arg1 ;
  std::vector< char >::value_type *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  std::vector< char >::value_type temp2 ;
  char val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecChar" "', argument " "1"" of type '" "std::vector< char >::size_type""'");
  } 
  arg1 = static_cast< std::vector< char >::size_type >(val1);
  ecode2 = SWIG_AsVal_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VecChar" "', argument " "2"" of type '" "std::vector< char >::value_type""'");
  } 
  temp2 = static_cast< std::vector< char >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< char > *)new std::vector< char >(arg1,(std::vector< char >::value_type const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, SWIG_POINTER_OWN |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecChar_push_back ( SEXP self, SEXP x)
{
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< char >::value_type temp2 ;
  char val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecChar_push_back" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(x, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecChar_push_back" "', argument " "2"" of type '" "std::vector< char >::value_type""'");
  } 
  temp2 = static_cast< std::vector< char >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< char >::value_type const &)*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecChar_front ( SEXP self, SEXP s_swig_copy)
{
  std::vector< char >::value_type *result = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecChar_front" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = (std::vector< char >::value_type *) &((std::vector< char > const *)arg1)->front();
  r_ans = SWIG_From_char(static_cast< char >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecChar_back ( SEXP self, SEXP s_swig_copy)
{
  std::vector< char >::value_type *result = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecChar_back" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = (std::vector< char >::value_type *) &((std::vector< char > const *)arg1)->back();
  r_ans = SWIG_From_char(static_cast< char >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecChar_assign ( SEXP self, SEXP n, SEXP x)
{
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  std::vector< char >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< char >::value_type temp3 ;
  char val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecChar_assign" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecChar_assign" "', argument " "2"" of type '" "std::vector< char >::size_type""'");
  } 
  arg2 = static_cast< std::vector< char >::size_type >(val2);
  ecode3 = SWIG_AsVal_char(x, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecChar_assign" "', argument " "3"" of type '" "std::vector< char >::value_type""'");
  } 
  temp3 = static_cast< std::vector< char >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< char >::value_type const &)*arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecChar_resize__SWIG_1 ( SEXP self, SEXP new_size, SEXP x)
{
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  std::vector< char >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< char >::value_type temp3 ;
  char val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecChar_resize" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecChar_resize" "', argument " "2"" of type '" "std::vector< char >::size_type""'");
  } 
  arg2 = static_cast< std::vector< char >::size_type >(val2);
  ecode3 = SWIG_AsVal_char(x, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecChar_resize" "', argument " "3"" of type '" "std::vector< char >::value_type""'");
  } 
  temp3 = static_cast< std::vector< char >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< char >::value_type const &)*arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecChar_reserve ( SEXP self, SEXP n)
{
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecChar_reserve" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecChar_reserve" "', argument " "2"" of type '" "std::vector< char >::size_type""'");
  } 
  arg2 = static_cast< std::vector< char >::size_type >(val2);
  (arg1)->reserve(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecChar_capacity ( SEXP self, SEXP s_swig_copy)
{
  std::vector< char >::size_type result;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecChar_capacity" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = ((std::vector< char > const *)arg1)->capacity();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_VecChar ( SEXP self)
{
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VecChar" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecDouble___nonzero__ ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecDouble___nonzero__" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_double_Sg__Sg____nonzero__((std::vector< std::vector< double > > const *)arg1);
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecDouble___len__ ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::vector< double > >::size_type result;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecDouble___len__" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = std_vector_Sl_std_vector_Sl_double_Sg__Sg____len__((std::vector< std::vector< double > > const *)arg1);
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecDouble_pop ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::vector< double > >::value_type result;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecDouble_pop" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  try {
    result = std_vector_Sl_std_vector_Sl_double_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecDouble___getslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *result = 0 ;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  std::vector< std::vector< double > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecDouble___getslice__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecDouble___getslice__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecVecDouble___getslice__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< double > >::difference_type >(val3);
  try {
    result = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)std_vector_Sl_std_vector_Sl_double_Sg__Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_POINTER_OWN |  0 );
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecDouble___setslice__ ( SEXP self, SEXP i, SEXP j, SEXP v)
{
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  std::vector< std::vector< double > >::difference_type arg3 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecDouble___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecDouble___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecVecDouble___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< double > >::difference_type >(val3);
  {
    std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *ptr = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)0;
    res4 = swig::asptr(v, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VecVecDouble___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecDouble___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  } catch(std::invalid_argument &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecDouble___delslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  std::vector< std::vector< double > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecDouble___delslice__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecDouble___delslice__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecVecDouble___delslice__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< double > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecDouble___delitem__ ( SEXP self, SEXP i)
{
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecDouble___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecDouble___delitem__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____delitem__(arg1,arg2);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecDouble___getitem__ ( SEXP self, SEXP i, SEXP s_swig_copy)
{
  std::vector< std::vector< double > >::value_type *result = 0 ;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecDouble___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecDouble___getitem__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  try {
    result = (std::vector< std::vector< double > >::value_type *) &std_vector_Sl_std_vector_Sl_double_Sg__Sg____getitem__((std::vector< std::vector< double > > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecDouble___setitem__ ( SEXP self, SEXP i, SEXP x)
{
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  std::vector< std::vector< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecDouble___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecDouble___setitem__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(x, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecVecDouble___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecDouble___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem__(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecDouble_append ( SEXP self, SEXP x)
{
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecDouble_append" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(x, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecVecDouble_append" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecDouble_append" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_vector_Sl_double_Sg__Sg__append(arg1,(std::vector< double,std::allocator< double > > const &)*arg2);
  r_ans = R_NilValue;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecVecDouble__SWIG_0 ( )
{
  std::vector< std::vector< double > > *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_POINTER_OWN |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecVecDouble__SWIG_1 ( SEXP other)
{
  std::vector< std::vector< double > > *result = 0 ;
  std::vector< std::vector< double,std::allocator< double > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *ptr = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)0;
    res1 = swig::asptr(other, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VecVecDouble" "', argument " "1"" of type '" "std::vector< std::vector< double,std::allocator< double > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VecVecDouble" "', argument " "1"" of type '" "std::vector< std::vector< double,std::allocator< double > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >((std::vector< std::vector< double,std::allocator< double > > > const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecDouble_empty ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecDouble_empty" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (bool)((std::vector< std::vector< double > > const *)arg1)->empty();
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecDouble_size ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::vector< double > >::size_type result;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecDouble_size" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = ((std::vector< std::vector< double > > const *)arg1)->size();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecDouble_swap ( SEXP self, SEXP v)
{
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double,std::allocator< double > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecDouble_swap" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  res2 = SWIG_R_ConvertPtr(v, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecVecDouble_swap" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecDouble_swap" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< double,std::allocator< double > > > * >(argp2);
  (arg1)->swap(*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecDouble_clear ( SEXP self)
{
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecDouble_clear" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  (arg1)->clear();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecDouble_get_allocator ( SEXP self, SEXP s_swig_copy)
{
  SwigValueWrapper< std::allocator< std::vector< double,std::allocator< double > > > > result;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecDouble_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = ((std::vector< std::vector< double > > const *)arg1)->get_allocator();
  r_ans = SWIG_R_NewPointerObj((new std::vector< std::vector< double > >::allocator_type(static_cast< const std::vector< std::vector< double > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecVecDouble__SWIG_2 ( SEXP size)
{
  std::vector< std::vector< double > > *result = 0 ;
  std::vector< std::vector< double > >::size_type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecVecDouble" "', argument " "1"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< double > >::size_type >(val1);
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecDouble_pop_back ( SEXP self)
{
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecDouble_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  (arg1)->pop_back();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecDouble_resize__SWIG_0 ( SEXP self, SEXP new_size)
{
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecDouble_resize" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecDouble_resize" "', argument " "2"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::size_type >(val2);
  (arg1)->resize(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecVecDouble__SWIG_3 ( SEXP size, SEXP value)
{
  std::vector< std::vector< double > > *result = 0 ;
  std::vector< std::vector< double > >::size_type arg1 ;
  std::vector< std::vector< double > >::value_type *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecVecDouble" "', argument " "1"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< double > >::size_type >(val1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(value, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VecVecDouble" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VecVecDouble" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >(arg1,(std::vector< std::vector< double > >::value_type const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_POINTER_OWN |  0 );
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecDouble_push_back ( SEXP self, SEXP x)
{
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecDouble_push_back" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(x, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecVecDouble_push_back" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecDouble_push_back" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::vector< double > >::value_type const &)*arg2);
  r_ans = R_NilValue;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecDouble_front ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::vector< double > >::value_type *result = 0 ;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecDouble_front" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (std::vector< std::vector< double > >::value_type *) &((std::vector< std::vector< double > > const *)arg1)->front();
  r_ans = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecDouble_back ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::vector< double > >::value_type *result = 0 ;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecDouble_back" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (std::vector< std::vector< double > >::value_type *) &((std::vector< std::vector< double > > const *)arg1)->back();
  r_ans = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecDouble_assign ( SEXP self, SEXP n, SEXP x)
{
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  std::vector< std::vector< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecDouble_assign" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecDouble_assign" "', argument " "2"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::size_type >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(x, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecVecDouble_assign" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecDouble_assign" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::vector< double > >::value_type const &)*arg3);
  r_ans = R_NilValue;
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecDouble_resize__SWIG_1 ( SEXP self, SEXP new_size, SEXP x)
{
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  std::vector< std::vector< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecDouble_resize" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecDouble_resize" "', argument " "2"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::size_type >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(x, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecVecDouble_resize" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecDouble_resize" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::vector< double > >::value_type const &)*arg3);
  r_ans = R_NilValue;
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecDouble_reserve ( SEXP self, SEXP n)
{
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecDouble_reserve" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecDouble_reserve" "', argument " "2"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::size_type >(val2);
  (arg1)->reserve(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecDouble_capacity ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::vector< double > >::size_type result;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecDouble_capacity" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = ((std::vector< std::vector< double > > const *)arg1)->capacity();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_VecVecDouble ( SEXP self)
{
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VecVecDouble" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecInt___nonzero__ ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecInt___nonzero__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)std_vector_Sl_int_Sg____nonzero__((std::vector< int > const *)arg1);
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecInt___len__ ( SEXP self, SEXP s_swig_copy)
{
  std::vector< int >::size_type result;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecInt___len__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = std_vector_Sl_int_Sg____len__((std::vector< int > const *)arg1);
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecInt_pop ( SEXP self, SEXP s_swig_copy)
{
  std::vector< int >::value_type result;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecInt_pop" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  try {
    result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecInt___getslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< int,std::allocator< int > > *result = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecInt___getslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecInt___getslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecInt___getslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecInt___setslice__ ( SEXP self, SEXP i, SEXP j, SEXP v)
{
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecInt___setslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecInt___setslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecInt___setslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res4 = swig::asptr(v, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VecInt___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecInt___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_int_Sg____setslice__(arg1,arg2,arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  } catch(std::invalid_argument &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecInt___delslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecInt___delslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecInt___delslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecInt___delslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    std_vector_Sl_int_Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecInt___delitem__ ( SEXP self, SEXP i)
{
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecInt___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecInt___delitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  try {
    std_vector_Sl_int_Sg____delitem__(arg1,arg2);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecInt___getitem__ ( SEXP self, SEXP i, SEXP s_swig_copy)
{
  std::vector< int >::value_type *result = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecInt___getitem__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecInt___getitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg____getitem__((std::vector< int > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = SWIG_From_int(static_cast< int >(*result));
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecInt___setitem__ ( SEXP self, SEXP i, SEXP x)
{
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecInt___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecInt___setitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(x, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecInt___setitem__" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_int_Sg____setitem__(arg1,arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecInt_append ( SEXP self, SEXP x)
{
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecInt_append" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(x, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecInt_append" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_int_Sg__append(arg1,(int const &)*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecInt__SWIG_0 ( )
{
  std::vector< int > *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (std::vector< int > *)new std::vector< int >();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecInt__SWIG_1 ( SEXP other)
{
  std::vector< int > *result = 0 ;
  std::vector< int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res1 = swig::asptr(other, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VecInt" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VecInt" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecInt_empty ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecInt_empty" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)((std::vector< int > const *)arg1)->empty();
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecInt_size ( SEXP self, SEXP s_swig_copy)
{
  std::vector< int >::size_type result;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecInt_size" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->size();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecInt_swap ( SEXP self, SEXP v)
{
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecInt_swap" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_R_ConvertPtr(v, &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecInt_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecInt_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int > * >(argp2);
  (arg1)->swap(*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecInt_clear ( SEXP self)
{
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecInt_clear" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  (arg1)->clear();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecInt_get_allocator ( SEXP self, SEXP s_swig_copy)
{
  SwigValueWrapper< std::allocator< int > > result;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecInt_get_allocator" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->get_allocator();
  r_ans = SWIG_R_NewPointerObj((new std::vector< int >::allocator_type(static_cast< const std::vector< int >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_int_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecInt__SWIG_2 ( SEXP size)
{
  std::vector< int > *result = 0 ;
  std::vector< int >::size_type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecInt" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  result = (std::vector< int > *)new std::vector< int >(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecInt_pop_back ( SEXP self)
{
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecInt_pop_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  (arg1)->pop_back();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecInt_resize__SWIG_0 ( SEXP self, SEXP new_size)
{
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecInt_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecInt_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  (arg1)->resize(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecInt__SWIG_3 ( SEXP size, SEXP value)
{
  std::vector< int > *result = 0 ;
  std::vector< int >::size_type arg1 ;
  std::vector< int >::value_type *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecInt" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VecInt" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< int > *)new std::vector< int >(arg1,(std::vector< int >::value_type const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecInt_push_back ( SEXP self, SEXP x)
{
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecInt_push_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(x, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecInt_push_back" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecInt_front ( SEXP self, SEXP s_swig_copy)
{
  std::vector< int >::value_type *result = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecInt_front" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->front();
  r_ans = SWIG_From_int(static_cast< int >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecInt_back ( SEXP self, SEXP s_swig_copy)
{
  std::vector< int >::value_type *result = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecInt_back" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->back();
  r_ans = SWIG_From_int(static_cast< int >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecInt_assign ( SEXP self, SEXP n, SEXP x)
{
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecInt_assign" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecInt_assign" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(x, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecInt_assign" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< int >::value_type const &)*arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecInt_resize__SWIG_1 ( SEXP self, SEXP new_size, SEXP x)
{
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecInt_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecInt_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(x, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecInt_resize" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< int >::value_type const &)*arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecInt_reserve ( SEXP self, SEXP n)
{
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecInt_reserve" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecInt_reserve" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  (arg1)->reserve(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecInt_capacity ( SEXP self, SEXP s_swig_copy)
{
  std::vector< int >::size_type result;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecInt_capacity" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->capacity();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_VecInt ( SEXP self)
{
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VecInt" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecInt___nonzero__ ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecInt___nonzero__" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_int_Sg__Sg____nonzero__((std::vector< std::vector< int > > const *)arg1);
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecInt___len__ ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::vector< int > >::size_type result;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecInt___len__" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = std_vector_Sl_std_vector_Sl_int_Sg__Sg____len__((std::vector< std::vector< int > > const *)arg1);
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecInt_pop ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::vector< int > >::value_type result;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecInt_pop" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  try {
    result = std_vector_Sl_std_vector_Sl_int_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = swig::from(static_cast< std::vector< int,std::allocator< int > > >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecInt___getslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *result = 0 ;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  std::vector< std::vector< int > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecInt___getslice__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecInt___getslice__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecVecInt___getslice__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< int > >::difference_type >(val3);
  try {
    result = (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)std_vector_Sl_std_vector_Sl_int_Sg__Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_OWN |  0 );
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecInt___setslice__ ( SEXP self, SEXP i, SEXP j, SEXP v)
{
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  std::vector< std::vector< int > >::difference_type arg3 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecInt___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecInt___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecVecInt___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< int > >::difference_type >(val3);
  {
    std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *ptr = (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)0;
    res4 = swig::asptr(v, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VecVecInt___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecInt___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  } catch(std::invalid_argument &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecInt___delslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  std::vector< std::vector< int > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecInt___delslice__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecInt___delslice__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecVecInt___delslice__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< int > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecInt___delitem__ ( SEXP self, SEXP i)
{
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecInt___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecInt___delitem__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____delitem__(arg1,arg2);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecInt___getitem__ ( SEXP self, SEXP i, SEXP s_swig_copy)
{
  std::vector< std::vector< int > >::value_type *result = 0 ;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecInt___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecInt___getitem__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  try {
    result = (std::vector< std::vector< int > >::value_type *) &std_vector_Sl_std_vector_Sl_int_Sg__Sg____getitem__((std::vector< std::vector< int > > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = swig::from(static_cast< std::vector< int,std::allocator< int > > >(*result));
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecInt___setitem__ ( SEXP self, SEXP i, SEXP x)
{
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  std::vector< std::vector< int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecInt___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecInt___setitem__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res3 = swig::asptr(x, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecVecInt___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecInt___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem__(arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecInt_append ( SEXP self, SEXP x)
{
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecInt_append" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(x, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecVecInt_append" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecInt_append" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_vector_Sl_int_Sg__Sg__append(arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
  r_ans = R_NilValue;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecVecInt__SWIG_0 ( )
{
  std::vector< std::vector< int > > *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_OWN |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecVecInt__SWIG_1 ( SEXP other)
{
  std::vector< std::vector< int > > *result = 0 ;
  std::vector< std::vector< int,std::allocator< int > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *ptr = (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)0;
    res1 = swig::asptr(other, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VecVecInt" "', argument " "1"" of type '" "std::vector< std::vector< int,std::allocator< int > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VecVecInt" "', argument " "1"" of type '" "std::vector< std::vector< int,std::allocator< int > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >((std::vector< std::vector< int,std::allocator< int > > > const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecInt_empty ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecInt_empty" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (bool)((std::vector< std::vector< int > > const *)arg1)->empty();
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecInt_size ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::vector< int > >::size_type result;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecInt_size" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = ((std::vector< std::vector< int > > const *)arg1)->size();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecInt_swap ( SEXP self, SEXP v)
{
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int,std::allocator< int > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecInt_swap" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  res2 = SWIG_R_ConvertPtr(v, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecVecInt_swap" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecInt_swap" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< int,std::allocator< int > > > * >(argp2);
  (arg1)->swap(*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecInt_clear ( SEXP self)
{
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecInt_clear" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  (arg1)->clear();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecInt_get_allocator ( SEXP self, SEXP s_swig_copy)
{
  SwigValueWrapper< std::allocator< std::vector< int,std::allocator< int > > > > result;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecInt_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = ((std::vector< std::vector< int > > const *)arg1)->get_allocator();
  r_ans = SWIG_R_NewPointerObj((new std::vector< std::vector< int > >::allocator_type(static_cast< const std::vector< std::vector< int > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecVecInt__SWIG_2 ( SEXP size)
{
  std::vector< std::vector< int > > *result = 0 ;
  std::vector< std::vector< int > >::size_type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecVecInt" "', argument " "1"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< int > >::size_type >(val1);
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecInt_pop_back ( SEXP self)
{
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecInt_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  (arg1)->pop_back();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecInt_resize__SWIG_0 ( SEXP self, SEXP new_size)
{
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecInt_resize" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecInt_resize" "', argument " "2"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::size_type >(val2);
  (arg1)->resize(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecVecInt__SWIG_3 ( SEXP size, SEXP value)
{
  std::vector< std::vector< int > > *result = 0 ;
  std::vector< std::vector< int > >::size_type arg1 ;
  std::vector< std::vector< int > >::value_type *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecVecInt" "', argument " "1"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< int > >::size_type >(val1);
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(value, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VecVecInt" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VecVecInt" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >(arg1,(std::vector< std::vector< int > >::value_type const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_OWN |  0 );
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecInt_push_back ( SEXP self, SEXP x)
{
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecInt_push_back" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(x, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecVecInt_push_back" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecInt_push_back" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::vector< int > >::value_type const &)*arg2);
  r_ans = R_NilValue;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecInt_front ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::vector< int > >::value_type *result = 0 ;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecInt_front" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (std::vector< std::vector< int > >::value_type *) &((std::vector< std::vector< int > > const *)arg1)->front();
  r_ans = swig::from(static_cast< std::vector< int,std::allocator< int > > >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecInt_back ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::vector< int > >::value_type *result = 0 ;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecInt_back" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (std::vector< std::vector< int > >::value_type *) &((std::vector< std::vector< int > > const *)arg1)->back();
  r_ans = swig::from(static_cast< std::vector< int,std::allocator< int > > >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecInt_assign ( SEXP self, SEXP n, SEXP x)
{
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  std::vector< std::vector< int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecInt_assign" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecInt_assign" "', argument " "2"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::size_type >(val2);
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res3 = swig::asptr(x, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecVecInt_assign" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecInt_assign" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::vector< int > >::value_type const &)*arg3);
  r_ans = R_NilValue;
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecInt_resize__SWIG_1 ( SEXP self, SEXP new_size, SEXP x)
{
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  std::vector< std::vector< int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecInt_resize" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecInt_resize" "', argument " "2"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::size_type >(val2);
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res3 = swig::asptr(x, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecVecInt_resize" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecInt_resize" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::vector< int > >::value_type const &)*arg3);
  r_ans = R_NilValue;
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecInt_reserve ( SEXP self, SEXP n)
{
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecInt_reserve" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecInt_reserve" "', argument " "2"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::size_type >(val2);
  (arg1)->reserve(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecInt_capacity ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::vector< int > >::size_type result;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecInt_capacity" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = ((std::vector< std::vector< int > > const *)arg1)->capacity();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_VecVecInt ( SEXP self)
{
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VecVecInt" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecUINT8___nonzero__ ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecUINT8___nonzero__" "', argument " "1"" of type '" "std::vector< unsigned char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  result = (bool)std_vector_Sl_unsigned_SS_char_Sg____nonzero__((std::vector< unsigned char > const *)arg1);
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecUINT8___len__ ( SEXP self, SEXP s_swig_copy)
{
  std::vector< unsigned char >::size_type result;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecUINT8___len__" "', argument " "1"" of type '" "std::vector< unsigned char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  result = std_vector_Sl_unsigned_SS_char_Sg____len__((std::vector< unsigned char > const *)arg1);
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecUINT8_pop ( SEXP self, SEXP s_swig_copy)
{
  std::vector< unsigned char >::value_type result;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecUINT8_pop" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  try {
    result = (std::vector< unsigned char >::value_type)std_vector_Sl_unsigned_SS_char_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecUINT8___getslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< unsigned char,std::allocator< unsigned char > > *result = 0 ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::difference_type arg2 ;
  std::vector< unsigned char >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecUINT8___getslice__" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecUINT8___getslice__" "', argument " "2"" of type '" "std::vector< unsigned char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecUINT8___getslice__" "', argument " "3"" of type '" "std::vector< unsigned char >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned char >::difference_type >(val3);
  try {
    result = (std::vector< unsigned char,std::allocator< unsigned char > > *)std_vector_Sl_unsigned_SS_char_Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, SWIG_POINTER_OWN |  0 );
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecUINT8___setslice__ ( SEXP self, SEXP i, SEXP j, SEXP v)
{
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::difference_type arg2 ;
  std::vector< unsigned char >::difference_type arg3 ;
  std::vector< unsigned char,std::allocator< unsigned char > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecUINT8___setslice__" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecUINT8___setslice__" "', argument " "2"" of type '" "std::vector< unsigned char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecUINT8___setslice__" "', argument " "3"" of type '" "std::vector< unsigned char >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned char >::difference_type >(val3);
  {
    std::vector< unsigned char,std::allocator< unsigned char > > *ptr = (std::vector< unsigned char,std::allocator< unsigned char > > *)0;
    res4 = swig::asptr(v, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VecUINT8___setslice__" "', argument " "4"" of type '" "std::vector< unsigned char,std::allocator< unsigned char > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecUINT8___setslice__" "', argument " "4"" of type '" "std::vector< unsigned char,std::allocator< unsigned char > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_unsigned_SS_char_Sg____setslice__(arg1,arg2,arg3,(std::vector< unsigned char,std::allocator< unsigned char > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  } catch(std::invalid_argument &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecUINT8___delslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::difference_type arg2 ;
  std::vector< unsigned char >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecUINT8___delslice__" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecUINT8___delslice__" "', argument " "2"" of type '" "std::vector< unsigned char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecUINT8___delslice__" "', argument " "3"" of type '" "std::vector< unsigned char >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned char >::difference_type >(val3);
  try {
    std_vector_Sl_unsigned_SS_char_Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecUINT8___delitem__ ( SEXP self, SEXP i)
{
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecUINT8___delitem__" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecUINT8___delitem__" "', argument " "2"" of type '" "std::vector< unsigned char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned char >::difference_type >(val2);
  try {
    std_vector_Sl_unsigned_SS_char_Sg____delitem__(arg1,arg2);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecUINT8___getitem__ ( SEXP self, SEXP i, SEXP s_swig_copy)
{
  std::vector< unsigned char >::value_type *result = 0 ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecUINT8___getitem__" "', argument " "1"" of type '" "std::vector< unsigned char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecUINT8___getitem__" "', argument " "2"" of type '" "std::vector< unsigned char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned char >::difference_type >(val2);
  try {
    result = (std::vector< unsigned char >::value_type *) &std_vector_Sl_unsigned_SS_char_Sg____getitem__((std::vector< unsigned char > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(*result));
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecUINT8___setitem__ ( SEXP self, SEXP i, SEXP x)
{
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::difference_type arg2 ;
  std::vector< unsigned char >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned char >::value_type temp3 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecUINT8___setitem__" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecUINT8___setitem__" "', argument " "2"" of type '" "std::vector< unsigned char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(x, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecUINT8___setitem__" "', argument " "3"" of type '" "std::vector< unsigned char >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned char >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_unsigned_SS_char_Sg____setitem__(arg1,arg2,(unsigned char const &)*arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecUINT8_append ( SEXP self, SEXP x)
{
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< unsigned char >::value_type temp2 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecUINT8_append" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(x, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecUINT8_append" "', argument " "2"" of type '" "std::vector< unsigned char >::value_type""'");
  } 
  temp2 = static_cast< std::vector< unsigned char >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_unsigned_SS_char_Sg__append(arg1,(unsigned char const &)*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecUINT8__SWIG_0 ( )
{
  std::vector< unsigned char > *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, SWIG_POINTER_OWN |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecUINT8__SWIG_1 ( SEXP other)
{
  std::vector< unsigned char > *result = 0 ;
  std::vector< unsigned char > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    std::vector< unsigned char,std::allocator< unsigned char > > *ptr = (std::vector< unsigned char,std::allocator< unsigned char > > *)0;
    res1 = swig::asptr(other, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VecUINT8" "', argument " "1"" of type '" "std::vector< unsigned char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VecUINT8" "', argument " "1"" of type '" "std::vector< unsigned char > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >((std::vector< unsigned char > const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecUINT8_empty ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecUINT8_empty" "', argument " "1"" of type '" "std::vector< unsigned char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  result = (bool)((std::vector< unsigned char > const *)arg1)->empty();
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecUINT8_size ( SEXP self, SEXP s_swig_copy)
{
  std::vector< unsigned char >::size_type result;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecUINT8_size" "', argument " "1"" of type '" "std::vector< unsigned char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  result = ((std::vector< unsigned char > const *)arg1)->size();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecUINT8_swap ( SEXP self, SEXP v)
{
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecUINT8_swap" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  res2 = SWIG_R_ConvertPtr(v, &argp2, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecUINT8_swap" "', argument " "2"" of type '" "std::vector< unsigned char > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecUINT8_swap" "', argument " "2"" of type '" "std::vector< unsigned char > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< unsigned char > * >(argp2);
  (arg1)->swap(*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecUINT8_clear ( SEXP self)
{
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecUINT8_clear" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  (arg1)->clear();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecUINT8_get_allocator ( SEXP self, SEXP s_swig_copy)
{
  SwigValueWrapper< std::allocator< unsigned char > > result;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecUINT8_get_allocator" "', argument " "1"" of type '" "std::vector< unsigned char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  result = ((std::vector< unsigned char > const *)arg1)->get_allocator();
  r_ans = SWIG_R_NewPointerObj((new std::vector< unsigned char >::allocator_type(static_cast< const std::vector< unsigned char >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_unsigned_char_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecUINT8__SWIG_2 ( SEXP size)
{
  std::vector< unsigned char > *result = 0 ;
  std::vector< unsigned char >::size_type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecUINT8" "', argument " "1"" of type '" "std::vector< unsigned char >::size_type""'");
  } 
  arg1 = static_cast< std::vector< unsigned char >::size_type >(val1);
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecUINT8_pop_back ( SEXP self)
{
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecUINT8_pop_back" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  (arg1)->pop_back();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecUINT8_resize__SWIG_0 ( SEXP self, SEXP new_size)
{
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecUINT8_resize" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecUINT8_resize" "', argument " "2"" of type '" "std::vector< unsigned char >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned char >::size_type >(val2);
  (arg1)->resize(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecUINT8__SWIG_3 ( SEXP size, SEXP value)
{
  std::vector< unsigned char > *result = 0 ;
  std::vector< unsigned char >::size_type arg1 ;
  std::vector< unsigned char >::value_type *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  std::vector< unsigned char >::value_type temp2 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecUINT8" "', argument " "1"" of type '" "std::vector< unsigned char >::size_type""'");
  } 
  arg1 = static_cast< std::vector< unsigned char >::size_type >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VecUINT8" "', argument " "2"" of type '" "std::vector< unsigned char >::value_type""'");
  } 
  temp2 = static_cast< std::vector< unsigned char >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >(arg1,(std::vector< unsigned char >::value_type const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, SWIG_POINTER_OWN |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecUINT8_push_back ( SEXP self, SEXP x)
{
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< unsigned char >::value_type temp2 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecUINT8_push_back" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(x, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecUINT8_push_back" "', argument " "2"" of type '" "std::vector< unsigned char >::value_type""'");
  } 
  temp2 = static_cast< std::vector< unsigned char >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< unsigned char >::value_type const &)*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecUINT8_front ( SEXP self, SEXP s_swig_copy)
{
  std::vector< unsigned char >::value_type *result = 0 ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecUINT8_front" "', argument " "1"" of type '" "std::vector< unsigned char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  result = (std::vector< unsigned char >::value_type *) &((std::vector< unsigned char > const *)arg1)->front();
  r_ans = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecUINT8_back ( SEXP self, SEXP s_swig_copy)
{
  std::vector< unsigned char >::value_type *result = 0 ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecUINT8_back" "', argument " "1"" of type '" "std::vector< unsigned char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  result = (std::vector< unsigned char >::value_type *) &((std::vector< unsigned char > const *)arg1)->back();
  r_ans = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecUINT8_assign ( SEXP self, SEXP n, SEXP x)
{
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  std::vector< unsigned char >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned char >::value_type temp3 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecUINT8_assign" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecUINT8_assign" "', argument " "2"" of type '" "std::vector< unsigned char >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned char >::size_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(x, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecUINT8_assign" "', argument " "3"" of type '" "std::vector< unsigned char >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned char >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< unsigned char >::value_type const &)*arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecUINT8_resize__SWIG_1 ( SEXP self, SEXP new_size, SEXP x)
{
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  std::vector< unsigned char >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned char >::value_type temp3 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecUINT8_resize" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecUINT8_resize" "', argument " "2"" of type '" "std::vector< unsigned char >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned char >::size_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(x, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecUINT8_resize" "', argument " "3"" of type '" "std::vector< unsigned char >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned char >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< unsigned char >::value_type const &)*arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecUINT8_reserve ( SEXP self, SEXP n)
{
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecUINT8_reserve" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecUINT8_reserve" "', argument " "2"" of type '" "std::vector< unsigned char >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned char >::size_type >(val2);
  (arg1)->reserve(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecUINT8_capacity ( SEXP self, SEXP s_swig_copy)
{
  std::vector< unsigned char >::size_type result;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecUINT8_capacity" "', argument " "1"" of type '" "std::vector< unsigned char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  result = ((std::vector< unsigned char > const *)arg1)->capacity();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_VecUINT8 ( SEXP self)
{
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VecUINT8" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecUINT8___nonzero__ ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecUINT8___nonzero__" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< unsigned char > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg____nonzero__((std::vector< std::vector< unsigned char > > const *)arg1);
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecUINT8___len__ ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::vector< unsigned char > >::size_type result;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecUINT8___len__" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< unsigned char > > * >(argp1);
  result = std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg____len__((std::vector< std::vector< unsigned char > > const *)arg1);
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecUINT8_pop ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::vector< unsigned char > >::value_type result;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecUINT8_pop" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< unsigned char > > * >(argp1);
  try {
    result = std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = swig::from(static_cast< std::vector< unsigned char,std::allocator< unsigned char > > >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecUINT8___getslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< std::vector< unsigned char,std::allocator< unsigned char > >,std::allocator< std::vector< unsigned char,std::allocator< unsigned char > > > > *result = 0 ;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  std::vector< std::vector< unsigned char > >::difference_type arg2 ;
  std::vector< std::vector< unsigned char > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecUINT8___getslice__" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< unsigned char > > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecUINT8___getslice__" "', argument " "2"" of type '" "std::vector< std::vector< unsigned char > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< unsigned char > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecVecUINT8___getslice__" "', argument " "3"" of type '" "std::vector< std::vector< unsigned char > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< unsigned char > >::difference_type >(val3);
  try {
    result = (std::vector< std::vector< unsigned char,std::allocator< unsigned char > >,std::allocator< std::vector< unsigned char,std::allocator< unsigned char > > > > *)std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, SWIG_POINTER_OWN |  0 );
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecUINT8___setslice__ ( SEXP self, SEXP i, SEXP j, SEXP v)
{
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  std::vector< std::vector< unsigned char > >::difference_type arg2 ;
  std::vector< std::vector< unsigned char > >::difference_type arg3 ;
  std::vector< std::vector< unsigned char,std::allocator< unsigned char > >,std::allocator< std::vector< unsigned char,std::allocator< unsigned char > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecUINT8___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< unsigned char > > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecUINT8___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< unsigned char > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< unsigned char > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecVecUINT8___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< unsigned char > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< unsigned char > >::difference_type >(val3);
  {
    std::vector< std::vector< unsigned char,std::allocator< unsigned char > >,std::allocator< std::vector< unsigned char,std::allocator< unsigned char > > > > *ptr = (std::vector< std::vector< unsigned char,std::allocator< unsigned char > >,std::allocator< std::vector< unsigned char,std::allocator< unsigned char > > > > *)0;
    res4 = swig::asptr(v, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VecVecUINT8___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< unsigned char,std::allocator< unsigned char > >,std::allocator< std::vector< unsigned char,std::allocator< unsigned char > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecUINT8___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< unsigned char,std::allocator< unsigned char > >,std::allocator< std::vector< unsigned char,std::allocator< unsigned char > > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< std::vector< unsigned char,std::allocator< unsigned char > >,std::allocator< std::vector< unsigned char,std::allocator< unsigned char > > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  } catch(std::invalid_argument &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecUINT8___delslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  std::vector< std::vector< unsigned char > >::difference_type arg2 ;
  std::vector< std::vector< unsigned char > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecUINT8___delslice__" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< unsigned char > > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecUINT8___delslice__" "', argument " "2"" of type '" "std::vector< std::vector< unsigned char > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< unsigned char > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecVecUINT8___delslice__" "', argument " "3"" of type '" "std::vector< std::vector< unsigned char > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< unsigned char > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecUINT8___delitem__ ( SEXP self, SEXP i)
{
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  std::vector< std::vector< unsigned char > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecUINT8___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< unsigned char > > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecUINT8___delitem__" "', argument " "2"" of type '" "std::vector< std::vector< unsigned char > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< unsigned char > >::difference_type >(val2);
  try {
    std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg____delitem__(arg1,arg2);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecUINT8___getitem__ ( SEXP self, SEXP i, SEXP s_swig_copy)
{
  std::vector< std::vector< unsigned char > >::value_type *result = 0 ;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  std::vector< std::vector< unsigned char > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecUINT8___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< unsigned char > > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecUINT8___getitem__" "', argument " "2"" of type '" "std::vector< std::vector< unsigned char > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< unsigned char > >::difference_type >(val2);
  try {
    result = (std::vector< std::vector< unsigned char > >::value_type *) &std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg____getitem__((std::vector< std::vector< unsigned char > > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = swig::from(static_cast< std::vector< unsigned char,std::allocator< unsigned char > > >(*result));
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecUINT8___setitem__ ( SEXP self, SEXP i, SEXP x)
{
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  std::vector< std::vector< unsigned char > >::difference_type arg2 ;
  std::vector< std::vector< unsigned char > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecUINT8___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< unsigned char > > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecUINT8___setitem__" "', argument " "2"" of type '" "std::vector< std::vector< unsigned char > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< unsigned char > >::difference_type >(val2);
  {
    std::vector< unsigned char,std::allocator< unsigned char > > *ptr = (std::vector< unsigned char,std::allocator< unsigned char > > *)0;
    res3 = swig::asptr(x, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecVecUINT8___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< unsigned char > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecUINT8___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< unsigned char > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg____setitem__(arg1,arg2,(std::vector< unsigned char,std::allocator< unsigned char > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecUINT8_append ( SEXP self, SEXP x)
{
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  std::vector< std::vector< unsigned char > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecUINT8_append" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< unsigned char > > * >(argp1);
  {
    std::vector< unsigned char,std::allocator< unsigned char > > *ptr = (std::vector< unsigned char,std::allocator< unsigned char > > *)0;
    res2 = swig::asptr(x, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecVecUINT8_append" "', argument " "2"" of type '" "std::vector< std::vector< unsigned char > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecUINT8_append" "', argument " "2"" of type '" "std::vector< std::vector< unsigned char > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_vector_Sl_unsigned_SS_char_Sg__Sg__append(arg1,(std::vector< unsigned char,std::allocator< unsigned char > > const &)*arg2);
  r_ans = R_NilValue;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecVecUINT8__SWIG_0 ( )
{
  std::vector< std::vector< unsigned char > > *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (std::vector< std::vector< unsigned char > > *)new std::vector< std::vector< unsigned char > >();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, SWIG_POINTER_OWN |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecVecUINT8__SWIG_1 ( SEXP other)
{
  std::vector< std::vector< unsigned char > > *result = 0 ;
  std::vector< std::vector< unsigned char,std::allocator< unsigned char > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    std::vector< std::vector< unsigned char,std::allocator< unsigned char > >,std::allocator< std::vector< unsigned char,std::allocator< unsigned char > > > > *ptr = (std::vector< std::vector< unsigned char,std::allocator< unsigned char > >,std::allocator< std::vector< unsigned char,std::allocator< unsigned char > > > > *)0;
    res1 = swig::asptr(other, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VecVecUINT8" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char,std::allocator< unsigned char > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VecVecUINT8" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char,std::allocator< unsigned char > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::vector< unsigned char > > *)new std::vector< std::vector< unsigned char > >((std::vector< std::vector< unsigned char,std::allocator< unsigned char > > > const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecUINT8_empty ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecUINT8_empty" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< unsigned char > > * >(argp1);
  result = (bool)((std::vector< std::vector< unsigned char > > const *)arg1)->empty();
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecUINT8_size ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::vector< unsigned char > >::size_type result;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecUINT8_size" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< unsigned char > > * >(argp1);
  result = ((std::vector< std::vector< unsigned char > > const *)arg1)->size();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecUINT8_swap ( SEXP self, SEXP v)
{
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  std::vector< std::vector< unsigned char,std::allocator< unsigned char > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecUINT8_swap" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< unsigned char > > * >(argp1);
  res2 = SWIG_R_ConvertPtr(v, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecVecUINT8_swap" "', argument " "2"" of type '" "std::vector< std::vector< unsigned char,std::allocator< unsigned char > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecUINT8_swap" "', argument " "2"" of type '" "std::vector< std::vector< unsigned char,std::allocator< unsigned char > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< unsigned char,std::allocator< unsigned char > > > * >(argp2);
  (arg1)->swap(*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecUINT8_clear ( SEXP self)
{
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecUINT8_clear" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< unsigned char > > * >(argp1);
  (arg1)->clear();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecUINT8_get_allocator ( SEXP self, SEXP s_swig_copy)
{
  SwigValueWrapper< std::allocator< std::vector< unsigned char,std::allocator< unsigned char > > > > result;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecUINT8_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< unsigned char > > * >(argp1);
  result = ((std::vector< std::vector< unsigned char > > const *)arg1)->get_allocator();
  r_ans = SWIG_R_NewPointerObj((new std::vector< std::vector< unsigned char > >::allocator_type(static_cast< const std::vector< std::vector< unsigned char > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecVecUINT8__SWIG_2 ( SEXP size)
{
  std::vector< std::vector< unsigned char > > *result = 0 ;
  std::vector< std::vector< unsigned char > >::size_type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecVecUINT8" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< unsigned char > >::size_type >(val1);
  result = (std::vector< std::vector< unsigned char > > *)new std::vector< std::vector< unsigned char > >(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecUINT8_pop_back ( SEXP self)
{
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecUINT8_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< unsigned char > > * >(argp1);
  (arg1)->pop_back();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecUINT8_resize__SWIG_0 ( SEXP self, SEXP new_size)
{
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  std::vector< std::vector< unsigned char > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecUINT8_resize" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< unsigned char > > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecUINT8_resize" "', argument " "2"" of type '" "std::vector< std::vector< unsigned char > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< unsigned char > >::size_type >(val2);
  (arg1)->resize(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecVecUINT8__SWIG_3 ( SEXP size, SEXP value)
{
  std::vector< std::vector< unsigned char > > *result = 0 ;
  std::vector< std::vector< unsigned char > >::size_type arg1 ;
  std::vector< std::vector< unsigned char > >::value_type *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecVecUINT8" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< unsigned char > >::size_type >(val1);
  {
    std::vector< unsigned char,std::allocator< unsigned char > > *ptr = (std::vector< unsigned char,std::allocator< unsigned char > > *)0;
    res2 = swig::asptr(value, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VecVecUINT8" "', argument " "2"" of type '" "std::vector< std::vector< unsigned char > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VecVecUINT8" "', argument " "2"" of type '" "std::vector< std::vector< unsigned char > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::vector< unsigned char > > *)new std::vector< std::vector< unsigned char > >(arg1,(std::vector< std::vector< unsigned char > >::value_type const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, SWIG_POINTER_OWN |  0 );
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecUINT8_push_back ( SEXP self, SEXP x)
{
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  std::vector< std::vector< unsigned char > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecUINT8_push_back" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< unsigned char > > * >(argp1);
  {
    std::vector< unsigned char,std::allocator< unsigned char > > *ptr = (std::vector< unsigned char,std::allocator< unsigned char > > *)0;
    res2 = swig::asptr(x, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecVecUINT8_push_back" "', argument " "2"" of type '" "std::vector< std::vector< unsigned char > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecUINT8_push_back" "', argument " "2"" of type '" "std::vector< std::vector< unsigned char > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::vector< unsigned char > >::value_type const &)*arg2);
  r_ans = R_NilValue;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecUINT8_front ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::vector< unsigned char > >::value_type *result = 0 ;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecUINT8_front" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< unsigned char > > * >(argp1);
  result = (std::vector< std::vector< unsigned char > >::value_type *) &((std::vector< std::vector< unsigned char > > const *)arg1)->front();
  r_ans = swig::from(static_cast< std::vector< unsigned char,std::allocator< unsigned char > > >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecUINT8_back ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::vector< unsigned char > >::value_type *result = 0 ;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecUINT8_back" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< unsigned char > > * >(argp1);
  result = (std::vector< std::vector< unsigned char > >::value_type *) &((std::vector< std::vector< unsigned char > > const *)arg1)->back();
  r_ans = swig::from(static_cast< std::vector< unsigned char,std::allocator< unsigned char > > >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecUINT8_assign ( SEXP self, SEXP n, SEXP x)
{
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  std::vector< std::vector< unsigned char > >::size_type arg2 ;
  std::vector< std::vector< unsigned char > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecUINT8_assign" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< unsigned char > > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecUINT8_assign" "', argument " "2"" of type '" "std::vector< std::vector< unsigned char > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< unsigned char > >::size_type >(val2);
  {
    std::vector< unsigned char,std::allocator< unsigned char > > *ptr = (std::vector< unsigned char,std::allocator< unsigned char > > *)0;
    res3 = swig::asptr(x, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecVecUINT8_assign" "', argument " "3"" of type '" "std::vector< std::vector< unsigned char > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecUINT8_assign" "', argument " "3"" of type '" "std::vector< std::vector< unsigned char > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::vector< unsigned char > >::value_type const &)*arg3);
  r_ans = R_NilValue;
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecUINT8_resize__SWIG_1 ( SEXP self, SEXP new_size, SEXP x)
{
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  std::vector< std::vector< unsigned char > >::size_type arg2 ;
  std::vector< std::vector< unsigned char > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecUINT8_resize" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< unsigned char > > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecUINT8_resize" "', argument " "2"" of type '" "std::vector< std::vector< unsigned char > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< unsigned char > >::size_type >(val2);
  {
    std::vector< unsigned char,std::allocator< unsigned char > > *ptr = (std::vector< unsigned char,std::allocator< unsigned char > > *)0;
    res3 = swig::asptr(x, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecVecUINT8_resize" "', argument " "3"" of type '" "std::vector< std::vector< unsigned char > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecUINT8_resize" "', argument " "3"" of type '" "std::vector< std::vector< unsigned char > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::vector< unsigned char > >::value_type const &)*arg3);
  r_ans = R_NilValue;
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecUINT8_reserve ( SEXP self, SEXP n)
{
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  std::vector< std::vector< unsigned char > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecUINT8_reserve" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< unsigned char > > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecUINT8_reserve" "', argument " "2"" of type '" "std::vector< std::vector< unsigned char > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< unsigned char > >::size_type >(val2);
  (arg1)->reserve(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecUINT8_capacity ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::vector< unsigned char > >::size_type result;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecUINT8_capacity" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< unsigned char > > * >(argp1);
  result = ((std::vector< std::vector< unsigned char > > const *)arg1)->capacity();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_VecVecUINT8 ( SEXP self)
{
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VecVecUINT8" "', argument " "1"" of type '" "std::vector< std::vector< unsigned char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< unsigned char > > * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecChar___nonzero__ ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecChar___nonzero__" "', argument " "1"" of type '" "std::vector< std::vector< char > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< char > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_char_Sg__Sg____nonzero__((std::vector< std::vector< char > > const *)arg1);
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecChar___len__ ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::vector< char > >::size_type result;
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecChar___len__" "', argument " "1"" of type '" "std::vector< std::vector< char > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< char > > * >(argp1);
  result = std_vector_Sl_std_vector_Sl_char_Sg__Sg____len__((std::vector< std::vector< char > > const *)arg1);
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecChar_pop ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::vector< char > >::value_type result;
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecChar_pop" "', argument " "1"" of type '" "std::vector< std::vector< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< char > > * >(argp1);
  try {
    result = std_vector_Sl_std_vector_Sl_char_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = swig::from(static_cast< std::vector< char,std::allocator< char > > >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecChar___getslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< std::vector< char,std::allocator< char > >,std::allocator< std::vector< char,std::allocator< char > > > > *result = 0 ;
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  std::vector< std::vector< char > >::difference_type arg2 ;
  std::vector< std::vector< char > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecChar___getslice__" "', argument " "1"" of type '" "std::vector< std::vector< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< char > > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecChar___getslice__" "', argument " "2"" of type '" "std::vector< std::vector< char > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< char > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecVecChar___getslice__" "', argument " "3"" of type '" "std::vector< std::vector< char > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< char > >::difference_type >(val3);
  try {
    result = (std::vector< std::vector< char,std::allocator< char > >,std::allocator< std::vector< char,std::allocator< char > > > > *)std_vector_Sl_std_vector_Sl_char_Sg__Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, SWIG_POINTER_OWN |  0 );
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecChar___setslice__ ( SEXP self, SEXP i, SEXP j, SEXP v)
{
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  std::vector< std::vector< char > >::difference_type arg2 ;
  std::vector< std::vector< char > >::difference_type arg3 ;
  std::vector< std::vector< char,std::allocator< char > >,std::allocator< std::vector< char,std::allocator< char > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecChar___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< char > > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecChar___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< char > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< char > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecVecChar___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< char > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< char > >::difference_type >(val3);
  {
    std::vector< std::vector< char,std::allocator< char > >,std::allocator< std::vector< char,std::allocator< char > > > > *ptr = (std::vector< std::vector< char,std::allocator< char > >,std::allocator< std::vector< char,std::allocator< char > > > > *)0;
    res4 = swig::asptr(v, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VecVecChar___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< char,std::allocator< char > >,std::allocator< std::vector< char,std::allocator< char > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecChar___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< char,std::allocator< char > >,std::allocator< std::vector< char,std::allocator< char > > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_char_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< std::vector< char,std::allocator< char > >,std::allocator< std::vector< char,std::allocator< char > > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  } catch(std::invalid_argument &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecChar___delslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  std::vector< std::vector< char > >::difference_type arg2 ;
  std::vector< std::vector< char > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecChar___delslice__" "', argument " "1"" of type '" "std::vector< std::vector< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< char > > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecChar___delslice__" "', argument " "2"" of type '" "std::vector< std::vector< char > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< char > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecVecChar___delslice__" "', argument " "3"" of type '" "std::vector< std::vector< char > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< char > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_char_Sg__Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecChar___delitem__ ( SEXP self, SEXP i)
{
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  std::vector< std::vector< char > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecChar___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< char > > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecChar___delitem__" "', argument " "2"" of type '" "std::vector< std::vector< char > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< char > >::difference_type >(val2);
  try {
    std_vector_Sl_std_vector_Sl_char_Sg__Sg____delitem__(arg1,arg2);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecChar___getitem__ ( SEXP self, SEXP i, SEXP s_swig_copy)
{
  std::vector< std::vector< char > >::value_type *result = 0 ;
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  std::vector< std::vector< char > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecChar___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< char > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< char > > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecChar___getitem__" "', argument " "2"" of type '" "std::vector< std::vector< char > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< char > >::difference_type >(val2);
  try {
    result = (std::vector< std::vector< char > >::value_type *) &std_vector_Sl_std_vector_Sl_char_Sg__Sg____getitem__((std::vector< std::vector< char > > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = swig::from(static_cast< std::vector< char,std::allocator< char > > >(*result));
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecChar___setitem__ ( SEXP self, SEXP i, SEXP x)
{
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  std::vector< std::vector< char > >::difference_type arg2 ;
  std::vector< std::vector< char > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecChar___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< char > > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecChar___setitem__" "', argument " "2"" of type '" "std::vector< std::vector< char > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< char > >::difference_type >(val2);
  {
    std::vector< char,std::allocator< char > > *ptr = (std::vector< char,std::allocator< char > > *)0;
    res3 = swig::asptr(x, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecVecChar___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< char > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecChar___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< char > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_char_Sg__Sg____setitem__(arg1,arg2,(std::vector< char,std::allocator< char > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecChar_append ( SEXP self, SEXP x)
{
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  std::vector< std::vector< char > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecChar_append" "', argument " "1"" of type '" "std::vector< std::vector< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< char > > * >(argp1);
  {
    std::vector< char,std::allocator< char > > *ptr = (std::vector< char,std::allocator< char > > *)0;
    res2 = swig::asptr(x, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecVecChar_append" "', argument " "2"" of type '" "std::vector< std::vector< char > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecChar_append" "', argument " "2"" of type '" "std::vector< std::vector< char > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_vector_Sl_char_Sg__Sg__append(arg1,(std::vector< char,std::allocator< char > > const &)*arg2);
  r_ans = R_NilValue;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecVecChar__SWIG_0 ( )
{
  std::vector< std::vector< char > > *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (std::vector< std::vector< char > > *)new std::vector< std::vector< char > >();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, SWIG_POINTER_OWN |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecVecChar__SWIG_1 ( SEXP other)
{
  std::vector< std::vector< char > > *result = 0 ;
  std::vector< std::vector< char,std::allocator< char > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    std::vector< std::vector< char,std::allocator< char > >,std::allocator< std::vector< char,std::allocator< char > > > > *ptr = (std::vector< std::vector< char,std::allocator< char > >,std::allocator< std::vector< char,std::allocator< char > > > > *)0;
    res1 = swig::asptr(other, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VecVecChar" "', argument " "1"" of type '" "std::vector< std::vector< char,std::allocator< char > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VecVecChar" "', argument " "1"" of type '" "std::vector< std::vector< char,std::allocator< char > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::vector< char > > *)new std::vector< std::vector< char > >((std::vector< std::vector< char,std::allocator< char > > > const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecChar_empty ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecChar_empty" "', argument " "1"" of type '" "std::vector< std::vector< char > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< char > > * >(argp1);
  result = (bool)((std::vector< std::vector< char > > const *)arg1)->empty();
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecChar_size ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::vector< char > >::size_type result;
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecChar_size" "', argument " "1"" of type '" "std::vector< std::vector< char > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< char > > * >(argp1);
  result = ((std::vector< std::vector< char > > const *)arg1)->size();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecChar_swap ( SEXP self, SEXP v)
{
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  std::vector< std::vector< char,std::allocator< char > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecChar_swap" "', argument " "1"" of type '" "std::vector< std::vector< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< char > > * >(argp1);
  res2 = SWIG_R_ConvertPtr(v, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecVecChar_swap" "', argument " "2"" of type '" "std::vector< std::vector< char,std::allocator< char > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecChar_swap" "', argument " "2"" of type '" "std::vector< std::vector< char,std::allocator< char > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< char,std::allocator< char > > > * >(argp2);
  (arg1)->swap(*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecChar_clear ( SEXP self)
{
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecChar_clear" "', argument " "1"" of type '" "std::vector< std::vector< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< char > > * >(argp1);
  (arg1)->clear();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecChar_get_allocator ( SEXP self, SEXP s_swig_copy)
{
  SwigValueWrapper< std::allocator< std::vector< char,std::allocator< char > > > > result;
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecChar_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< char > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< char > > * >(argp1);
  result = ((std::vector< std::vector< char > > const *)arg1)->get_allocator();
  r_ans = SWIG_R_NewPointerObj((new std::vector< std::vector< char > >::allocator_type(static_cast< const std::vector< std::vector< char > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecVecChar__SWIG_2 ( SEXP size)
{
  std::vector< std::vector< char > > *result = 0 ;
  std::vector< std::vector< char > >::size_type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecVecChar" "', argument " "1"" of type '" "std::vector< std::vector< char > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< char > >::size_type >(val1);
  result = (std::vector< std::vector< char > > *)new std::vector< std::vector< char > >(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecChar_pop_back ( SEXP self)
{
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecChar_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< char > > * >(argp1);
  (arg1)->pop_back();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecChar_resize__SWIG_0 ( SEXP self, SEXP new_size)
{
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  std::vector< std::vector< char > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecChar_resize" "', argument " "1"" of type '" "std::vector< std::vector< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< char > > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecChar_resize" "', argument " "2"" of type '" "std::vector< std::vector< char > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< char > >::size_type >(val2);
  (arg1)->resize(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecVecChar__SWIG_3 ( SEXP size, SEXP value)
{
  std::vector< std::vector< char > > *result = 0 ;
  std::vector< std::vector< char > >::size_type arg1 ;
  std::vector< std::vector< char > >::value_type *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecVecChar" "', argument " "1"" of type '" "std::vector< std::vector< char > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< char > >::size_type >(val1);
  {
    std::vector< char,std::allocator< char > > *ptr = (std::vector< char,std::allocator< char > > *)0;
    res2 = swig::asptr(value, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VecVecChar" "', argument " "2"" of type '" "std::vector< std::vector< char > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VecVecChar" "', argument " "2"" of type '" "std::vector< std::vector< char > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::vector< char > > *)new std::vector< std::vector< char > >(arg1,(std::vector< std::vector< char > >::value_type const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, SWIG_POINTER_OWN |  0 );
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecChar_push_back ( SEXP self, SEXP x)
{
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  std::vector< std::vector< char > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecChar_push_back" "', argument " "1"" of type '" "std::vector< std::vector< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< char > > * >(argp1);
  {
    std::vector< char,std::allocator< char > > *ptr = (std::vector< char,std::allocator< char > > *)0;
    res2 = swig::asptr(x, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecVecChar_push_back" "', argument " "2"" of type '" "std::vector< std::vector< char > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecChar_push_back" "', argument " "2"" of type '" "std::vector< std::vector< char > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::vector< char > >::value_type const &)*arg2);
  r_ans = R_NilValue;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecChar_front ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::vector< char > >::value_type *result = 0 ;
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecChar_front" "', argument " "1"" of type '" "std::vector< std::vector< char > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< char > > * >(argp1);
  result = (std::vector< std::vector< char > >::value_type *) &((std::vector< std::vector< char > > const *)arg1)->front();
  r_ans = swig::from(static_cast< std::vector< char,std::allocator< char > > >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecChar_back ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::vector< char > >::value_type *result = 0 ;
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecChar_back" "', argument " "1"" of type '" "std::vector< std::vector< char > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< char > > * >(argp1);
  result = (std::vector< std::vector< char > >::value_type *) &((std::vector< std::vector< char > > const *)arg1)->back();
  r_ans = swig::from(static_cast< std::vector< char,std::allocator< char > > >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecChar_assign ( SEXP self, SEXP n, SEXP x)
{
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  std::vector< std::vector< char > >::size_type arg2 ;
  std::vector< std::vector< char > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecChar_assign" "', argument " "1"" of type '" "std::vector< std::vector< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< char > > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecChar_assign" "', argument " "2"" of type '" "std::vector< std::vector< char > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< char > >::size_type >(val2);
  {
    std::vector< char,std::allocator< char > > *ptr = (std::vector< char,std::allocator< char > > *)0;
    res3 = swig::asptr(x, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecVecChar_assign" "', argument " "3"" of type '" "std::vector< std::vector< char > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecChar_assign" "', argument " "3"" of type '" "std::vector< std::vector< char > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::vector< char > >::value_type const &)*arg3);
  r_ans = R_NilValue;
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecChar_resize__SWIG_1 ( SEXP self, SEXP new_size, SEXP x)
{
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  std::vector< std::vector< char > >::size_type arg2 ;
  std::vector< std::vector< char > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecChar_resize" "', argument " "1"" of type '" "std::vector< std::vector< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< char > > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecChar_resize" "', argument " "2"" of type '" "std::vector< std::vector< char > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< char > >::size_type >(val2);
  {
    std::vector< char,std::allocator< char > > *ptr = (std::vector< char,std::allocator< char > > *)0;
    res3 = swig::asptr(x, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecVecChar_resize" "', argument " "3"" of type '" "std::vector< std::vector< char > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecVecChar_resize" "', argument " "3"" of type '" "std::vector< std::vector< char > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::vector< char > >::value_type const &)*arg3);
  r_ans = R_NilValue;
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecChar_reserve ( SEXP self, SEXP n)
{
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  std::vector< std::vector< char > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecChar_reserve" "', argument " "1"" of type '" "std::vector< std::vector< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< char > > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecVecChar_reserve" "', argument " "2"" of type '" "std::vector< std::vector< char > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< char > >::size_type >(val2);
  (arg1)->reserve(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecVecChar_capacity ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::vector< char > >::size_type result;
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecVecChar_capacity" "', argument " "1"" of type '" "std::vector< std::vector< char > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< char > > * >(argp1);
  result = ((std::vector< std::vector< char > > const *)arg1)->capacity();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_VecVecChar ( SEXP self)
{
  std::vector< std::vector< char > > *arg1 = (std::vector< std::vector< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VecVecChar" "', argument " "1"" of type '" "std::vector< std::vector< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< char > > * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_GeoDaWeight ( SEXP self)
{
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeoDaWeight" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_SaveDIDWeights ( SEXP self, SEXP num_obs, SEXP newids, SEXP stack_ids, SEXP ofname, SEXP s_swig_copy)
{
  bool result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  int arg2 ;
  std::vector< wxInt64,std::allocator< wxInt64 > > *arg3 = 0 ;
  std::vector< wxInt64,std::allocator< wxInt64 > > *arg4 = 0 ;
  wxString *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_SaveDIDWeights" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  arg2 = static_cast< int >(INTEGER(num_obs)[0]);
  res3 = SWIG_R_ConvertPtr(newids, &argp3, SWIGTYPE_p_std__vectorT_wxInt64_std__allocatorT_wxInt64_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeoDaWeight_SaveDIDWeights" "', argument " "3"" of type '" "std::vector< wxInt64,std::allocator< wxInt64 > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaWeight_SaveDIDWeights" "', argument " "3"" of type '" "std::vector< wxInt64,std::allocator< wxInt64 > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< wxInt64,std::allocator< wxInt64 > > * >(argp3);
  res4 = SWIG_R_ConvertPtr(stack_ids, &argp4, SWIGTYPE_p_std__vectorT_wxInt64_std__allocatorT_wxInt64_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GeoDaWeight_SaveDIDWeights" "', argument " "4"" of type '" "std::vector< wxInt64,std::allocator< wxInt64 > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaWeight_SaveDIDWeights" "', argument " "4"" of type '" "std::vector< wxInt64,std::allocator< wxInt64 > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< wxInt64,std::allocator< wxInt64 > > * >(argp4);
  res5 = SWIG_R_ConvertPtr(ofname, &argp5, SWIGTYPE_p_wxString,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GeoDaWeight_SaveDIDWeights" "', argument " "5"" of type '" "wxString const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaWeight_SaveDIDWeights" "', argument " "5"" of type '" "wxString const &""'"); 
  }
  arg5 = reinterpret_cast< wxString * >(argp5);
  result = (bool)(arg1)->SaveDIDWeights(arg2,*arg3,*arg4,(wxString const &)*arg5);
  r_ans = Rf_ScalarLogical(result);
  
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_SaveSpaceTimeWeights ( SEXP self, SEXP ofname, SEXP id_vec, SEXP time_ids, SEXP s_swig_copy)
{
  bool result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  wxString *arg2 = 0 ;
  std::vector< wxString,std::allocator< wxString > > *arg3 = 0 ;
  std::vector< wxString,std::allocator< wxString > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_SaveSpaceTimeWeights" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  res2 = SWIG_R_ConvertPtr(ofname, &argp2, SWIGTYPE_p_wxString,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoDaWeight_SaveSpaceTimeWeights" "', argument " "2"" of type '" "wxString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaWeight_SaveSpaceTimeWeights" "', argument " "2"" of type '" "wxString const &""'"); 
  }
  arg2 = reinterpret_cast< wxString * >(argp2);
  res3 = SWIG_R_ConvertPtr(id_vec, &argp3, SWIGTYPE_p_std__vectorT_wxString_std__allocatorT_wxString_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeoDaWeight_SaveSpaceTimeWeights" "', argument " "3"" of type '" "std::vector< wxString,std::allocator< wxString > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaWeight_SaveSpaceTimeWeights" "', argument " "3"" of type '" "std::vector< wxString,std::allocator< wxString > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< wxString,std::allocator< wxString > > * >(argp3);
  res4 = SWIG_R_ConvertPtr(time_ids, &argp4, SWIGTYPE_p_std__vectorT_wxString_std__allocatorT_wxString_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GeoDaWeight_SaveSpaceTimeWeights" "', argument " "4"" of type '" "std::vector< wxString,std::allocator< wxString > > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaWeight_SaveSpaceTimeWeights" "', argument " "4"" of type '" "std::vector< wxString,std::allocator< wxString > > const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< wxString,std::allocator< wxString > > * >(argp4);
  result = (bool)(arg1)->SaveSpaceTimeWeights((wxString const &)*arg2,(std::vector< wxString,std::allocator< wxString > > const &)*arg3,(std::vector< wxString,std::allocator< wxString > > const &)*arg4);
  r_ans = Rf_ScalarLogical(result);
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_CheckNeighbor ( SEXP self, SEXP obs_idx, SEXP nbr_idx, SEXP s_swig_copy)
{
  bool result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_CheckNeighbor" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  arg2 = static_cast< int >(INTEGER(obs_idx)[0]);
  arg3 = static_cast< int >(INTEGER(nbr_idx)[0]);
  result = (bool)(arg1)->CheckNeighbor(arg2,arg3);
  r_ans = Rf_ScalarLogical(result);
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_GetNeighbors ( SEXP self, SEXP obs_idx, SEXP s_swig_copy)
{
  SwigValueWrapper< std::vector< long,std::allocator< long > > > result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_GetNeighbors" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  arg2 = static_cast< int >(INTEGER(obs_idx)[0]);
  result = (arg1)->GetNeighbors(arg2);
  r_ans = SWIG_R_NewPointerObj((new std::vector< long,std::allocator< long > >(static_cast< const std::vector< long,std::allocator< long > >& >(result))), SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, SWIG_POINTER_OWN |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_Update ( SEXP self, SEXP undefs)
{
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  std::vector< bool,std::allocator< bool > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_Update" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  {
    std::vector<bool> *ptr = (std::vector<bool> *)0;
    res2 = swig::asptr(undefs, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoDaWeight_Update" "', argument " "2"" of type '" "std::vector< bool,std::allocator< bool > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaWeight_Update" "', argument " "2"" of type '" "std::vector< bool,std::allocator< bool > > const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->Update((std::vector< bool,std::allocator< bool > > const &)*arg2);
  r_ans = R_NilValue;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_HasIsolates ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_HasIsolates" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  result = (bool)(arg1)->HasIsolates();
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_GetNbrStats ( SEXP self)
{
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_GetNbrStats" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  (arg1)->GetNbrStats();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_GetNbrSize ( SEXP self, SEXP obs_idx, SEXP s_swig_copy)
{
  int result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_GetNbrSize" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  arg2 = static_cast< int >(INTEGER(obs_idx)[0]);
  result = (int)(arg1)->GetNbrSize(arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_SpatialLag ( SEXP self, SEXP obs_idx, SEXP data, SEXP s_swig_copy)
{
  double result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  int arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_SpatialLag" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  arg2 = static_cast< int >(INTEGER(obs_idx)[0]);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(data, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeoDaWeight_SpatialLag" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaWeight_SpatialLag" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (double)(arg1)->SpatialLag(arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_SaveToFile__SWIG_0 ( SEXP self, SEXP ofname, SEXP layer_name, SEXP id_var_name, SEXP id_vec, SEXP s_swig_copy)
{
  bool result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  wxString *arg2 = 0 ;
  wxString *arg3 = 0 ;
  wxString *arg4 = 0 ;
  std::vector< wxInt64,std::allocator< wxInt64 > > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_SaveToFile" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  res2 = SWIG_R_ConvertPtr(ofname, &argp2, SWIGTYPE_p_wxString,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoDaWeight_SaveToFile" "', argument " "2"" of type '" "wxString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaWeight_SaveToFile" "', argument " "2"" of type '" "wxString const &""'"); 
  }
  arg2 = reinterpret_cast< wxString * >(argp2);
  res3 = SWIG_R_ConvertPtr(layer_name, &argp3, SWIGTYPE_p_wxString,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeoDaWeight_SaveToFile" "', argument " "3"" of type '" "wxString const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaWeight_SaveToFile" "', argument " "3"" of type '" "wxString const &""'"); 
  }
  arg3 = reinterpret_cast< wxString * >(argp3);
  res4 = SWIG_R_ConvertPtr(id_var_name, &argp4, SWIGTYPE_p_wxString,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GeoDaWeight_SaveToFile" "', argument " "4"" of type '" "wxString const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaWeight_SaveToFile" "', argument " "4"" of type '" "wxString const &""'"); 
  }
  arg4 = reinterpret_cast< wxString * >(argp4);
  res5 = SWIG_R_ConvertPtr(id_vec, &argp5, SWIGTYPE_p_std__vectorT_wxInt64_std__allocatorT_wxInt64_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GeoDaWeight_SaveToFile" "', argument " "5"" of type '" "std::vector< wxInt64,std::allocator< wxInt64 > > const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaWeight_SaveToFile" "', argument " "5"" of type '" "std::vector< wxInt64,std::allocator< wxInt64 > > const &""'"); 
  }
  arg5 = reinterpret_cast< std::vector< wxInt64,std::allocator< wxInt64 > > * >(argp5);
  result = (bool)(arg1)->SaveToFile((wxString const &)*arg2,(wxString const &)*arg3,(wxString const &)*arg4,(std::vector< wxInt64,std::allocator< wxInt64 > > const &)*arg5);
  r_ans = Rf_ScalarLogical(result);
  
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_SaveToFile__SWIG_1 ( SEXP self, SEXP ofname, SEXP layer_name, SEXP id_var_name, SEXP id_vec, SEXP s_swig_copy)
{
  bool result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  wxString *arg2 = 0 ;
  wxString *arg3 = 0 ;
  wxString *arg4 = 0 ;
  std::vector< wxString,std::allocator< wxString > > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_SaveToFile" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  res2 = SWIG_R_ConvertPtr(ofname, &argp2, SWIGTYPE_p_wxString,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoDaWeight_SaveToFile" "', argument " "2"" of type '" "wxString const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaWeight_SaveToFile" "', argument " "2"" of type '" "wxString const &""'"); 
  }
  arg2 = reinterpret_cast< wxString * >(argp2);
  res3 = SWIG_R_ConvertPtr(layer_name, &argp3, SWIGTYPE_p_wxString,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeoDaWeight_SaveToFile" "', argument " "3"" of type '" "wxString const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaWeight_SaveToFile" "', argument " "3"" of type '" "wxString const &""'"); 
  }
  arg3 = reinterpret_cast< wxString * >(argp3);
  res4 = SWIG_R_ConvertPtr(id_var_name, &argp4, SWIGTYPE_p_wxString,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GeoDaWeight_SaveToFile" "', argument " "4"" of type '" "wxString const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaWeight_SaveToFile" "', argument " "4"" of type '" "wxString const &""'"); 
  }
  arg4 = reinterpret_cast< wxString * >(argp4);
  res5 = SWIG_R_ConvertPtr(id_vec, &argp5, SWIGTYPE_p_std__vectorT_wxString_std__allocatorT_wxString_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GeoDaWeight_SaveToFile" "', argument " "5"" of type '" "std::vector< wxString,std::allocator< wxString > > const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaWeight_SaveToFile" "', argument " "5"" of type '" "std::vector< wxString,std::allocator< wxString > > const &""'"); 
  }
  arg5 = reinterpret_cast< std::vector< wxString,std::allocator< wxString > > * >(argp5);
  result = (bool)(arg1)->SaveToFile((wxString const &)*arg2,(wxString const &)*arg3,(wxString const &)*arg4,(std::vector< wxString,std::allocator< wxString > > const &)*arg5);
  r_ans = Rf_ScalarLogical(result);
  
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_GetSparsity ( SEXP self, SEXP s_swig_copy)
{
  double result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_GetSparsity" "', argument " "1"" of type '" "GeoDaWeight const *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  result = (double)((GeoDaWeight const *)arg1)->GetSparsity();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_GetDensity ( SEXP self, SEXP s_swig_copy)
{
  double result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_GetDensity" "', argument " "1"" of type '" "GeoDaWeight const *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  result = (double)((GeoDaWeight const *)arg1)->GetDensity();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_GetMinNumNbrs ( SEXP self, SEXP s_swig_copy)
{
  int result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_GetMinNumNbrs" "', argument " "1"" of type '" "GeoDaWeight const *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  result = (int)((GeoDaWeight const *)arg1)->GetMinNumNbrs();
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_GetMaxNumNbrs ( SEXP self, SEXP s_swig_copy)
{
  int result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_GetMaxNumNbrs" "', argument " "1"" of type '" "GeoDaWeight const *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  result = (int)((GeoDaWeight const *)arg1)->GetMaxNumNbrs();
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_GetMeanNumNbrs ( SEXP self, SEXP s_swig_copy)
{
  double result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_GetMeanNumNbrs" "', argument " "1"" of type '" "GeoDaWeight const *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  result = (double)((GeoDaWeight const *)arg1)->GetMeanNumNbrs();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_GetMedianNumNbrs ( SEXP self, SEXP s_swig_copy)
{
  double result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_GetMedianNumNbrs" "', argument " "1"" of type '" "GeoDaWeight const *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  result = (double)((GeoDaWeight const *)arg1)->GetMedianNumNbrs();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_GetNumObs ( SEXP self, SEXP s_swig_copy)
{
  int result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_GetNumObs" "', argument " "1"" of type '" "GeoDaWeight const *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  result = (int)((GeoDaWeight const *)arg1)->GetNumObs();
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_IsInternalUse ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_IsInternalUse" "', argument " "1"" of type '" "GeoDaWeight const *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  result = (bool)((GeoDaWeight const *)arg1)->IsInternalUse();
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_Equal ( SEXP self, SEXP gw, SEXP s_swig_copy)
{
  GeoDaWeight *result = 0 ;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  GeoDaWeight *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_Equal" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  res2 = SWIG_R_ConvertPtr(gw, &argp2, SWIGTYPE_p_GeoDaWeight,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoDaWeight_Equal" "', argument " "2"" of type '" "GeoDaWeight const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaWeight_Equal" "', argument " "2"" of type '" "GeoDaWeight const &""'"); 
  }
  arg2 = reinterpret_cast< GeoDaWeight * >(argp2);
  result = (GeoDaWeight *) &(arg1)->operator =((GeoDaWeight const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_GetTitle ( SEXP self, SEXP s_swig_copy)
{
  wxString result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_GetTitle" "', argument " "1"" of type '" "GeoDaWeight const *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  result = ((GeoDaWeight const *)arg1)->GetTitle();
  r_ans = SWIG_R_NewPointerObj((new wxString(static_cast< const wxString& >(result))), SWIGTYPE_p_wxString, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_GetIDName ( SEXP self, SEXP s_swig_copy)
{
  wxString result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_GetIDName" "', argument " "1"" of type '" "GeoDaWeight const *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  result = ((GeoDaWeight const *)arg1)->GetIDName();
  r_ans = SWIG_R_NewPointerObj((new wxString(static_cast< const wxString& >(result))), SWIGTYPE_p_wxString, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_gal_type_get ( SEXP s_swig_copy)
{
  GeoDaWeight::WeightType result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (GeoDaWeight::WeightType)GeoDaWeight::gal_type;
  r_ans = SWIG_From_int(static_cast< int >(result));
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_gwt_type_get ( SEXP s_swig_copy)
{
  GeoDaWeight::WeightType result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (GeoDaWeight::WeightType)GeoDaWeight::gwt_type;
  r_ans = SWIG_From_int(static_cast< int >(result));
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_weight_type_set ( SEXP self, SEXP s_weight_type)
{
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  GeoDaWeight::WeightType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_weight_type_set" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  ecode2 = SWIG_AsVal_int(s_weight_type, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GeoDaWeight_weight_type_set" "', argument " "2"" of type '" "GeoDaWeight::WeightType""'");
  } 
  arg2 = static_cast< GeoDaWeight::WeightType >(val2);
  if (arg1) (arg1)->weight_type = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_weight_type_get ( SEXP self, SEXP s_swig_copy)
{
  GeoDaWeight::WeightType result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_weight_type_get" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  result = (GeoDaWeight::WeightType) ((arg1)->weight_type);
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_wflnm_set ( SEXP self, SEXP s_wflnm)
{
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  wxString arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_wflnm_set" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  {
    res2 = SWIG_R_ConvertPtr(s_wflnm, &argp2, SWIGTYPE_p_wxString,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoDaWeight_wflnm_set" "', argument " "2"" of type '" "wxString""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaWeight_wflnm_set" "', argument " "2"" of type '" "wxString""'");
    } else {
      arg2 = *(reinterpret_cast< wxString * >(argp2));
    }
  }
  if (arg1) (arg1)->wflnm = arg2;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_wflnm_get ( SEXP self, SEXP s_swig_copy)
{
  wxString result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_wflnm_get" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  result =  ((arg1)->wflnm);
  r_ans = SWIG_R_NewPointerObj((new wxString(static_cast< const wxString& >(result))), SWIGTYPE_p_wxString, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_id_field_set ( SEXP self, SEXP s_id_field)
{
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  wxString arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_id_field_set" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  {
    res2 = SWIG_R_ConvertPtr(s_id_field, &argp2, SWIGTYPE_p_wxString,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoDaWeight_id_field_set" "', argument " "2"" of type '" "wxString""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaWeight_id_field_set" "', argument " "2"" of type '" "wxString""'");
    } else {
      arg2 = *(reinterpret_cast< wxString * >(argp2));
    }
  }
  if (arg1) (arg1)->id_field = arg2;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_id_field_get ( SEXP self, SEXP s_swig_copy)
{
  wxString result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_id_field_get" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  result =  ((arg1)->id_field);
  r_ans = SWIG_R_NewPointerObj((new wxString(static_cast< const wxString& >(result))), SWIGTYPE_p_wxString, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_title_set ( SEXP self, SEXP s_title)
{
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  wxString arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_title_set" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  {
    res2 = SWIG_R_ConvertPtr(s_title, &argp2, SWIGTYPE_p_wxString,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoDaWeight_title_set" "', argument " "2"" of type '" "wxString""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaWeight_title_set" "', argument " "2"" of type '" "wxString""'");
    } else {
      arg2 = *(reinterpret_cast< wxString * >(argp2));
    }
  }
  if (arg1) (arg1)->title = arg2;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_title_get ( SEXP self, SEXP s_swig_copy)
{
  wxString result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_title_get" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  result =  ((arg1)->title);
  r_ans = SWIG_R_NewPointerObj((new wxString(static_cast< const wxString& >(result))), SWIGTYPE_p_wxString, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_symmetry_checked_set ( SEXP self, SEXP s_symmetry_checked)
{
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_symmetry_checked_set" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  arg2 = LOGICAL(s_symmetry_checked)[0] ? true : false;
  if (arg1) (arg1)->symmetry_checked = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_symmetry_checked_get ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_symmetry_checked_get" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  result = (bool) ((arg1)->symmetry_checked);
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_is_symmetric_set ( SEXP self, SEXP s_is_symmetric)
{
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_is_symmetric_set" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  arg2 = LOGICAL(s_is_symmetric)[0] ? true : false;
  if (arg1) (arg1)->is_symmetric = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_is_symmetric_get ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_is_symmetric_get" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  result = (bool) ((arg1)->is_symmetric);
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_num_obs_set ( SEXP self, SEXP s_num_obs)
{
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_num_obs_set" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  arg2 = static_cast< int >(INTEGER(s_num_obs)[0]);
  if (arg1) (arg1)->num_obs = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_num_obs_get ( SEXP self, SEXP s_swig_copy)
{
  int result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_num_obs_get" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  result = (int) ((arg1)->num_obs);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_sparsity_set ( SEXP self, SEXP s_sparsity)
{
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_sparsity_set" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  arg2 = static_cast< double >(REAL(s_sparsity)[0]);
  if (arg1) (arg1)->sparsity = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_sparsity_get ( SEXP self, SEXP s_swig_copy)
{
  double result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_sparsity_get" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  result = (double) ((arg1)->sparsity);
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_density_set ( SEXP self, SEXP s_density)
{
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_density_set" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  arg2 = static_cast< double >(REAL(s_density)[0]);
  if (arg1) (arg1)->density = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_density_get ( SEXP self, SEXP s_swig_copy)
{
  double result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_density_get" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  result = (double) ((arg1)->density);
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_min_nbrs_set ( SEXP self, SEXP s_min_nbrs)
{
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_min_nbrs_set" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  arg2 = static_cast< int >(INTEGER(s_min_nbrs)[0]);
  if (arg1) (arg1)->min_nbrs = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_min_nbrs_get ( SEXP self, SEXP s_swig_copy)
{
  int result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_min_nbrs_get" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  result = (int) ((arg1)->min_nbrs);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_max_nbrs_set ( SEXP self, SEXP s_max_nbrs)
{
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_max_nbrs_set" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  arg2 = static_cast< int >(INTEGER(s_max_nbrs)[0]);
  if (arg1) (arg1)->max_nbrs = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_max_nbrs_get ( SEXP self, SEXP s_swig_copy)
{
  int result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_max_nbrs_get" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  result = (int) ((arg1)->max_nbrs);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_mean_nbrs_set ( SEXP self, SEXP s_mean_nbrs)
{
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_mean_nbrs_set" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  arg2 = static_cast< double >(REAL(s_mean_nbrs)[0]);
  if (arg1) (arg1)->mean_nbrs = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_mean_nbrs_get ( SEXP self, SEXP s_swig_copy)
{
  double result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_mean_nbrs_get" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  result = (double) ((arg1)->mean_nbrs);
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_median_nbrs_set ( SEXP self, SEXP s_median_nbrs)
{
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_median_nbrs_set" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  arg2 = static_cast< double >(REAL(s_median_nbrs)[0]);
  if (arg1) (arg1)->median_nbrs = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_median_nbrs_get ( SEXP self, SEXP s_swig_copy)
{
  double result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_median_nbrs_get" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  result = (double) ((arg1)->median_nbrs);
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_is_internal_use_set ( SEXP self, SEXP s_is_internal_use)
{
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_is_internal_use_set" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  arg2 = LOGICAL(s_is_internal_use)[0] ? true : false;
  if (arg1) (arg1)->is_internal_use = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaWeight_is_internal_use_get ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  GeoDaWeight *arg1 = (GeoDaWeight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaWeight_is_internal_use_get" "', argument " "1"" of type '" "GeoDaWeight *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaWeight * >(argp1);
  result = (bool) ((arg1)->is_internal_use);
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_AbstractLocalSA ( SEXP self)
{
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AbstractLocalSA" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_ComputeLoalSA ( SEXP self)
{
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_ComputeLoalSA" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  (arg1)->ComputeLoalSA();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_CalcPseudoP ( SEXP self)
{
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_CalcPseudoP" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  (arg1)->CalcPseudoP();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_CalcPseudoP_threaded ( SEXP self)
{
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_CalcPseudoP_threaded" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  (arg1)->CalcPseudoP_threaded();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_CalcPseudoP_range ( SEXP self, SEXP obs_start, SEXP obs_end, SEXP seed_start)
{
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  int arg2 ;
  int arg3 ;
  uint64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_CalcPseudoP_range" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  arg2 = static_cast< int >(INTEGER(obs_start)[0]);
  arg3 = static_cast< int >(INTEGER(obs_end)[0]);
  {
    res4 = SWIG_R_ConvertPtr(seed_start, &argp4, SWIGTYPE_p_uint64_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AbstractLocalSA_CalcPseudoP_range" "', argument " "4"" of type '" "uint64_t""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractLocalSA_CalcPseudoP_range" "', argument " "4"" of type '" "uint64_t""'");
    } else {
      arg4 = *(reinterpret_cast< uint64_t * >(argp4));
    }
  }
  (arg1)->CalcPseudoP_range(arg2,arg3,arg4);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_LargerPermLocalSA ( SEXP self, SEXP cnt, SEXP permNeighbors, SEXP s_swig_copy)
{
  bool result;
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  int arg2 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_LargerPermLocalSA" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  arg2 = static_cast< int >(INTEGER(cnt)[0]);
  res3 = SWIG_R_ConvertPtr(permNeighbors, &argp3, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AbstractLocalSA_LargerPermLocalSA" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractLocalSA_LargerPermLocalSA" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp3);
  result = (bool)(arg1)->LargerPermLocalSA(arg2,*arg3);
  r_ans = Rf_ScalarLogical(result);
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_Run ( SEXP self)
{
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_Run" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  (arg1)->Run();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_SetSignificanceFilter ( SEXP self, SEXP filter_id)
{
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_SetSignificanceFilter" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  arg2 = static_cast< int >(INTEGER(filter_id)[0]);
  (arg1)->SetSignificanceFilter(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_GetSignificanceFilter ( SEXP self, SEXP s_swig_copy)
{
  int result;
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_GetSignificanceFilter" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  result = (int)(arg1)->GetSignificanceFilter();
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_GetSignificanceCutoff ( SEXP self, SEXP s_swig_copy)
{
  double result;
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_GetSignificanceCutoff" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  result = (double)(arg1)->GetSignificanceCutoff();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_SetSignificanceCutoff ( SEXP self, SEXP val)
{
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_SetSignificanceCutoff" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  arg2 = static_cast< double >(REAL(val)[0]);
  (arg1)->SetSignificanceCutoff(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_GetUserCutoff ( SEXP self, SEXP s_swig_copy)
{
  double result;
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_GetUserCutoff" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  result = (double)(arg1)->GetUserCutoff();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_SetUserCutoff ( SEXP self, SEXP val)
{
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_SetUserCutoff" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  arg2 = static_cast< double >(REAL(val)[0]);
  (arg1)->SetUserCutoff(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_GetBO ( SEXP self, SEXP s_swig_copy)
{
  double result;
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_GetBO" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  result = (double)(arg1)->GetBO();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_SetBO ( SEXP self, SEXP val)
{
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_SetBO" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  arg2 = static_cast< double >(REAL(val)[0]);
  (arg1)->SetBO(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_GetFDR ( SEXP self, SEXP s_swig_copy)
{
  double result;
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_GetFDR" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  result = (double)(arg1)->GetFDR();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_SetFDR ( SEXP self, SEXP val)
{
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_SetFDR" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  arg2 = static_cast< double >(REAL(val)[0]);
  (arg1)->SetFDR(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_GetNumPermutations ( SEXP self, SEXP s_swig_copy)
{
  int result;
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_GetNumPermutations" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  result = (int)(arg1)->GetNumPermutations();
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_SetNumPermutations ( SEXP self, SEXP val)
{
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_SetNumPermutations" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  arg2 = static_cast< int >(INTEGER(val)[0]);
  (arg1)->SetNumPermutations(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_GetLastUsedSeed ( SEXP self, SEXP s_swig_copy)
{
  uint64_t result;
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_GetLastUsedSeed" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  result = (arg1)->GetLastUsedSeed();
  r_ans = SWIG_R_NewPointerObj((new uint64_t(static_cast< const uint64_t& >(result))), SWIGTYPE_p_uint64_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_SetLastUsedSeed ( SEXP self, SEXP seed)
{
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_SetLastUsedSeed" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  {
    res2 = SWIG_R_ConvertPtr(seed, &argp2, SWIGTYPE_p_uint64_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AbstractLocalSA_SetLastUsedSeed" "', argument " "2"" of type '" "uint64_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractLocalSA_SetLastUsedSeed" "', argument " "2"" of type '" "uint64_t""'");
    } else {
      arg2 = *(reinterpret_cast< uint64_t * >(argp2));
    }
  }
  (arg1)->SetLastUsedSeed(arg2);
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_IsReuseLastSeed ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_IsReuseLastSeed" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  result = (bool)(arg1)->IsReuseLastSeed();
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_SetReuseLastSeed ( SEXP self, SEXP reuse)
{
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_SetReuseLastSeed" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  arg2 = LOGICAL(reuse)[0] ? true : false;
  (arg1)->SetReuseLastSeed(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_GetHasIsolates ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_GetHasIsolates" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  result = (bool)(arg1)->GetHasIsolates();
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_GetHasUndefined ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_GetHasUndefined" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  result = (bool)(arg1)->GetHasUndefined();
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_GetDefaultCategories ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::string,std::allocator< std::string > > result;
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_GetDefaultCategories" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  result = (arg1)->GetDefaultCategories();
  r_ans = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_GetDefaultCutoffs ( SEXP self, SEXP s_swig_copy)
{
  std::vector< double,std::allocator< double > > result;
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_GetDefaultCutoffs" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  result = (arg1)->GetDefaultCutoffs();
  r_ans = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_GetLocalSignificanceValues ( SEXP self, SEXP s_swig_copy)
{
  std::vector< double,std::allocator< double > > result;
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_GetLocalSignificanceValues" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  result = (arg1)->GetLocalSignificanceValues();
  r_ans = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_GetClusterIndicators ( SEXP self, SEXP s_swig_copy)
{
  std::vector< int,std::allocator< int > > result;
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_GetClusterIndicators" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  result = (arg1)->GetClusterIndicators();
  r_ans = swig::from(static_cast< std::vector< int,std::allocator< int > > >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_GetSigCatIndicators ( SEXP self, SEXP s_swig_copy)
{
  std::vector< int,std::allocator< int > > result;
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_GetSigCatIndicators" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  result = (arg1)->GetSigCatIndicators();
  r_ans = swig::from(static_cast< std::vector< int,std::allocator< int > > >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_IsRowStandardize ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_IsRowStandardize" "', argument " "1"" of type '" "AbstractLocalSA const *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  result = (bool)((AbstractLocalSA const *)arg1)->IsRowStandardize();
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_SetRowStandardize ( SEXP self, SEXP rowStandardize)
{
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_SetRowStandardize" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  arg2 = LOGICAL(rowStandardize)[0] ? true : false;
  (arg1)->SetRowStandardize(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_GetNumThreads ( SEXP self, SEXP s_swig_copy)
{
  int result;
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_GetNumThreads" "', argument " "1"" of type '" "AbstractLocalSA const *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  result = (int)((AbstractLocalSA const *)arg1)->GetNumThreads();
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_AbstractLocalSA_SetNumThreads ( SEXP self, SEXP n_threads)
{
  AbstractLocalSA *arg1 = (AbstractLocalSA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_AbstractLocalSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractLocalSA_SetNumThreads" "', argument " "1"" of type '" "AbstractLocalSA *""'"); 
  }
  arg1 = reinterpret_cast< AbstractLocalSA * >(argp1);
  arg2 = static_cast< int >(INTEGER(n_threads)[0]);
  (arg1)->SetNumThreads(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_UniLisa ( SEXP num_obs, SEXP data, SEXP undefs, SEXP w)
{
  UniLisa *result = 0 ;
  int arg1 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::vector< bool,std::allocator< bool > > *arg3 = 0 ;
  GeoDaWeight *arg4 = (GeoDaWeight *) 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(num_obs)[0]);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(data, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_UniLisa" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UniLisa" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector<bool> *ptr = (std::vector<bool> *)0;
    res3 = swig::asptr(undefs, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_UniLisa" "', argument " "3"" of type '" "std::vector< bool,std::allocator< bool > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UniLisa" "', argument " "3"" of type '" "std::vector< bool,std::allocator< bool > > const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_R_ConvertPtr(w, &argp4, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_UniLisa" "', argument " "4"" of type '" "GeoDaWeight *""'"); 
  }
  arg4 = reinterpret_cast< GeoDaWeight * >(argp4);
  result = (UniLisa *)new UniLisa(arg1,(std::vector< double,std::allocator< double > > const &)*arg2,(std::vector< bool,std::allocator< bool > > const &)*arg3,arg4);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_UniLisa, SWIG_POINTER_OWN |  0 );
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_UniLisa ( SEXP self)
{
  UniLisa *arg1 = (UniLisa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_UniLisa, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UniLisa" "', argument " "1"" of type '" "UniLisa *""'"); 
  }
  arg1 = reinterpret_cast< UniLisa * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_UniLisa_ComputeLoalSA ( SEXP self)
{
  UniLisa *arg1 = (UniLisa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_UniLisa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniLisa_ComputeLoalSA" "', argument " "1"" of type '" "UniLisa *""'"); 
  }
  arg1 = reinterpret_cast< UniLisa * >(argp1);
  (arg1)->ComputeLoalSA();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_UniLisa_LargerPermLocalSA ( SEXP self, SEXP cnt, SEXP permNeighbors, SEXP s_swig_copy)
{
  bool result;
  UniLisa *arg1 = (UniLisa *) 0 ;
  int arg2 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_UniLisa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniLisa_LargerPermLocalSA" "', argument " "1"" of type '" "UniLisa *""'"); 
  }
  arg1 = reinterpret_cast< UniLisa * >(argp1);
  arg2 = static_cast< int >(INTEGER(cnt)[0]);
  res3 = SWIG_R_ConvertPtr(permNeighbors, &argp3, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UniLisa_LargerPermLocalSA" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UniLisa_LargerPermLocalSA" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp3);
  result = (bool)(arg1)->LargerPermLocalSA(arg2,*arg3);
  r_ans = Rf_ScalarLogical(result);
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_UniLisa_GetClusterIndicators ( SEXP self, SEXP s_swig_copy)
{
  std::vector< int,std::allocator< int > > result;
  UniLisa *arg1 = (UniLisa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_UniLisa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniLisa_GetClusterIndicators" "', argument " "1"" of type '" "UniLisa *""'"); 
  }
  arg1 = reinterpret_cast< UniLisa * >(argp1);
  result = (arg1)->GetClusterIndicators();
  r_ans = swig::from(static_cast< std::vector< int,std::allocator< int > > >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_UniLisa_GetLagValues ( SEXP self, SEXP s_swig_copy)
{
  std::vector< double,std::allocator< double > > *result = 0 ;
  UniLisa *arg1 = (UniLisa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_UniLisa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniLisa_GetLagValues" "', argument " "1"" of type '" "UniLisa const *""'"); 
  }
  arg1 = reinterpret_cast< UniLisa * >(argp1);
  result = (std::vector< double,std::allocator< double > > *) &((UniLisa const *)arg1)->GetLagValues();
  r_ans = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_UniLisa_GetLocalMoranValues ( SEXP self, SEXP s_swig_copy)
{
  std::vector< double,std::allocator< double > > *result = 0 ;
  UniLisa *arg1 = (UniLisa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_UniLisa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniLisa_GetLocalMoranValues" "', argument " "1"" of type '" "UniLisa const *""'"); 
  }
  arg1 = reinterpret_cast< UniLisa * >(argp1);
  result = (std::vector< double,std::allocator< double > > *) &((UniLisa const *)arg1)->GetLocalMoranValues();
  r_ans = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaColumn_integer_type_get ( SEXP s_swig_copy)
{
  GeoDaColumn::FieldType result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (GeoDaColumn::FieldType)GeoDaColumn::integer_type;
  r_ans = SWIG_From_int(static_cast< int >(result));
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaColumn_string_type_get ( SEXP s_swig_copy)
{
  GeoDaColumn::FieldType result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (GeoDaColumn::FieldType)GeoDaColumn::string_type;
  r_ans = SWIG_From_int(static_cast< int >(result));
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaColumn_real_type_get ( SEXP s_swig_copy)
{
  GeoDaColumn::FieldType result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (GeoDaColumn::FieldType)GeoDaColumn::real_type;
  r_ans = SWIG_From_int(static_cast< int >(result));
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaColumn_name_set ( SEXP self, SEXP s_name)
{
  GeoDaColumn *arg1 = (GeoDaColumn *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaColumn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaColumn_name_set" "', argument " "1"" of type '" "GeoDaColumn *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaColumn * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(s_name, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoDaColumn_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaColumn_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->name = *arg2;
  r_ans = R_NilValue;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaColumn_name_get ( SEXP self, SEXP s_swig_copy)
{
  std::string *result = 0 ;
  GeoDaColumn *arg1 = (GeoDaColumn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaColumn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaColumn_name_get" "', argument " "1"" of type '" "GeoDaColumn *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaColumn * >(argp1);
  result = (std::string *) & ((arg1)->name);
  r_ans = SWIG_From_std_string(static_cast< std::string >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaColumn_field_type_set ( SEXP self, SEXP s_field_type)
{
  GeoDaColumn *arg1 = (GeoDaColumn *) 0 ;
  GeoDaColumn::FieldType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaColumn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaColumn_field_type_set" "', argument " "1"" of type '" "GeoDaColumn *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaColumn * >(argp1);
  ecode2 = SWIG_AsVal_int(s_field_type, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GeoDaColumn_field_type_set" "', argument " "2"" of type '" "GeoDaColumn::FieldType""'");
  } 
  arg2 = static_cast< GeoDaColumn::FieldType >(val2);
  if (arg1) (arg1)->field_type = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaColumn_field_type_get ( SEXP self, SEXP s_swig_copy)
{
  GeoDaColumn::FieldType result;
  GeoDaColumn *arg1 = (GeoDaColumn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaColumn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaColumn_field_type_get" "', argument " "1"" of type '" "GeoDaColumn *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaColumn * >(argp1);
  result = (GeoDaColumn::FieldType) ((arg1)->field_type);
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaColumn_field_length_set ( SEXP self, SEXP s_field_length)
{
  GeoDaColumn *arg1 = (GeoDaColumn *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaColumn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaColumn_field_length_set" "', argument " "1"" of type '" "GeoDaColumn *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaColumn * >(argp1);
  arg2 = static_cast< int >(INTEGER(s_field_length)[0]);
  if (arg1) (arg1)->field_length = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaColumn_field_length_get ( SEXP self, SEXP s_swig_copy)
{
  int result;
  GeoDaColumn *arg1 = (GeoDaColumn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaColumn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaColumn_field_length_get" "', argument " "1"" of type '" "GeoDaColumn *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaColumn * >(argp1);
  result = (int) ((arg1)->field_length);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaColumn_field_decimals_set ( SEXP self, SEXP s_field_decimals)
{
  GeoDaColumn *arg1 = (GeoDaColumn *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaColumn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaColumn_field_decimals_set" "', argument " "1"" of type '" "GeoDaColumn *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaColumn * >(argp1);
  arg2 = static_cast< int >(INTEGER(s_field_decimals)[0]);
  if (arg1) (arg1)->field_decimals = arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaColumn_field_decimals_get ( SEXP self, SEXP s_swig_copy)
{
  int result;
  GeoDaColumn *arg1 = (GeoDaColumn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaColumn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaColumn_field_decimals_get" "', argument " "1"" of type '" "GeoDaColumn *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaColumn * >(argp1);
  result = (int) ((arg1)->field_decimals);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_GeoDaColumn ( SEXP nm, SEXP ft, SEXP flen, SEXP fdec)
{
  GeoDaColumn *result = 0 ;
  std::string *arg1 = 0 ;
  GeoDaColumn::FieldType arg2 ;
  int arg3 ;
  int arg4 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(nm, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeoDaColumn" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeoDaColumn" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(ft, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GeoDaColumn" "', argument " "2"" of type '" "GeoDaColumn::FieldType""'");
  } 
  arg2 = static_cast< GeoDaColumn::FieldType >(val2);
  arg3 = static_cast< int >(INTEGER(flen)[0]);
  arg4 = static_cast< int >(INTEGER(fdec)[0]);
  result = (GeoDaColumn *)new GeoDaColumn((std::string const &)*arg1,arg2,arg3,arg4);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GeoDaColumn, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_GeoDaColumn ( SEXP self)
{
  GeoDaColumn *arg1 = (GeoDaColumn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaColumn, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeoDaColumn" "', argument " "1"" of type '" "GeoDaColumn *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaColumn * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaIntColumn_data_set ( SEXP self, SEXP s_data)
{
  GeoDaIntColumn *arg1 = (GeoDaIntColumn *) 0 ;
  std::vector< long long,std::allocator< long long > > *arg2 = (std::vector< long long,std::allocator< long long > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaIntColumn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaIntColumn_data_set" "', argument " "1"" of type '" "GeoDaIntColumn *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaIntColumn * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_data, &argp2, SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoDaIntColumn_data_set" "', argument " "2"" of type '" "std::vector< long long,std::allocator< long long > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< long long,std::allocator< long long > > * >(argp2);
  if (arg1) (arg1)->data = *arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaIntColumn_data_get ( SEXP self)
{
  std::vector< long long,std::allocator< long long > > *result = 0 ;
  GeoDaIntColumn *arg1 = (GeoDaIntColumn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaIntColumn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaIntColumn_data_get" "', argument " "1"" of type '" "GeoDaIntColumn *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaIntColumn * >(argp1);
  result = (std::vector< long long,std::allocator< long long > > *)& ((arg1)->data);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaIntColumn_GetData ( SEXP self, SEXP s_swig_copy)
{
  std::vector< long long,std::allocator< long long > > *result = 0 ;
  GeoDaIntColumn *arg1 = (GeoDaIntColumn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaIntColumn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaIntColumn_GetData" "', argument " "1"" of type '" "GeoDaIntColumn *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaIntColumn * >(argp1);
  result = (std::vector< long long,std::allocator< long long > > *) &(arg1)->GetData();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaIntColumn_SetData ( SEXP self, SEXP vals)
{
  GeoDaIntColumn *arg1 = (GeoDaIntColumn *) 0 ;
  std::vector< long long,std::allocator< long long > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaIntColumn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaIntColumn_SetData" "', argument " "1"" of type '" "GeoDaIntColumn *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaIntColumn * >(argp1);
  {
    std::vector<long long int> *ptr = (std::vector<long long int> *)0;
    res2 = swig::asptr(vals, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoDaIntColumn_SetData" "', argument " "2"" of type '" "std::vector< long long,std::allocator< long long > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaIntColumn_SetData" "', argument " "2"" of type '" "std::vector< long long,std::allocator< long long > > const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetData((std::vector< long long,std::allocator< long long > > const &)*arg2);
  r_ans = R_NilValue;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_GeoDaIntColumn ( SEXP nm, SEXP vals)
{
  GeoDaIntColumn *result = 0 ;
  std::string *arg1 = 0 ;
  std::vector< long long,std::allocator< long long > > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(nm, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeoDaIntColumn" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeoDaIntColumn" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector<long long int> *ptr = (std::vector<long long int> *)0;
    res2 = swig::asptr(vals, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_GeoDaIntColumn" "', argument " "2"" of type '" "std::vector< long long,std::allocator< long long > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeoDaIntColumn" "', argument " "2"" of type '" "std::vector< long long,std::allocator< long long > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (GeoDaIntColumn *)new GeoDaIntColumn((std::string const &)*arg1,(std::vector< long long,std::allocator< long long > > const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GeoDaIntColumn, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_GeoDaIntColumn ( SEXP self)
{
  GeoDaIntColumn *arg1 = (GeoDaIntColumn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaIntColumn, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeoDaIntColumn" "', argument " "1"" of type '" "GeoDaIntColumn *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaIntColumn * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaStringColumn_data_set ( SEXP self, SEXP s_data)
{
  GeoDaStringColumn *arg1 = (GeoDaStringColumn *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = (std::vector< std::string,std::allocator< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaStringColumn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaStringColumn_data_set" "', argument " "1"" of type '" "GeoDaStringColumn *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaStringColumn * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_data, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoDaStringColumn_data_set" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  if (arg1) (arg1)->data = *arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaStringColumn_data_get ( SEXP self)
{
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  GeoDaStringColumn *arg1 = (GeoDaStringColumn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaStringColumn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaStringColumn_data_get" "', argument " "1"" of type '" "GeoDaStringColumn *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaStringColumn * >(argp1);
  result = (std::vector< std::string,std::allocator< std::string > > *)& ((arg1)->data);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaStringColumn_GetData ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  GeoDaStringColumn *arg1 = (GeoDaStringColumn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaStringColumn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaStringColumn_GetData" "', argument " "1"" of type '" "GeoDaStringColumn *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaStringColumn * >(argp1);
  result = (std::vector< std::string,std::allocator< std::string > > *) &(arg1)->GetData();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaStringColumn_SetData ( SEXP self, SEXP vals)
{
  GeoDaStringColumn *arg1 = (GeoDaStringColumn *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaStringColumn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaStringColumn_SetData" "', argument " "1"" of type '" "GeoDaStringColumn *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaStringColumn * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(vals, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoDaStringColumn_SetData" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaStringColumn_SetData" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetData((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
  r_ans = R_NilValue;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_GeoDaStringColumn ( SEXP nm, SEXP vals)
{
  GeoDaStringColumn *result = 0 ;
  std::string *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(nm, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeoDaStringColumn" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeoDaStringColumn" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(vals, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_GeoDaStringColumn" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeoDaStringColumn" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (GeoDaStringColumn *)new GeoDaStringColumn((std::string const &)*arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GeoDaStringColumn, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_GeoDaStringColumn ( SEXP self)
{
  GeoDaStringColumn *arg1 = (GeoDaStringColumn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaStringColumn, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeoDaStringColumn" "', argument " "1"" of type '" "GeoDaStringColumn *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaStringColumn * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaRealColumn_data_set ( SEXP self, SEXP s_data)
{
  GeoDaRealColumn *arg1 = (GeoDaRealColumn *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaRealColumn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaRealColumn_data_set" "', argument " "1"" of type '" "GeoDaRealColumn *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaRealColumn * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_data, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoDaRealColumn_data_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->data = *arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaRealColumn_data_get ( SEXP self)
{
  std::vector< double,std::allocator< double > > *result = 0 ;
  GeoDaRealColumn *arg1 = (GeoDaRealColumn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaRealColumn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaRealColumn_data_get" "', argument " "1"" of type '" "GeoDaRealColumn *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaRealColumn * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->data);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaRealColumn_GetData ( SEXP self, SEXP s_swig_copy)
{
  std::vector< double,std::allocator< double > > *result = 0 ;
  GeoDaRealColumn *arg1 = (GeoDaRealColumn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaRealColumn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaRealColumn_GetData" "', argument " "1"" of type '" "GeoDaRealColumn *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaRealColumn * >(argp1);
  result = (std::vector< double,std::allocator< double > > *) &(arg1)->GetData();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaRealColumn_SetData ( SEXP self, SEXP vals)
{
  GeoDaRealColumn *arg1 = (GeoDaRealColumn *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaRealColumn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaRealColumn_SetData" "', argument " "1"" of type '" "GeoDaRealColumn *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaRealColumn * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(vals, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoDaRealColumn_SetData" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaRealColumn_SetData" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetData((std::vector< double,std::allocator< double > > const &)*arg2);
  r_ans = R_NilValue;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_GeoDaRealColumn ( SEXP nm, SEXP vals)
{
  GeoDaRealColumn *result = 0 ;
  std::string *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(nm, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeoDaRealColumn" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeoDaRealColumn" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(vals, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_GeoDaRealColumn" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeoDaRealColumn" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (GeoDaRealColumn *)new GeoDaRealColumn((std::string const &)*arg1,(std::vector< double,std::allocator< double > > const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GeoDaRealColumn, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_GeoDaRealColumn ( SEXP self)
{
  GeoDaRealColumn *arg1 = (GeoDaRealColumn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaRealColumn, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeoDaRealColumn" "', argument " "1"" of type '" "GeoDaRealColumn *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaRealColumn * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_GeoDaTable ( )
{
  GeoDaTable *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (GeoDaTable *)new GeoDaTable();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GeoDaTable, SWIG_POINTER_OWN |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_GeoDaTable ( SEXP self)
{
  GeoDaTable *arg1 = (GeoDaTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaTable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeoDaTable" "', argument " "1"" of type '" "GeoDaTable *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaTable * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaTable_AddIntColumn ( SEXP self, SEXP nm, SEXP vals)
{
  GeoDaTable *arg1 = (GeoDaTable *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< long long,std::allocator< long long > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaTable_AddIntColumn" "', argument " "1"" of type '" "GeoDaTable *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaTable * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(nm, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoDaTable_AddIntColumn" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaTable_AddIntColumn" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector<long long int> *ptr = (std::vector<long long int> *)0;
    res3 = swig::asptr(vals, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeoDaTable_AddIntColumn" "', argument " "3"" of type '" "std::vector< long long,std::allocator< long long > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaTable_AddIntColumn" "', argument " "3"" of type '" "std::vector< long long,std::allocator< long long > > const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->AddIntColumn((std::string const &)*arg2,(std::vector< long long,std::allocator< long long > > const &)*arg3);
  r_ans = R_NilValue;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaTable_AddStringColumn ( SEXP self, SEXP nm, SEXP vals)
{
  GeoDaTable *arg1 = (GeoDaTable *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaTable_AddStringColumn" "', argument " "1"" of type '" "GeoDaTable *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaTable * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(nm, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoDaTable_AddStringColumn" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaTable_AddStringColumn" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(vals, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeoDaTable_AddStringColumn" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaTable_AddStringColumn" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->AddStringColumn((std::string const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
  r_ans = R_NilValue;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaTable_AddRealColumn ( SEXP self, SEXP nm, SEXP vals)
{
  GeoDaTable *arg1 = (GeoDaTable *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaTable_AddRealColumn" "', argument " "1"" of type '" "GeoDaTable *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaTable * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(nm, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoDaTable_AddRealColumn" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaTable_AddRealColumn" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(vals, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeoDaTable_AddRealColumn" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaTable_AddRealColumn" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->AddRealColumn((std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
  r_ans = R_NilValue;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaTable_GetColumn__SWIG_0 ( SEXP self, SEXP col_name)
{
  GeoDaColumn *result = 0 ;
  GeoDaTable *arg1 = (GeoDaTable *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaTable_GetColumn" "', argument " "1"" of type '" "GeoDaTable *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaTable * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(col_name, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoDaTable_GetColumn" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDaTable_GetColumn" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (GeoDaColumn *)(arg1)->GetColumn((std::string const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GeoDaColumn, 0 |  0 );
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaTable_GetColumn__SWIG_1 ( SEXP self, SEXP idx)
{
  GeoDaColumn *result = 0 ;
  GeoDaTable *arg1 = (GeoDaTable *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaTable_GetColumn" "', argument " "1"" of type '" "GeoDaTable *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaTable * >(argp1);
  arg2 = static_cast< int >(INTEGER(idx)[0]);
  result = (GeoDaColumn *)(arg1)->GetColumn(arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GeoDaColumn, 0 |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDaTable_GetNumCols ( SEXP self, SEXP s_swig_copy)
{
  int result;
  GeoDaTable *arg1 = (GeoDaTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDaTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDaTable_GetNumCols" "', argument " "1"" of type '" "GeoDaTable *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaTable * >(argp1);
  result = (int)(arg1)->GetNumCols();
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_point_type_get ( SEXP s_swig_copy)
{
  GeoDa::MapType result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (GeoDa::MapType)GeoDa::point_type;
  r_ans = SWIG_From_int(static_cast< int >(result));
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_polygon_type_get ( SEXP s_swig_copy)
{
  GeoDa::MapType result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (GeoDa::MapType)GeoDa::polygon_type;
  r_ans = SWIG_From_int(static_cast< int >(result));
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_line_type_get ( SEXP s_swig_copy)
{
  GeoDa::MapType result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (GeoDa::MapType)GeoDa::line_type;
  r_ans = SWIG_From_int(static_cast< int >(result));
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_GeoDa__SWIG_0 ( SEXP layer_name, SEXP map_type, SEXP num_features, SEXP table, SEXP wkbs, SEXP wkb_bytes_len, SEXP pszProj4)
{
  GeoDa *result = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  GeoDaTable *arg4 = (GeoDaTable *) 0 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  std::vector< int,std::allocator< int > > *arg6 = 0 ;
  std::string *arg7 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  int res7 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(layer_name, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeoDa" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeoDa" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(map_type, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_GeoDa" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeoDa" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  arg3 = static_cast< int >(INTEGER(num_features)[0]);
  res4 = SWIG_R_ConvertPtr(table, &argp4, SWIGTYPE_p_GeoDaTable, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_GeoDa" "', argument " "4"" of type '" "GeoDaTable *""'"); 
  }
  arg4 = reinterpret_cast< GeoDaTable * >(argp4);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(wkbs);
      arg5 = static_cast< unsigned char * >(calloc(sizeof(unsigned char), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg5[_rswigi] = INTEGER(wkbs)[_rswigi];
      }
    }
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res6 = swig::asptr(wkb_bytes_len, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_GeoDa" "', argument " "6"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeoDa" "', argument " "6"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg6 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res7 = SWIG_AsPtr_std_string(pszProj4, &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_GeoDa" "', argument " "7"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeoDa" "', argument " "7"" of type '" "std::string const &""'"); 
    }
    arg7 = ptr;
  }
  result = (GeoDa *)new GeoDa((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4,arg5,(std::vector< int,std::allocator< int > > const &)*arg6,(std::string const &)*arg7);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GeoDa, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  
  
  free(arg5);
  
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_GeoDa__SWIG_1 ( SEXP pDsPath, SEXP layer_name)
{
  GeoDa *result = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_AsCharPtrAndSize(pDsPath, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeoDa" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(layer_name, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_GeoDa" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (GeoDa *)new GeoDa((char const *)arg1,(char const *)arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GeoDa, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_GeoDa__SWIG_2 ( SEXP pDsPath)
{
  GeoDa *result = 0 ;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_AsCharPtrAndSize(pDsPath, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeoDa" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (GeoDa *)new GeoDa((char const *)arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GeoDa, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_GeoDa ( SEXP self)
{
  GeoDa *arg1 = (GeoDa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeoDa" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_GetMapType ( SEXP self, SEXP s_swig_copy)
{
  GeoDa::MapType result;
  GeoDa *arg1 = (GeoDa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_GetMapType" "', argument " "1"" of type '" "GeoDa const *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  result = (GeoDa::MapType)((GeoDa const *)arg1)->GetMapType();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_GetNumObs ( SEXP self, SEXP s_swig_copy)
{
  int result;
  GeoDa *arg1 = (GeoDa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_GetNumObs" "', argument " "1"" of type '" "GeoDa const *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  result = (int)((GeoDa const *)arg1)->GetNumObs();
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_GetNumCols ( SEXP self, SEXP s_swig_copy)
{
  int result;
  GeoDa *arg1 = (GeoDa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_GetNumCols" "', argument " "1"" of type '" "GeoDa const *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  result = (int)((GeoDa const *)arg1)->GetNumCols();
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_GetFieldTypes ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::string,std::allocator< std::string > > result;
  GeoDa *arg1 = (GeoDa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_GetFieldTypes" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  result = (arg1)->GetFieldTypes();
  r_ans = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_GetFieldNames ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::string,std::allocator< std::string > > result;
  GeoDa *arg1 = (GeoDa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_GetFieldNames" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  result = (arg1)->GetFieldNames();
  r_ans = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_GetGeometryWKB ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::vector< unsigned char,std::allocator< unsigned char > >,std::allocator< std::vector< unsigned char,std::allocator< unsigned char > > > > result;
  GeoDa *arg1 = (GeoDa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_GetGeometryWKB" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  result = (arg1)->GetGeometryWKB();
  {
    int sz = (&result)->size();
    SEXP vec = Rf_allocVector(VECSXP, sz);
    for(int i = 0; i <sz; ++i)
    {
      int subLength = result[i].size();
      SEXP raws = Rf_allocVector(RAWSXP, subLength);
      Rbyte* p_raws = RAW(raws);
      for (int j=0; j < subLength; ++j)
      {
        p_raws[j] = result[i][j];
      }
      SET_VECTOR_ELT(vec, i, raws);
    }
    //UNPROTECT(sz+1);
    r_ans = vec;
  }
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_GetGeometryWKT ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::string,std::allocator< std::string > > result;
  GeoDa *arg1 = (GeoDa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_GetGeometryWKT" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  result = (arg1)->GetGeometryWKT();
  r_ans = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_GetNumericCol ( SEXP self, SEXP col_name, SEXP s_swig_copy)
{
  std::vector< double,std::allocator< double > > result;
  GeoDa *arg1 = (GeoDa *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_GetNumericCol" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(col_name, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "GeoDa_GetNumericCol" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (arg1)->GetNumericCol(arg2);
  r_ans = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_GetIntegerCol ( SEXP self, SEXP col_name, SEXP s_swig_copy)
{
  SwigValueWrapper< std::vector< long long,std::allocator< long long > > > result;
  GeoDa *arg1 = (GeoDa *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_GetIntegerCol" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(col_name, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "GeoDa_GetIntegerCol" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (arg1)->GetIntegerCol(arg2);
  r_ans = swig::from(static_cast< std::vector<long long int> >(result));
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_GetStringCol ( SEXP self, SEXP col_name, SEXP s_swig_copy)
{
  std::vector< std::string,std::allocator< std::string > > result;
  GeoDa *arg1 = (GeoDa *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_GetStringCol" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(col_name, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "GeoDa_GetStringCol" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (arg1)->GetStringCol(arg2);
  r_ans = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_GetUndefinesCol ( SEXP self, SEXP col_name, SEXP s_swig_copy)
{
  SwigValueWrapper< std::vector< bool,std::allocator< bool > > > result;
  GeoDa *arg1 = (GeoDa *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_GetUndefinesCol" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(col_name, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "GeoDa_GetUndefinesCol" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (arg1)->GetUndefinesCol(arg2);
  r_ans = swig::from(static_cast< std::vector<bool> >(result));
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_GetName ( SEXP self, SEXP s_swig_copy)
{
  std::string result;
  GeoDa *arg1 = (GeoDa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_GetName" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  result = (arg1)->GetName();
  r_ans = SWIG_From_std_string(static_cast< std::string >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_CreateContiguityWeights__SWIG_0 ( SEXP self, SEXP is_queen, SEXP polyid, SEXP order, SEXP include_lower_order, SEXP precision_threshold)
{
  GeoDaWeight *result = 0 ;
  GeoDa *arg1 = (GeoDa *) 0 ;
  bool arg2 ;
  std::string arg3 ;
  int arg4 ;
  bool arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_CreateContiguityWeights" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  arg2 = LOGICAL(is_queen)[0] ? true : false;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(polyid, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "GeoDa_CreateContiguityWeights" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  arg4 = static_cast< int >(INTEGER(order)[0]);
  arg5 = LOGICAL(include_lower_order)[0] ? true : false;
  arg6 = static_cast< double >(REAL(precision_threshold)[0]);
  result = (GeoDaWeight *)(arg1)->CreateContiguityWeights(arg2,arg3,arg4,arg5,arg6);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  
  
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_CreateContiguityWeights__SWIG_1 ( SEXP self, SEXP is_queen, SEXP polyid, SEXP order, SEXP include_lower_order)
{
  GeoDaWeight *result = 0 ;
  GeoDa *arg1 = (GeoDa *) 0 ;
  bool arg2 ;
  std::string arg3 ;
  int arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_CreateContiguityWeights" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  arg2 = LOGICAL(is_queen)[0] ? true : false;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(polyid, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "GeoDa_CreateContiguityWeights" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  arg4 = static_cast< int >(INTEGER(order)[0]);
  arg5 = LOGICAL(include_lower_order)[0] ? true : false;
  result = (GeoDaWeight *)(arg1)->CreateContiguityWeights(arg2,arg3,arg4,arg5);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_CreateContiguityWeights__SWIG_2 ( SEXP self, SEXP is_queen, SEXP polyid, SEXP order)
{
  GeoDaWeight *result = 0 ;
  GeoDa *arg1 = (GeoDa *) 0 ;
  bool arg2 ;
  std::string arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_CreateContiguityWeights" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  arg2 = LOGICAL(is_queen)[0] ? true : false;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(polyid, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "GeoDa_CreateContiguityWeights" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  arg4 = static_cast< int >(INTEGER(order)[0]);
  result = (GeoDaWeight *)(arg1)->CreateContiguityWeights(arg2,arg3,arg4);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_CreateContiguityWeights__SWIG_3 ( SEXP self, SEXP is_queen, SEXP polyid)
{
  GeoDaWeight *result = 0 ;
  GeoDa *arg1 = (GeoDa *) 0 ;
  bool arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_CreateContiguityWeights" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  arg2 = LOGICAL(is_queen)[0] ? true : false;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(polyid, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "GeoDa_CreateContiguityWeights" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (GeoDaWeight *)(arg1)->CreateContiguityWeights(arg2,arg3);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_CreateContiguityWeights__SWIG_4 ( SEXP self, SEXP is_queen)
{
  GeoDaWeight *result = 0 ;
  GeoDa *arg1 = (GeoDa *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_CreateContiguityWeights" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  arg2 = LOGICAL(is_queen)[0] ? true : false;
  result = (GeoDaWeight *)(arg1)->CreateContiguityWeights(arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_CreateContiguityWeights__SWIG_5 ( SEXP self)
{
  GeoDaWeight *result = 0 ;
  GeoDa *arg1 = (GeoDa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_CreateContiguityWeights" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  result = (GeoDaWeight *)(arg1)->CreateContiguityWeights();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_CreateDistanceWeights__SWIG_0 ( SEXP self, SEXP dist_thres, SEXP power, SEXP is_inverse)
{
  GeoDaWeight *result = 0 ;
  GeoDa *arg1 = (GeoDa *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_CreateDistanceWeights" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  arg2 = static_cast< double >(REAL(dist_thres)[0]);
  arg3 = static_cast< double >(REAL(power)[0]);
  arg4 = LOGICAL(is_inverse)[0] ? true : false;
  result = (GeoDaWeight *)(arg1)->CreateDistanceWeights(arg2,arg3,arg4);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_CreateDistanceWeights__SWIG_1 ( SEXP self, SEXP dist_thres, SEXP power)
{
  GeoDaWeight *result = 0 ;
  GeoDa *arg1 = (GeoDa *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_CreateDistanceWeights" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  arg2 = static_cast< double >(REAL(dist_thres)[0]);
  arg3 = static_cast< double >(REAL(power)[0]);
  result = (GeoDaWeight *)(arg1)->CreateDistanceWeights(arg2,arg3);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_CreateDistanceWeights__SWIG_2 ( SEXP self, SEXP dist_thres)
{
  GeoDaWeight *result = 0 ;
  GeoDa *arg1 = (GeoDa *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_CreateDistanceWeights" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  arg2 = static_cast< double >(REAL(dist_thres)[0]);
  result = (GeoDaWeight *)(arg1)->CreateDistanceWeights(arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_LISA__SWIG_0 ( SEXP self, SEXP w, SEXP data, SEXP undefs)
{
  UniLisa *result = 0 ;
  GeoDa *arg1 = (GeoDa *) 0 ;
  GeoDaWeight *arg2 = (GeoDaWeight *) 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  std::vector< bool,std::allocator< bool > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_LISA" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  res2 = SWIG_R_ConvertPtr(w, &argp2, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoDa_LISA" "', argument " "2"" of type '" "GeoDaWeight *""'"); 
  }
  arg2 = reinterpret_cast< GeoDaWeight * >(argp2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(data, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeoDa_LISA" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDa_LISA" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::vector<bool> *ptr = (std::vector<bool> *)0;
    res4 = swig::asptr(undefs, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GeoDa_LISA" "', argument " "4"" of type '" "std::vector< bool,std::allocator< bool > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDa_LISA" "', argument " "4"" of type '" "std::vector< bool,std::allocator< bool > > const &""'"); 
    }
    arg4 = ptr;
  }
  result = (UniLisa *)(arg1)->LISA(arg2,(std::vector< double,std::allocator< double > > const &)*arg3,(std::vector< bool,std::allocator< bool > > const &)*arg4);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_UniLisa, 0 |  0 );
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_LISA__SWIG_1 ( SEXP self, SEXP w, SEXP data)
{
  UniLisa *result = 0 ;
  GeoDa *arg1 = (GeoDa *) 0 ;
  GeoDaWeight *arg2 = (GeoDaWeight *) 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_LISA" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  res2 = SWIG_R_ConvertPtr(w, &argp2, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoDa_LISA" "', argument " "2"" of type '" "GeoDaWeight *""'"); 
  }
  arg2 = reinterpret_cast< GeoDaWeight * >(argp2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(data, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeoDa_LISA" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDa_LISA" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (UniLisa *)(arg1)->LISA(arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_UniLisa, 0 |  0 );
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_SKATER__SWIG_0 ( SEXP self, SEXP k, SEXP w, SEXP col_names, SEXP distance_method, SEXP control_varible, SEXP control_threshold, SEXP s_swig_copy)
{
  std::vector< int,std::allocator< int > > result;
  GeoDa *arg1 = (GeoDa *) 0 ;
  unsigned int arg2 ;
  GeoDaWeight *arg3 = (GeoDaWeight *) 0 ;
  std::vector< std::string,std::allocator< std::string > > arg4 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_SKATER" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  ecode2 = SWIG_AsVal_int(k, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GeoDa_SKATER" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_R_ConvertPtr(w, &argp3, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeoDa_SKATER" "', argument " "3"" of type '" "GeoDaWeight *""'"); 
  }
  arg3 = reinterpret_cast< GeoDaWeight * >(argp3);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    int res = swig::asptr(col_names, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "GeoDa_SKATER" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(distance_method, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GeoDa_SKATER" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDa_SKATER" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(control_varible, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "GeoDa_SKATER" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDa_SKATER" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  arg7 = static_cast< double >(REAL(control_threshold)[0]);
  result = (arg1)->SKATER(arg2,arg3,arg4,(std::string const &)*arg5,(std::string const &)*arg6,arg7);
  r_ans = swig::from(static_cast< std::vector< int,std::allocator< int > > >(result));
  
  
  
  
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_SKATER__SWIG_1 ( SEXP self, SEXP k, SEXP w, SEXP col_names, SEXP distance_method, SEXP control_varible, SEXP s_swig_copy)
{
  std::vector< int,std::allocator< int > > result;
  GeoDa *arg1 = (GeoDa *) 0 ;
  unsigned int arg2 ;
  GeoDaWeight *arg3 = (GeoDaWeight *) 0 ;
  std::vector< std::string,std::allocator< std::string > > arg4 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_SKATER" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  ecode2 = SWIG_AsVal_int(k, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GeoDa_SKATER" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_R_ConvertPtr(w, &argp3, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeoDa_SKATER" "', argument " "3"" of type '" "GeoDaWeight *""'"); 
  }
  arg3 = reinterpret_cast< GeoDaWeight * >(argp3);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    int res = swig::asptr(col_names, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "GeoDa_SKATER" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(distance_method, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GeoDa_SKATER" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDa_SKATER" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(control_varible, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "GeoDa_SKATER" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDa_SKATER" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  result = (arg1)->SKATER(arg2,arg3,arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  r_ans = swig::from(static_cast< std::vector< int,std::allocator< int > > >(result));
  
  
  
  
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_SKATER__SWIG_2 ( SEXP self, SEXP k, SEXP w, SEXP col_names, SEXP distance_method, SEXP s_swig_copy)
{
  std::vector< int,std::allocator< int > > result;
  GeoDa *arg1 = (GeoDa *) 0 ;
  unsigned int arg2 ;
  GeoDaWeight *arg3 = (GeoDaWeight *) 0 ;
  std::vector< std::string,std::allocator< std::string > > arg4 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_SKATER" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  ecode2 = SWIG_AsVal_int(k, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GeoDa_SKATER" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_R_ConvertPtr(w, &argp3, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeoDa_SKATER" "', argument " "3"" of type '" "GeoDaWeight *""'"); 
  }
  arg3 = reinterpret_cast< GeoDaWeight * >(argp3);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    int res = swig::asptr(col_names, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "GeoDa_SKATER" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(distance_method, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GeoDa_SKATER" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDa_SKATER" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  result = (arg1)->SKATER(arg2,arg3,arg4,(std::string const &)*arg5);
  r_ans = swig::from(static_cast< std::vector< int,std::allocator< int > > >(result));
  
  
  
  
  if (SWIG_IsNewObj(res5)) delete arg5;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_SKATER__SWIG_3 ( SEXP self, SEXP k, SEXP w, SEXP col_names, SEXP s_swig_copy)
{
  std::vector< int,std::allocator< int > > result;
  GeoDa *arg1 = (GeoDa *) 0 ;
  unsigned int arg2 ;
  GeoDaWeight *arg3 = (GeoDaWeight *) 0 ;
  std::vector< std::string,std::allocator< std::string > > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_SKATER" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  ecode2 = SWIG_AsVal_int(k, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GeoDa_SKATER" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_R_ConvertPtr(w, &argp3, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeoDa_SKATER" "', argument " "3"" of type '" "GeoDaWeight *""'"); 
  }
  arg3 = reinterpret_cast< GeoDaWeight * >(argp3);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    int res = swig::asptr(col_names, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "GeoDa_SKATER" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (arg1)->SKATER(arg2,arg3,arg4);
  r_ans = swig::from(static_cast< std::vector< int,std::allocator< int > > >(result));
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_SKATER__SWIG_4 ( SEXP self, SEXP k, SEXP w, SEXP data, SEXP distance_method, SEXP control_varible, SEXP control_threshold, SEXP s_swig_copy)
{
  std::vector< int,std::allocator< int > > result;
  GeoDa *arg1 = (GeoDa *) 0 ;
  unsigned int arg2 ;
  GeoDaWeight *arg3 = (GeoDaWeight *) 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_SKATER" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  ecode2 = SWIG_AsVal_int(k, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GeoDa_SKATER" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_R_ConvertPtr(w, &argp3, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeoDa_SKATER" "', argument " "3"" of type '" "GeoDaWeight *""'"); 
  }
  arg3 = reinterpret_cast< GeoDaWeight * >(argp3);
  res4 = SWIG_R_ConvertPtr(data, &argp4, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GeoDa_SKATER" "', argument " "4"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDa_SKATER" "', argument " "4"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > * >(argp4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(distance_method, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GeoDa_SKATER" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDa_SKATER" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(control_varible, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "GeoDa_SKATER" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDa_SKATER" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  arg7 = static_cast< double >(REAL(control_threshold)[0]);
  result = (arg1)->SKATER(arg2,arg3,*arg4,(std::string const &)*arg5,(std::string const &)*arg6,arg7);
  r_ans = swig::from(static_cast< std::vector< int,std::allocator< int > > >(result));
  
  
  
  
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_SKATER__SWIG_5 ( SEXP self, SEXP k, SEXP w, SEXP data, SEXP distance_method, SEXP control_varible, SEXP s_swig_copy)
{
  std::vector< int,std::allocator< int > > result;
  GeoDa *arg1 = (GeoDa *) 0 ;
  unsigned int arg2 ;
  GeoDaWeight *arg3 = (GeoDaWeight *) 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_SKATER" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  ecode2 = SWIG_AsVal_int(k, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GeoDa_SKATER" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_R_ConvertPtr(w, &argp3, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeoDa_SKATER" "', argument " "3"" of type '" "GeoDaWeight *""'"); 
  }
  arg3 = reinterpret_cast< GeoDaWeight * >(argp3);
  res4 = SWIG_R_ConvertPtr(data, &argp4, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GeoDa_SKATER" "', argument " "4"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDa_SKATER" "', argument " "4"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > * >(argp4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(distance_method, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GeoDa_SKATER" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDa_SKATER" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(control_varible, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "GeoDa_SKATER" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDa_SKATER" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  result = (arg1)->SKATER(arg2,arg3,*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  r_ans = swig::from(static_cast< std::vector< int,std::allocator< int > > >(result));
  
  
  
  
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_SKATER__SWIG_6 ( SEXP self, SEXP k, SEXP w, SEXP data, SEXP distance_method, SEXP s_swig_copy)
{
  std::vector< int,std::allocator< int > > result;
  GeoDa *arg1 = (GeoDa *) 0 ;
  unsigned int arg2 ;
  GeoDaWeight *arg3 = (GeoDaWeight *) 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg4 = 0 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_SKATER" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  ecode2 = SWIG_AsVal_int(k, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GeoDa_SKATER" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_R_ConvertPtr(w, &argp3, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeoDa_SKATER" "', argument " "3"" of type '" "GeoDaWeight *""'"); 
  }
  arg3 = reinterpret_cast< GeoDaWeight * >(argp3);
  res4 = SWIG_R_ConvertPtr(data, &argp4, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GeoDa_SKATER" "', argument " "4"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDa_SKATER" "', argument " "4"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > * >(argp4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(distance_method, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GeoDa_SKATER" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDa_SKATER" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  result = (arg1)->SKATER(arg2,arg3,*arg4,(std::string const &)*arg5);
  r_ans = swig::from(static_cast< std::vector< int,std::allocator< int > > >(result));
  
  
  
  
  if (SWIG_IsNewObj(res5)) delete arg5;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GeoDa_SKATER__SWIG_7 ( SEXP self, SEXP k, SEXP w, SEXP data, SEXP s_swig_copy)
{
  std::vector< int,std::allocator< int > > result;
  GeoDa *arg1 = (GeoDa *) 0 ;
  unsigned int arg2 ;
  GeoDaWeight *arg3 = (GeoDaWeight *) 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_GeoDa, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoDa_SKATER" "', argument " "1"" of type '" "GeoDa *""'"); 
  }
  arg1 = reinterpret_cast< GeoDa * >(argp1);
  ecode2 = SWIG_AsVal_int(k, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GeoDa_SKATER" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_R_ConvertPtr(w, &argp3, SWIGTYPE_p_GeoDaWeight, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeoDa_SKATER" "', argument " "3"" of type '" "GeoDaWeight *""'"); 
  }
  arg3 = reinterpret_cast< GeoDaWeight * >(argp3);
  res4 = SWIG_R_ConvertPtr(data, &argp4, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GeoDa_SKATER" "', argument " "4"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoDa_SKATER" "', argument " "4"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > * >(argp4);
  result = (arg1)->SKATER(arg2,arg3,*arg4);
  r_ans = swig::from(static_cast< std::vector< int,std::allocator< int > > >(result));
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_test ( SEXP s_swig_copy)
{
  int result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (int)test();
  r_ans = Rf_ScalarInteger(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_ToGeoDaColumn__SWIG_0 ( SEXP col)
{
  GeoDaColumn *result = 0 ;
  GeoDaStringColumn *arg1 = (GeoDaStringColumn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(col, &argp1, SWIGTYPE_p_GeoDaStringColumn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ToGeoDaColumn" "', argument " "1"" of type '" "GeoDaStringColumn *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaStringColumn * >(argp1);
  result = (GeoDaColumn *)ToGeoDaColumn(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GeoDaColumn, 0 |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_ToGeoDaColumn__SWIG_1 ( SEXP col)
{
  GeoDaColumn *result = 0 ;
  GeoDaIntColumn *arg1 = (GeoDaIntColumn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(col, &argp1, SWIGTYPE_p_GeoDaIntColumn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ToGeoDaColumn" "', argument " "1"" of type '" "GeoDaIntColumn *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaIntColumn * >(argp1);
  result = (GeoDaColumn *)ToGeoDaColumn(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GeoDaColumn, 0 |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_ToGeoDaColumn__SWIG_2 ( SEXP col)
{
  GeoDaColumn *result = 0 ;
  GeoDaRealColumn *arg1 = (GeoDaRealColumn *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(col, &argp1, SWIGTYPE_p_GeoDaRealColumn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ToGeoDaColumn" "', argument " "1"" of type '" "GeoDaRealColumn *""'"); 
  }
  arg1 = reinterpret_cast< GeoDaRealColumn * >(argp1);
  result = (GeoDaColumn *)ToGeoDaColumn(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GeoDaColumn, 0 |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecGeoDaColumn___nonzero__ ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< GeoDaColumn * > *arg1 = (std::vector< GeoDaColumn * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecGeoDaColumn___nonzero__" "', argument " "1"" of type '" "std::vector< GeoDaColumn * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GeoDaColumn * > * >(argp1);
  result = (bool)std_vector_Sl_GeoDaColumn_Sm__Sg____nonzero__((std::vector< GeoDaColumn * > const *)arg1);
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecGeoDaColumn___len__ ( SEXP self, SEXP s_swig_copy)
{
  std::vector< GeoDaColumn * >::size_type result;
  std::vector< GeoDaColumn * > *arg1 = (std::vector< GeoDaColumn * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecGeoDaColumn___len__" "', argument " "1"" of type '" "std::vector< GeoDaColumn * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GeoDaColumn * > * >(argp1);
  result = std_vector_Sl_GeoDaColumn_Sm__Sg____len__((std::vector< GeoDaColumn * > const *)arg1);
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecGeoDaColumn_pop ( SEXP self, SEXP s_swig_copy)
{
  std::vector< GeoDaColumn * >::value_type result;
  std::vector< GeoDaColumn * > *arg1 = (std::vector< GeoDaColumn * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecGeoDaColumn_pop" "', argument " "1"" of type '" "std::vector< GeoDaColumn * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GeoDaColumn * > * >(argp1);
  try {
    result = (std::vector< GeoDaColumn * >::value_type)std_vector_Sl_GeoDaColumn_Sm__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GeoDaColumn, 0 |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecGeoDaColumn___getslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< GeoDaColumn *,std::allocator< GeoDaColumn * > > *result = 0 ;
  std::vector< GeoDaColumn * > *arg1 = (std::vector< GeoDaColumn * > *) 0 ;
  std::vector< GeoDaColumn * >::difference_type arg2 ;
  std::vector< GeoDaColumn * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecGeoDaColumn___getslice__" "', argument " "1"" of type '" "std::vector< GeoDaColumn * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GeoDaColumn * > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecGeoDaColumn___getslice__" "', argument " "2"" of type '" "std::vector< GeoDaColumn * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< GeoDaColumn * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecGeoDaColumn___getslice__" "', argument " "3"" of type '" "std::vector< GeoDaColumn * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< GeoDaColumn * >::difference_type >(val3);
  try {
    result = (std::vector< GeoDaColumn *,std::allocator< GeoDaColumn * > > *)std_vector_Sl_GeoDaColumn_Sm__Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, SWIG_POINTER_OWN |  0 );
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecGeoDaColumn___setslice__ ( SEXP self, SEXP i, SEXP j, SEXP v)
{
  std::vector< GeoDaColumn * > *arg1 = (std::vector< GeoDaColumn * > *) 0 ;
  std::vector< GeoDaColumn * >::difference_type arg2 ;
  std::vector< GeoDaColumn * >::difference_type arg3 ;
  std::vector< GeoDaColumn *,std::allocator< GeoDaColumn * > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecGeoDaColumn___setslice__" "', argument " "1"" of type '" "std::vector< GeoDaColumn * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GeoDaColumn * > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecGeoDaColumn___setslice__" "', argument " "2"" of type '" "std::vector< GeoDaColumn * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< GeoDaColumn * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecGeoDaColumn___setslice__" "', argument " "3"" of type '" "std::vector< GeoDaColumn * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< GeoDaColumn * >::difference_type >(val3);
  {
    std::vector< GeoDaColumn*,std::allocator< GeoDaColumn * > > *ptr = (std::vector< GeoDaColumn*,std::allocator< GeoDaColumn * > > *)0;
    res4 = swig::asptr(v, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VecGeoDaColumn___setslice__" "', argument " "4"" of type '" "std::vector< GeoDaColumn *,std::allocator< GeoDaColumn * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecGeoDaColumn___setslice__" "', argument " "4"" of type '" "std::vector< GeoDaColumn *,std::allocator< GeoDaColumn * > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_GeoDaColumn_Sm__Sg____setslice__(arg1,arg2,arg3,(std::vector< GeoDaColumn *,std::allocator< GeoDaColumn * > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  } catch(std::invalid_argument &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecGeoDaColumn___delslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< GeoDaColumn * > *arg1 = (std::vector< GeoDaColumn * > *) 0 ;
  std::vector< GeoDaColumn * >::difference_type arg2 ;
  std::vector< GeoDaColumn * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecGeoDaColumn___delslice__" "', argument " "1"" of type '" "std::vector< GeoDaColumn * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GeoDaColumn * > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecGeoDaColumn___delslice__" "', argument " "2"" of type '" "std::vector< GeoDaColumn * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< GeoDaColumn * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VecGeoDaColumn___delslice__" "', argument " "3"" of type '" "std::vector< GeoDaColumn * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< GeoDaColumn * >::difference_type >(val3);
  try {
    std_vector_Sl_GeoDaColumn_Sm__Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecGeoDaColumn___delitem__ ( SEXP self, SEXP i)
{
  std::vector< GeoDaColumn * > *arg1 = (std::vector< GeoDaColumn * > *) 0 ;
  std::vector< GeoDaColumn * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecGeoDaColumn___delitem__" "', argument " "1"" of type '" "std::vector< GeoDaColumn * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GeoDaColumn * > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecGeoDaColumn___delitem__" "', argument " "2"" of type '" "std::vector< GeoDaColumn * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< GeoDaColumn * >::difference_type >(val2);
  try {
    std_vector_Sl_GeoDaColumn_Sm__Sg____delitem__(arg1,arg2);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecGeoDaColumn___getitem__ ( SEXP self, SEXP i, SEXP s_swig_copy)
{
  std::vector< GeoDaColumn * >::value_type result;
  std::vector< GeoDaColumn * > *arg1 = (std::vector< GeoDaColumn * > *) 0 ;
  std::vector< GeoDaColumn * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecGeoDaColumn___getitem__" "', argument " "1"" of type '" "std::vector< GeoDaColumn * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GeoDaColumn * > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecGeoDaColumn___getitem__" "', argument " "2"" of type '" "std::vector< GeoDaColumn * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< GeoDaColumn * >::difference_type >(val2);
  try {
    result = (std::vector< GeoDaColumn * >::value_type)std_vector_Sl_GeoDaColumn_Sm__Sg____getitem__(arg1,arg2);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GeoDaColumn, 0 |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecGeoDaColumn___setitem__ ( SEXP self, SEXP i, SEXP x)
{
  std::vector< GeoDaColumn * > *arg1 = (std::vector< GeoDaColumn * > *) 0 ;
  std::vector< GeoDaColumn * >::difference_type arg2 ;
  std::vector< GeoDaColumn * >::value_type arg3 = (std::vector< GeoDaColumn * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecGeoDaColumn___setitem__" "', argument " "1"" of type '" "std::vector< GeoDaColumn * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GeoDaColumn * > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecGeoDaColumn___setitem__" "', argument " "2"" of type '" "std::vector< GeoDaColumn * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< GeoDaColumn * >::difference_type >(val2);
  res3 = SWIG_R_ConvertPtr(x, &argp3, SWIGTYPE_p_GeoDaColumn, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecGeoDaColumn___setitem__" "', argument " "3"" of type '" "std::vector< GeoDaColumn * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< GeoDaColumn * >::value_type >(argp3);
  try {
    std_vector_Sl_GeoDaColumn_Sm__Sg____setitem__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    /*@SWIG:/usr/local/Cellar/swig/4.0.0/share/swig/4.0.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecGeoDaColumn_append ( SEXP self, SEXP x)
{
  std::vector< GeoDaColumn * > *arg1 = (std::vector< GeoDaColumn * > *) 0 ;
  std::vector< GeoDaColumn * >::value_type arg2 = (std::vector< GeoDaColumn * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecGeoDaColumn_append" "', argument " "1"" of type '" "std::vector< GeoDaColumn * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GeoDaColumn * > * >(argp1);
  res2 = SWIG_R_ConvertPtr(x, &argp2, SWIGTYPE_p_GeoDaColumn, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecGeoDaColumn_append" "', argument " "2"" of type '" "std::vector< GeoDaColumn * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::vector< GeoDaColumn * >::value_type >(argp2);
  std_vector_Sl_GeoDaColumn_Sm__Sg__append(arg1,arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecGeoDaColumn__SWIG_0 ( )
{
  std::vector< GeoDaColumn * > *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (std::vector< GeoDaColumn * > *)new std::vector< GeoDaColumn * >();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, SWIG_POINTER_OWN |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecGeoDaColumn__SWIG_1 ( SEXP other)
{
  std::vector< GeoDaColumn * > *result = 0 ;
  std::vector< GeoDaColumn * > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    std::vector< GeoDaColumn*,std::allocator< GeoDaColumn * > > *ptr = (std::vector< GeoDaColumn*,std::allocator< GeoDaColumn * > > *)0;
    res1 = swig::asptr(other, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VecGeoDaColumn" "', argument " "1"" of type '" "std::vector< GeoDaColumn * > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VecGeoDaColumn" "', argument " "1"" of type '" "std::vector< GeoDaColumn * > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< GeoDaColumn * > *)new std::vector< GeoDaColumn * >((std::vector< GeoDaColumn * > const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecGeoDaColumn_empty ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< GeoDaColumn * > *arg1 = (std::vector< GeoDaColumn * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecGeoDaColumn_empty" "', argument " "1"" of type '" "std::vector< GeoDaColumn * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GeoDaColumn * > * >(argp1);
  result = (bool)((std::vector< GeoDaColumn * > const *)arg1)->empty();
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecGeoDaColumn_size ( SEXP self, SEXP s_swig_copy)
{
  std::vector< GeoDaColumn * >::size_type result;
  std::vector< GeoDaColumn * > *arg1 = (std::vector< GeoDaColumn * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecGeoDaColumn_size" "', argument " "1"" of type '" "std::vector< GeoDaColumn * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GeoDaColumn * > * >(argp1);
  result = ((std::vector< GeoDaColumn * > const *)arg1)->size();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecGeoDaColumn_swap ( SEXP self, SEXP v)
{
  std::vector< GeoDaColumn * > *arg1 = (std::vector< GeoDaColumn * > *) 0 ;
  std::vector< GeoDaColumn * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecGeoDaColumn_swap" "', argument " "1"" of type '" "std::vector< GeoDaColumn * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GeoDaColumn * > * >(argp1);
  res2 = SWIG_R_ConvertPtr(v, &argp2, SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecGeoDaColumn_swap" "', argument " "2"" of type '" "std::vector< GeoDaColumn * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VecGeoDaColumn_swap" "', argument " "2"" of type '" "std::vector< GeoDaColumn * > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< GeoDaColumn * > * >(argp2);
  (arg1)->swap(*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecGeoDaColumn_clear ( SEXP self)
{
  std::vector< GeoDaColumn * > *arg1 = (std::vector< GeoDaColumn * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecGeoDaColumn_clear" "', argument " "1"" of type '" "std::vector< GeoDaColumn * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GeoDaColumn * > * >(argp1);
  (arg1)->clear();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecGeoDaColumn_get_allocator ( SEXP self, SEXP s_swig_copy)
{
  SwigValueWrapper< std::allocator< GeoDaColumn * > > result;
  std::vector< GeoDaColumn * > *arg1 = (std::vector< GeoDaColumn * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecGeoDaColumn_get_allocator" "', argument " "1"" of type '" "std::vector< GeoDaColumn * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GeoDaColumn * > * >(argp1);
  result = ((std::vector< GeoDaColumn * > const *)arg1)->get_allocator();
  r_ans = SWIG_R_NewPointerObj((new std::vector< GeoDaColumn * >::allocator_type(static_cast< const std::vector< GeoDaColumn * >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_GeoDaColumn_p_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecGeoDaColumn__SWIG_2 ( SEXP size)
{
  std::vector< GeoDaColumn * > *result = 0 ;
  std::vector< GeoDaColumn * >::size_type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecGeoDaColumn" "', argument " "1"" of type '" "std::vector< GeoDaColumn * >::size_type""'");
  } 
  arg1 = static_cast< std::vector< GeoDaColumn * >::size_type >(val1);
  result = (std::vector< GeoDaColumn * > *)new std::vector< GeoDaColumn * >(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecGeoDaColumn_pop_back ( SEXP self)
{
  std::vector< GeoDaColumn * > *arg1 = (std::vector< GeoDaColumn * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecGeoDaColumn_pop_back" "', argument " "1"" of type '" "std::vector< GeoDaColumn * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GeoDaColumn * > * >(argp1);
  (arg1)->pop_back();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecGeoDaColumn_resize__SWIG_0 ( SEXP self, SEXP new_size)
{
  std::vector< GeoDaColumn * > *arg1 = (std::vector< GeoDaColumn * > *) 0 ;
  std::vector< GeoDaColumn * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecGeoDaColumn_resize" "', argument " "1"" of type '" "std::vector< GeoDaColumn * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GeoDaColumn * > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecGeoDaColumn_resize" "', argument " "2"" of type '" "std::vector< GeoDaColumn * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< GeoDaColumn * >::size_type >(val2);
  (arg1)->resize(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_VecGeoDaColumn__SWIG_3 ( SEXP size, SEXP value)
{
  std::vector< GeoDaColumn * > *result = 0 ;
  std::vector< GeoDaColumn * >::size_type arg1 ;
  std::vector< GeoDaColumn * >::value_type arg2 = (std::vector< GeoDaColumn * >::value_type) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VecGeoDaColumn" "', argument " "1"" of type '" "std::vector< GeoDaColumn * >::size_type""'");
  } 
  arg1 = static_cast< std::vector< GeoDaColumn * >::size_type >(val1);
  res2 = SWIG_R_ConvertPtr(value, &argp2, SWIGTYPE_p_GeoDaColumn, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VecGeoDaColumn" "', argument " "2"" of type '" "std::vector< GeoDaColumn * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::vector< GeoDaColumn * >::value_type >(argp2);
  result = (std::vector< GeoDaColumn * > *)new std::vector< GeoDaColumn * >(arg1,arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, SWIG_POINTER_OWN |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecGeoDaColumn_push_back ( SEXP self, SEXP x)
{
  std::vector< GeoDaColumn * > *arg1 = (std::vector< GeoDaColumn * > *) 0 ;
  std::vector< GeoDaColumn * >::value_type arg2 = (std::vector< GeoDaColumn * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecGeoDaColumn_push_back" "', argument " "1"" of type '" "std::vector< GeoDaColumn * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GeoDaColumn * > * >(argp1);
  res2 = SWIG_R_ConvertPtr(x, &argp2, SWIGTYPE_p_GeoDaColumn, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VecGeoDaColumn_push_back" "', argument " "2"" of type '" "std::vector< GeoDaColumn * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::vector< GeoDaColumn * >::value_type >(argp2);
  (arg1)->push_back(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecGeoDaColumn_front ( SEXP self, SEXP s_swig_copy)
{
  std::vector< GeoDaColumn * >::value_type result;
  std::vector< GeoDaColumn * > *arg1 = (std::vector< GeoDaColumn * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecGeoDaColumn_front" "', argument " "1"" of type '" "std::vector< GeoDaColumn * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GeoDaColumn * > * >(argp1);
  result = (std::vector< GeoDaColumn * >::value_type)((std::vector< GeoDaColumn * > const *)arg1)->front();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GeoDaColumn, 0 |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecGeoDaColumn_back ( SEXP self, SEXP s_swig_copy)
{
  std::vector< GeoDaColumn * >::value_type result;
  std::vector< GeoDaColumn * > *arg1 = (std::vector< GeoDaColumn * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecGeoDaColumn_back" "', argument " "1"" of type '" "std::vector< GeoDaColumn * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GeoDaColumn * > * >(argp1);
  result = (std::vector< GeoDaColumn * >::value_type)((std::vector< GeoDaColumn * > const *)arg1)->back();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GeoDaColumn, 0 |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecGeoDaColumn_assign ( SEXP self, SEXP n, SEXP x)
{
  std::vector< GeoDaColumn * > *arg1 = (std::vector< GeoDaColumn * > *) 0 ;
  std::vector< GeoDaColumn * >::size_type arg2 ;
  std::vector< GeoDaColumn * >::value_type arg3 = (std::vector< GeoDaColumn * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecGeoDaColumn_assign" "', argument " "1"" of type '" "std::vector< GeoDaColumn * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GeoDaColumn * > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecGeoDaColumn_assign" "', argument " "2"" of type '" "std::vector< GeoDaColumn * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< GeoDaColumn * >::size_type >(val2);
  res3 = SWIG_R_ConvertPtr(x, &argp3, SWIGTYPE_p_GeoDaColumn, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecGeoDaColumn_assign" "', argument " "3"" of type '" "std::vector< GeoDaColumn * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< GeoDaColumn * >::value_type >(argp3);
  (arg1)->assign(arg2,arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecGeoDaColumn_resize__SWIG_1 ( SEXP self, SEXP new_size, SEXP x)
{
  std::vector< GeoDaColumn * > *arg1 = (std::vector< GeoDaColumn * > *) 0 ;
  std::vector< GeoDaColumn * >::size_type arg2 ;
  std::vector< GeoDaColumn * >::value_type arg3 = (std::vector< GeoDaColumn * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecGeoDaColumn_resize" "', argument " "1"" of type '" "std::vector< GeoDaColumn * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GeoDaColumn * > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecGeoDaColumn_resize" "', argument " "2"" of type '" "std::vector< GeoDaColumn * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< GeoDaColumn * >::size_type >(val2);
  res3 = SWIG_R_ConvertPtr(x, &argp3, SWIGTYPE_p_GeoDaColumn, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VecGeoDaColumn_resize" "', argument " "3"" of type '" "std::vector< GeoDaColumn * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< GeoDaColumn * >::value_type >(argp3);
  (arg1)->resize(arg2,arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecGeoDaColumn_reserve ( SEXP self, SEXP n)
{
  std::vector< GeoDaColumn * > *arg1 = (std::vector< GeoDaColumn * > *) 0 ;
  std::vector< GeoDaColumn * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecGeoDaColumn_reserve" "', argument " "1"" of type '" "std::vector< GeoDaColumn * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GeoDaColumn * > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VecGeoDaColumn_reserve" "', argument " "2"" of type '" "std::vector< GeoDaColumn * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< GeoDaColumn * >::size_type >(val2);
  (arg1)->reserve(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_VecGeoDaColumn_capacity ( SEXP self, SEXP s_swig_copy)
{
  std::vector< GeoDaColumn * >::size_type result;
  std::vector< GeoDaColumn * > *arg1 = (std::vector< GeoDaColumn * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VecGeoDaColumn_capacity" "', argument " "1"" of type '" "std::vector< GeoDaColumn * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GeoDaColumn * > * >(argp1);
  result = ((std::vector< GeoDaColumn * > const *)arg1)->capacity();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_VecGeoDaColumn ( SEXP self)
{
  std::vector< GeoDaColumn * > *arg1 = (std::vector< GeoDaColumn * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VecGeoDaColumn" "', argument " "1"" of type '" "std::vector< GeoDaColumn * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GeoDaColumn * > * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_func ( SEXP s_swig_copy)
{
  std::vector< std::vector< unsigned char,std::allocator< unsigned char > >,std::allocator< std::vector< unsigned char,std::allocator< unsigned char > > > > result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = func();
  {
    int sz = (&result)->size();
    SEXP vec = Rf_allocVector(VECSXP, sz);
    for(int i = 0; i <sz; ++i)
    {
      int subLength = result[i].size();
      SEXP raws = Rf_allocVector(RAWSXP, subLength);
      Rbyte* p_raws = RAW(raws);
      for (int j=0; j < subLength; ++j)
      {
        p_raws[j] = result[i][j];
      }
      SET_VECTOR_ELT(vec, i, raws);
    }
    //UNPROTECT(sz+1);
    r_ans = vec;
  }
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_GeoDaIntColumnTo_p_GeoDaColumn(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GeoDaColumn *)  ((GeoDaIntColumn *) x));
}
static void *_p_GeoDaRealColumnTo_p_GeoDaColumn(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GeoDaColumn *)  ((GeoDaRealColumn *) x));
}
static void *_p_GeoDaStringColumnTo_p_GeoDaColumn(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GeoDaColumn *)  ((GeoDaStringColumn *) x));
}
static void *_p_UniLisaTo_p_AbstractLocalSA(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractLocalSA *)  ((UniLisa *) x));
}
static swig_type_info _swigt__p_AbstractLocalSA = {"_p_AbstractLocalSA", "AbstractLocalSA *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GeoDa = {"_p_GeoDa", "GeoDa *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GeoDaColumn = {"_p_GeoDaColumn", "std::vector< GeoDaColumn * >::value_type|GeoDaColumn *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GeoDaIntColumn = {"_p_GeoDaIntColumn", "GeoDaIntColumn *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GeoDaRealColumn = {"_p_GeoDaRealColumn", "GeoDaRealColumn *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GeoDaStringColumn = {"_p_GeoDaStringColumn", "GeoDaStringColumn *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GeoDaTable = {"_p_GeoDaTable", "GeoDaTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GeoDaWeight = {"_p_GeoDaWeight", "GeoDaWeight *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_UniLisa = {"_p_UniLisa", "UniLisa *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_GeoDaColumn_p_t = {"_p_std__allocatorT_GeoDaColumn_p_t", "std::vector< GeoDaColumn * >::allocator_type *|std::allocator< GeoDaColumn * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_char_t = {"_p_std__allocatorT_char_t", "std::vector< char >::allocator_type *|std::allocator< char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_double_t = {"_p_std__allocatorT_double_t", "std::vector< double >::allocator_type *|std::allocator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_float_t = {"_p_std__allocatorT_float_t", "std::vector< float >::allocator_type *|std::allocator< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_int_t = {"_p_std__allocatorT_int_t", "std::vector< int >::allocator_type *|std::allocator< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__string_t = {"_p_std__allocatorT_std__string_t", "std::vector< std::string >::allocator_type *|std::allocator< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t = {"_p_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t", "std::vector< std::vector< char > >::allocator_type *|std::allocator< std::vector< char,std::allocator< char > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t = {"_p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t", "std::vector< std::vector< double > >::allocator_type *|std::allocator< std::vector< double,std::allocator< double > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t = {"_p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t", "std::vector< std::vector< int > >::allocator_type *|std::allocator< std::vector< int,std::allocator< int > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t = {"_p_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t", "std::allocator< std::vector< unsigned char,std::allocator< unsigned char > > > *|std::vector< std::vector< unsigned char > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_unsigned_char_t = {"_p_std__allocatorT_unsigned_char_t", "std::vector< unsigned char >::allocator_type *|std::allocator< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_void_p_t = {"_p_std__allocatorT_void_p_t", "std::vector< void * >::allocator_type *|std::allocator< void * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t = {"_p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t", "std::vector< GeoDaColumn *,std::allocator< GeoDaColumn * > > *|std::vector< GeoDaColumn * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_char_std__allocatorT_char_t_t = {"_p_std__vectorT_char_std__allocatorT_char_t_t", "std::vector< char > *|std::vector< char,std::allocator< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_float_std__allocatorT_float_t_t = {"_p_std__vectorT_float_std__allocatorT_float_t_t", "std::vector< float > *|std::vector< float,std::allocator< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< int,std::allocator< int > > *|std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_long_long_std__allocatorT_long_long_t_t = {"_p_std__vectorT_long_long_std__allocatorT_long_long_t_t", "std::vector< long long,std::allocator< long long > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_long_std__allocatorT_long_t_t = {"_p_std__vectorT_long_std__allocatorT_long_t_t", "std::vector< long,std::allocator< long > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *|std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t = {"_p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t", "std::vector< std::vector< char > > *|std::vector< std::vector< char,std::allocator< char > >,std::allocator< std::vector< char,std::allocator< char > > > > *|std::vector< std::vector< char,std::allocator< char > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t = {"_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t", "std::vector< std::vector< double > > *|std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *|std::vector< std::vector< double,std::allocator< double > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t = {"_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t", "std::vector< std::vector< int > > *|std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *|std::vector< std::vector< int,std::allocator< int > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t = {"_p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t", "std::vector< std::vector< unsigned char > > *|std::vector< std::vector< unsigned char,std::allocator< unsigned char > >,std::allocator< std::vector< unsigned char,std::allocator< unsigned char > > > > *|std::vector< std::vector< unsigned char,std::allocator< unsigned char > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t = {"_p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t", "std::vector< unsigned char > *|std::vector< unsigned char,std::allocator< unsigned char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_void_p_std__allocatorT_void_p_t_t = {"_p_std__vectorT_void_p_std__allocatorT_void_p_t_t", "std::vector< void *,std::allocator< void * > > *|std::vector< void * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_wxInt64_std__allocatorT_wxInt64_t_t = {"_p_std__vectorT_wxInt64_std__allocatorT_wxInt64_t_t", "std::vector< wxInt64,std::allocator< wxInt64 > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_wxString_std__allocatorT_wxString_t_t = {"_p_std__vectorT_wxString_std__allocatorT_wxString_t_t", "std::vector< wxString,std::allocator< wxString > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint64_t = {"_p_uint64_t", "uint64_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "std::vector< void * >::value_type|void *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxString = {"_p_wxString", "wxString *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AbstractLocalSA,
  &_swigt__p_GeoDa,
  &_swigt__p_GeoDaColumn,
  &_swigt__p_GeoDaIntColumn,
  &_swigt__p_GeoDaRealColumn,
  &_swigt__p_GeoDaStringColumn,
  &_swigt__p_GeoDaTable,
  &_swigt__p_GeoDaWeight,
  &_swigt__p_UniLisa,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_GeoDaColumn_p_t,
  &_swigt__p_std__allocatorT_char_t,
  &_swigt__p_std__allocatorT_double_t,
  &_swigt__p_std__allocatorT_float_t,
  &_swigt__p_std__allocatorT_int_t,
  &_swigt__p_std__allocatorT_std__string_t,
  &_swigt__p_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t,
  &_swigt__p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t,
  &_swigt__p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t,
  &_swigt__p_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t,
  &_swigt__p_std__allocatorT_unsigned_char_t,
  &_swigt__p_std__allocatorT_void_p_t,
  &_swigt__p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t,
  &_swigt__p_std__vectorT_char_std__allocatorT_char_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_float_std__allocatorT_float_t_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__vectorT_long_long_std__allocatorT_long_long_t_t,
  &_swigt__p_std__vectorT_long_std__allocatorT_long_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t,
  &_swigt__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,
  &_swigt__p_std__vectorT_void_p_std__allocatorT_void_p_t_t,
  &_swigt__p_std__vectorT_wxInt64_std__allocatorT_wxInt64_t_t,
  &_swigt__p_std__vectorT_wxString_std__allocatorT_wxString_t_t,
  &_swigt__p_uint64_t,
  &_swigt__p_value_type,
  &_swigt__p_void,
  &_swigt__p_wxString,
};

static swig_cast_info _swigc__p_AbstractLocalSA[] = {  {&_swigt__p_AbstractLocalSA, 0, 0, 0},  {&_swigt__p_UniLisa, _p_UniLisaTo_p_AbstractLocalSA, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeoDa[] = {  {&_swigt__p_GeoDa, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeoDaColumn[] = {  {&_swigt__p_GeoDaIntColumn, _p_GeoDaIntColumnTo_p_GeoDaColumn, 0, 0},  {&_swigt__p_GeoDaRealColumn, _p_GeoDaRealColumnTo_p_GeoDaColumn, 0, 0},  {&_swigt__p_GeoDaColumn, 0, 0, 0},  {&_swigt__p_GeoDaStringColumn, _p_GeoDaStringColumnTo_p_GeoDaColumn, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeoDaIntColumn[] = {  {&_swigt__p_GeoDaIntColumn, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeoDaRealColumn[] = {  {&_swigt__p_GeoDaRealColumn, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeoDaStringColumn[] = {  {&_swigt__p_GeoDaStringColumn, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeoDaTable[] = {  {&_swigt__p_GeoDaTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeoDaWeight[] = {  {&_swigt__p_GeoDaWeight, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UniLisa[] = {  {&_swigt__p_UniLisa, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_GeoDaColumn_p_t[] = {  {&_swigt__p_std__allocatorT_GeoDaColumn_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_char_t[] = {  {&_swigt__p_std__allocatorT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_double_t[] = {  {&_swigt__p_std__allocatorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_float_t[] = {  {&_swigt__p_std__allocatorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_int_t[] = {  {&_swigt__p_std__allocatorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__string_t[] = {  {&_swigt__p_std__allocatorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_unsigned_char_t[] = {  {&_swigt__p_std__allocatorT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_void_p_t[] = {  {&_swigt__p_std__allocatorT_void_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t[] = {  {&_swigt__p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_char_std__allocatorT_char_t_t[] = {  {&_swigt__p_std__vectorT_char_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_std__allocatorT_float_t_t[] = {  {&_swigt__p_std__vectorT_float_std__allocatorT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_long_long_std__allocatorT_long_long_t_t[] = {  {&_swigt__p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_long_std__allocatorT_long_t_t[] = {  {&_swigt__p_std__vectorT_long_std__allocatorT_long_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_void_p_std__allocatorT_void_p_t_t[] = {  {&_swigt__p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_wxInt64_std__allocatorT_wxInt64_t_t[] = {  {&_swigt__p_std__vectorT_wxInt64_std__allocatorT_wxInt64_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_wxString_std__allocatorT_wxString_t_t[] = {  {&_swigt__p_std__vectorT_wxString_std__allocatorT_wxString_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint64_t[] = {  {&_swigt__p_uint64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxString[] = {  {&_swigt__p_wxString, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AbstractLocalSA,
  _swigc__p_GeoDa,
  _swigc__p_GeoDaColumn,
  _swigc__p_GeoDaIntColumn,
  _swigc__p_GeoDaRealColumn,
  _swigc__p_GeoDaStringColumn,
  _swigc__p_GeoDaTable,
  _swigc__p_GeoDaWeight,
  _swigc__p_UniLisa,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_GeoDaColumn_p_t,
  _swigc__p_std__allocatorT_char_t,
  _swigc__p_std__allocatorT_double_t,
  _swigc__p_std__allocatorT_float_t,
  _swigc__p_std__allocatorT_int_t,
  _swigc__p_std__allocatorT_std__string_t,
  _swigc__p_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t,
  _swigc__p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t,
  _swigc__p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t,
  _swigc__p_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t,
  _swigc__p_std__allocatorT_unsigned_char_t,
  _swigc__p_std__allocatorT_void_p_t,
  _swigc__p_std__vectorT_GeoDaColumn_p_std__allocatorT_GeoDaColumn_p_t_t,
  _swigc__p_std__vectorT_char_std__allocatorT_char_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_float_std__allocatorT_float_t_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
  _swigc__p_std__vectorT_long_long_std__allocatorT_long_long_t_t,
  _swigc__p_std__vectorT_long_std__allocatorT_long_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__vectorT_std__vectorT_char_std__allocatorT_char_t_t_std__allocatorT_std__vectorT_char_std__allocatorT_char_t_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_std__allocatorT_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t_t_t,
  _swigc__p_std__vectorT_unsigned_char_std__allocatorT_unsigned_char_t_t,
  _swigc__p_std__vectorT_void_p_std__allocatorT_void_p_t_t,
  _swigc__p_std__vectorT_wxInt64_std__allocatorT_wxInt64_t_t,
  _swigc__p_std__vectorT_wxString_std__allocatorT_wxString_t_t,
  _swigc__p_uint64_t,
  _swigc__p_value_type,
  _swigc__p_void,
  _swigc__p_wxString,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */


/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


SWIGEXPORT void SWIG_init(void) {

}
#ifdef __cplusplus
extern "C" {
#endif

#include <R_ext/Rdynload.h>

#ifdef __cplusplus
}
#endif

SWIGINTERN R_CallMethodDef CallEntries[] = {
   {"R_swig_VecVecChar_pop_back", (DL_FUNC) &R_swig_VecVecChar_pop_back, 1},
   {"R_swig_VecVecUINT8_pop_back", (DL_FUNC) &R_swig_VecVecUINT8_pop_back, 1},
   {"R_swig_VecUINT8_pop_back", (DL_FUNC) &R_swig_VecUINT8_pop_back, 1},
   {"R_swig_VecVecInt_pop_back", (DL_FUNC) &R_swig_VecVecInt_pop_back, 1},
   {"R_swig_VecInt_pop_back", (DL_FUNC) &R_swig_VecInt_pop_back, 1},
   {"R_swig_VecVecDouble_pop_back", (DL_FUNC) &R_swig_VecVecDouble_pop_back, 1},
   {"R_swig_VecFloat_pop_back", (DL_FUNC) &R_swig_VecFloat_pop_back, 1},
   {"R_swig_VecVoid_pop_back", (DL_FUNC) &R_swig_VecVoid_pop_back, 1},
   {"R_swig_VecString_pop_back", (DL_FUNC) &R_swig_VecString_pop_back, 1},
   {"R_swig_VecDouble_pop_back", (DL_FUNC) &R_swig_VecDouble_pop_back, 1},
   {"R_swig_VecChar_pop_back", (DL_FUNC) &R_swig_VecChar_pop_back, 1},
   {"R_swig_VecGeoDaColumn_pop_back", (DL_FUNC) &R_swig_VecGeoDaColumn_pop_back, 1},
   {"R_swig_VecString_pop", (DL_FUNC) &R_swig_VecString_pop, 2},
   {"R_swig_GeoDa_GetName", (DL_FUNC) &R_swig_GeoDa_GetName, 2},
   {"R_swig_VecGeoDaColumn_swap", (DL_FUNC) &R_swig_VecGeoDaColumn_swap, 2},
   {"R_swig_VecVoid_size", (DL_FUNC) &R_swig_VecVoid_size, 2},
   {"R_swig_GeoDaWeight_sparsity_set", (DL_FUNC) &R_swig_GeoDaWeight_sparsity_set, 2},
   {"R_swig_GeoDaWeight_density_set", (DL_FUNC) &R_swig_GeoDaWeight_density_set, 2},
   {"R_swig_AbstractLocalSA_GetNumThreads", (DL_FUNC) &R_swig_AbstractLocalSA_GetNumThreads, 2},
   {"R_swig_AbstractLocalSA_SetNumThreads", (DL_FUNC) &R_swig_AbstractLocalSA_SetNumThreads, 2},
   {"R_swig_VecVecDouble_back", (DL_FUNC) &R_swig_VecVecDouble_back, 2},
   {"R_swig_VecDouble_back", (DL_FUNC) &R_swig_VecDouble_back, 2},
   {"R_swig_GeoDaWeight_is_internal_use_set", (DL_FUNC) &R_swig_GeoDaWeight_is_internal_use_set, 2},
   {"R_swig_GeoDaWeight_is_symmetric_get", (DL_FUNC) &R_swig_GeoDaWeight_is_symmetric_get, 2},
   {"R_swig_VecString_empty", (DL_FUNC) &R_swig_VecString_empty, 2},
   {"R_swig_VecDouble_empty", (DL_FUNC) &R_swig_VecDouble_empty, 2},
   {"R_swig_VecVecDouble_empty", (DL_FUNC) &R_swig_VecVecDouble_empty, 2},
   {"R_swig_delete_AbstractLocalSA", (DL_FUNC) &R_swig_delete_AbstractLocalSA, 1},
   {"R_swig_AbstractLocalSA_LargerPermLocalSA", (DL_FUNC) &R_swig_AbstractLocalSA_LargerPermLocalSA, 4},
   {"R_swig_UniLisa_LargerPermLocalSA", (DL_FUNC) &R_swig_UniLisa_LargerPermLocalSA, 4},
   {"R_swig_VecVecChar_empty", (DL_FUNC) &R_swig_VecVecChar_empty, 2},
   {"R_swig_VecVecUINT8_empty", (DL_FUNC) &R_swig_VecVecUINT8_empty, 2},
   {"R_swig_VecUINT8_empty", (DL_FUNC) &R_swig_VecUINT8_empty, 2},
   {"R_swig_VecVecInt_empty", (DL_FUNC) &R_swig_VecVecInt_empty, 2},
   {"R_swig_VecInt_empty", (DL_FUNC) &R_swig_VecInt_empty, 2},
   {"R_swig_VecFloat_empty", (DL_FUNC) &R_swig_VecFloat_empty, 2},
   {"R_swig_VecVoid_empty", (DL_FUNC) &R_swig_VecVoid_empty, 2},
   {"R_swig_VecChar_empty", (DL_FUNC) &R_swig_VecChar_empty, 2},
   {"R_swig_VecGeoDaColumn_empty", (DL_FUNC) &R_swig_VecGeoDaColumn_empty, 2},
   {"R_swig_VecVecUINT8_swap", (DL_FUNC) &R_swig_VecVecUINT8_swap, 2},
   {"R_swig_VecUINT8_swap", (DL_FUNC) &R_swig_VecUINT8_swap, 2},
   {"R_swig_VecGeoDaColumn_size", (DL_FUNC) &R_swig_VecGeoDaColumn_size, 2},
   {"R_swig_GeoDa_GetFieldNames", (DL_FUNC) &R_swig_GeoDa_GetFieldNames, 2},
   {"R_swig_VecVecChar___len__", (DL_FUNC) &R_swig_VecVecChar___len__, 2},
   {"R_swig_VecVecUINT8___len__", (DL_FUNC) &R_swig_VecVecUINT8___len__, 2},
   {"R_swig_VecUINT8___len__", (DL_FUNC) &R_swig_VecUINT8___len__, 2},
   {"R_swig_VecVecInt___len__", (DL_FUNC) &R_swig_VecVecInt___len__, 2},
   {"R_swig_VecInt___len__", (DL_FUNC) &R_swig_VecInt___len__, 2},
   {"R_swig_VecString___len__", (DL_FUNC) &R_swig_VecString___len__, 2},
   {"R_swig_VecVoid___len__", (DL_FUNC) &R_swig_VecVoid___len__, 2},
   {"R_swig_VecFloat___len__", (DL_FUNC) &R_swig_VecFloat___len__, 2},
   {"R_swig_VecDouble___len__", (DL_FUNC) &R_swig_VecDouble___len__, 2},
   {"R_swig_VecChar___len__", (DL_FUNC) &R_swig_VecChar___len__, 2},
   {"R_swig_VecVecDouble___len__", (DL_FUNC) &R_swig_VecVecDouble___len__, 2},
   {"R_swig_VecGeoDaColumn___len__", (DL_FUNC) &R_swig_VecGeoDaColumn___len__, 2},
   {"R_swig_VecVoid_back", (DL_FUNC) &R_swig_VecVoid_back, 2},
   {"R_swig_VecVecChar_append", (DL_FUNC) &R_swig_VecVecChar_append, 2},
   {"R_swig_VecVecUINT8_append", (DL_FUNC) &R_swig_VecVecUINT8_append, 2},
   {"R_swig_VecUINT8_append", (DL_FUNC) &R_swig_VecUINT8_append, 2},
   {"R_swig_VecVecInt_append", (DL_FUNC) &R_swig_VecVecInt_append, 2},
   {"R_swig_VecInt_append", (DL_FUNC) &R_swig_VecInt_append, 2},
   {"R_swig_VecString_append", (DL_FUNC) &R_swig_VecString_append, 2},
   {"R_swig_VecFloat_append", (DL_FUNC) &R_swig_VecFloat_append, 2},
   {"R_swig_VecVoid_append", (DL_FUNC) &R_swig_VecVoid_append, 2},
   {"R_swig_VecDouble_append", (DL_FUNC) &R_swig_VecDouble_append, 2},
   {"R_swig_VecChar_append", (DL_FUNC) &R_swig_VecChar_append, 2},
   {"R_swig_VecVecDouble_append", (DL_FUNC) &R_swig_VecVecDouble_append, 2},
   {"R_swig_VecGeoDaColumn_append", (DL_FUNC) &R_swig_VecGeoDaColumn_append, 2},
   {"R_swig_GeoDaWeight_CheckNeighbor", (DL_FUNC) &R_swig_GeoDaWeight_CheckNeighbor, 4},
   {"R_swig_AbstractLocalSA_GetLastUsedSeed", (DL_FUNC) &R_swig_AbstractLocalSA_GetLastUsedSeed, 2},
   {"R_swig_AbstractLocalSA_SetLastUsedSeed", (DL_FUNC) &R_swig_AbstractLocalSA_SetLastUsedSeed, 2},
   {"R_swig_VecVecUINT8_size", (DL_FUNC) &R_swig_VecVecUINT8_size, 2},
   {"R_swig_VecUINT8_size", (DL_FUNC) &R_swig_VecUINT8_size, 2},
   {"R_swig_VecVecChar_pop", (DL_FUNC) &R_swig_VecVecChar_pop, 2},
   {"R_swig_VecChar_pop", (DL_FUNC) &R_swig_VecChar_pop, 2},
   {"R_swig_GeoDaWeight_num_obs_get", (DL_FUNC) &R_swig_GeoDaWeight_num_obs_get, 2},
   {"R_swig_GeoDaWeight_is_symmetric_set", (DL_FUNC) &R_swig_GeoDaWeight_is_symmetric_set, 2},
   {"R_swig_delete_GeoDa", (DL_FUNC) &R_swig_delete_GeoDa, 1},
   {"R_swig_VecGeoDaColumn_back", (DL_FUNC) &R_swig_VecGeoDaColumn_back, 2},
   {"R_swig_AbstractLocalSA_ComputeLoalSA", (DL_FUNC) &R_swig_AbstractLocalSA_ComputeLoalSA, 1},
   {"R_swig_UniLisa_ComputeLoalSA", (DL_FUNC) &R_swig_UniLisa_ComputeLoalSA, 1},
   {"R_swig_GeoDa_GetNumericCol", (DL_FUNC) &R_swig_GeoDa_GetNumericCol, 3},
   {"R_swig_GeoDaWeight_gal_type_get", (DL_FUNC) &R_swig_GeoDaWeight_gal_type_get, 1},
   {"R_swig_GeoDaWeight_gwt_type_get", (DL_FUNC) &R_swig_GeoDaWeight_gwt_type_get, 1},
   {"R_swig_GeoDaWeight_weight_type_get", (DL_FUNC) &R_swig_GeoDaWeight_weight_type_get, 2},
   {"R_swig_GeoDaColumn_integer_type_get", (DL_FUNC) &R_swig_GeoDaColumn_integer_type_get, 1},
   {"R_swig_GeoDaColumn_string_type_get", (DL_FUNC) &R_swig_GeoDaColumn_string_type_get, 1},
   {"R_swig_GeoDaColumn_real_type_get", (DL_FUNC) &R_swig_GeoDaColumn_real_type_get, 1},
   {"R_swig_GeoDaColumn_field_type_get", (DL_FUNC) &R_swig_GeoDaColumn_field_type_get, 2},
   {"R_swig_GeoDa_point_type_get", (DL_FUNC) &R_swig_GeoDa_point_type_get, 1},
   {"R_swig_GeoDa_polygon_type_get", (DL_FUNC) &R_swig_GeoDa_polygon_type_get, 1},
   {"R_swig_GeoDa_line_type_get", (DL_FUNC) &R_swig_GeoDa_line_type_get, 1},
   {"R_swig_AbstractLocalSA_GetDefaultCategories", (DL_FUNC) &R_swig_AbstractLocalSA_GetDefaultCategories, 2},
   {"R_swig_delete_VecVecChar", (DL_FUNC) &R_swig_delete_VecVecChar, 1},
   {"R_swig_delete_VecChar", (DL_FUNC) &R_swig_delete_VecChar, 1},
   {"R_swig_GeoDaIntColumn_data_get", (DL_FUNC) &R_swig_GeoDaIntColumn_data_get, 1},
   {"R_swig_GeoDaStringColumn_data_get", (DL_FUNC) &R_swig_GeoDaStringColumn_data_get, 1},
   {"R_swig_GeoDaRealColumn_data_get", (DL_FUNC) &R_swig_GeoDaRealColumn_data_get, 1},
   {"R_swig_GeoDaColumn_field_decimals_get", (DL_FUNC) &R_swig_GeoDaColumn_field_decimals_get, 2},
   {"R_swig_VecVecChar_capacity", (DL_FUNC) &R_swig_VecVecChar_capacity, 2},
   {"R_swig_VecVecUINT8_capacity", (DL_FUNC) &R_swig_VecVecUINT8_capacity, 2},
   {"R_swig_VecUINT8_capacity", (DL_FUNC) &R_swig_VecUINT8_capacity, 2},
   {"R_swig_VecVecInt_capacity", (DL_FUNC) &R_swig_VecVecInt_capacity, 2},
   {"R_swig_VecInt_capacity", (DL_FUNC) &R_swig_VecInt_capacity, 2},
   {"R_swig_VecVecDouble_capacity", (DL_FUNC) &R_swig_VecVecDouble_capacity, 2},
   {"R_swig_VecFloat_capacity", (DL_FUNC) &R_swig_VecFloat_capacity, 2},
   {"R_swig_VecVoid_capacity", (DL_FUNC) &R_swig_VecVoid_capacity, 2},
   {"R_swig_VecString_capacity", (DL_FUNC) &R_swig_VecString_capacity, 2},
   {"R_swig_VecDouble_capacity", (DL_FUNC) &R_swig_VecDouble_capacity, 2},
   {"R_swig_VecChar_capacity", (DL_FUNC) &R_swig_VecChar_capacity, 2},
   {"R_swig_VecGeoDaColumn_capacity", (DL_FUNC) &R_swig_VecGeoDaColumn_capacity, 2},
   {"R_swig_AbstractLocalSA_GetDefaultCutoffs", (DL_FUNC) &R_swig_AbstractLocalSA_GetDefaultCutoffs, 2},
   {"R_swig_AbstractLocalSA_SetBO", (DL_FUNC) &R_swig_AbstractLocalSA_SetBO, 2},
   {"R_swig_VecVecUINT8_back", (DL_FUNC) &R_swig_VecVecUINT8_back, 2},
   {"R_swig_VecUINT8_back", (DL_FUNC) &R_swig_VecUINT8_back, 2},
   {"R_swig_GeoDaWeight_SpatialLag", (DL_FUNC) &R_swig_GeoDaWeight_SpatialLag, 4},
   {"R_swig_VecVecDouble_front", (DL_FUNC) &R_swig_VecVecDouble_front, 2},
   {"R_swig_VecString_front", (DL_FUNC) &R_swig_VecString_front, 2},
   {"R_swig_VecDouble_front", (DL_FUNC) &R_swig_VecDouble_front, 2},
   {"R_swig_GeoDaWeight_GetNumObs", (DL_FUNC) &R_swig_GeoDaWeight_GetNumObs, 2},
   {"R_swig_GeoDa_GetNumObs", (DL_FUNC) &R_swig_GeoDa_GetNumObs, 2},
   {"R_swig_VecVecChar_front", (DL_FUNC) &R_swig_VecVecChar_front, 2},
   {"R_swig_VecVecUINT8_front", (DL_FUNC) &R_swig_VecVecUINT8_front, 2},
   {"R_swig_VecUINT8_front", (DL_FUNC) &R_swig_VecUINT8_front, 2},
   {"R_swig_VecVecInt_front", (DL_FUNC) &R_swig_VecVecInt_front, 2},
   {"R_swig_VecInt_front", (DL_FUNC) &R_swig_VecInt_front, 2},
   {"R_swig_VecFloat_front", (DL_FUNC) &R_swig_VecFloat_front, 2},
   {"R_swig_VecVoid_front", (DL_FUNC) &R_swig_VecVoid_front, 2},
   {"R_swig_VecChar_front", (DL_FUNC) &R_swig_VecChar_front, 2},
   {"R_swig_VecGeoDaColumn_front", (DL_FUNC) &R_swig_VecGeoDaColumn_front, 2},
   {"R_swig_GeoDaWeight_GetIDName", (DL_FUNC) &R_swig_GeoDaWeight_GetIDName, 2},
   {"R_swig_AbstractLocalSA_IsReuseLastSeed", (DL_FUNC) &R_swig_AbstractLocalSA_IsReuseLastSeed, 2},
   {"R_swig_AbstractLocalSA_SetReuseLastSeed", (DL_FUNC) &R_swig_AbstractLocalSA_SetReuseLastSeed, 2},
   {"R_swig_GeoDa_GetMapType", (DL_FUNC) &R_swig_GeoDa_GetMapType, 2},
   {"R_swig_GeoDaWeight_num_obs_set", (DL_FUNC) &R_swig_GeoDaWeight_num_obs_set, 2},
   {"R_swig_GeoDaWeight_GetTitle", (DL_FUNC) &R_swig_GeoDaWeight_GetTitle, 2},
   {"R_swig_UniLisa_GetLocalMoranValues", (DL_FUNC) &R_swig_UniLisa_GetLocalMoranValues, 2},
   {"R_swig_AbstractLocalSA_GetLocalSignificanceValues", (DL_FUNC) &R_swig_AbstractLocalSA_GetLocalSignificanceValues, 2},
   {"R_swig_UniLisa_GetLagValues", (DL_FUNC) &R_swig_UniLisa_GetLagValues, 2},
   {"R_swig_VecVecChar___setitem__", (DL_FUNC) &R_swig_VecVecChar___setitem__, 3},
   {"R_swig_VecVecChar___getitem__", (DL_FUNC) &R_swig_VecVecChar___getitem__, 3},
   {"R_swig_VecVecChar___delitem__", (DL_FUNC) &R_swig_VecVecChar___delitem__, 2},
   {"R_swig_VecVecUINT8___setitem__", (DL_FUNC) &R_swig_VecVecUINT8___setitem__, 3},
   {"R_swig_VecVecUINT8___getitem__", (DL_FUNC) &R_swig_VecVecUINT8___getitem__, 3},
   {"R_swig_VecVecUINT8___delitem__", (DL_FUNC) &R_swig_VecVecUINT8___delitem__, 2},
   {"R_swig_VecUINT8___setitem__", (DL_FUNC) &R_swig_VecUINT8___setitem__, 3},
   {"R_swig_VecUINT8___getitem__", (DL_FUNC) &R_swig_VecUINT8___getitem__, 3},
   {"R_swig_VecUINT8___delitem__", (DL_FUNC) &R_swig_VecUINT8___delitem__, 2},
   {"R_swig_VecVecInt___setitem__", (DL_FUNC) &R_swig_VecVecInt___setitem__, 3},
   {"R_swig_VecVecInt___getitem__", (DL_FUNC) &R_swig_VecVecInt___getitem__, 3},
   {"R_swig_VecVecInt___delitem__", (DL_FUNC) &R_swig_VecVecInt___delitem__, 2},
   {"R_swig_VecInt___setitem__", (DL_FUNC) &R_swig_VecInt___setitem__, 3},
   {"R_swig_VecInt___getitem__", (DL_FUNC) &R_swig_VecInt___getitem__, 3},
   {"R_swig_VecInt___delitem__", (DL_FUNC) &R_swig_VecInt___delitem__, 2},
   {"R_swig_VecString___setitem__", (DL_FUNC) &R_swig_VecString___setitem__, 3},
   {"R_swig_VecString___getitem__", (DL_FUNC) &R_swig_VecString___getitem__, 3},
   {"R_swig_VecString___delitem__", (DL_FUNC) &R_swig_VecString___delitem__, 2},
   {"R_swig_VecFloat___setitem__", (DL_FUNC) &R_swig_VecFloat___setitem__, 3},
   {"R_swig_VecFloat___getitem__", (DL_FUNC) &R_swig_VecFloat___getitem__, 3},
   {"R_swig_VecFloat___delitem__", (DL_FUNC) &R_swig_VecFloat___delitem__, 2},
   {"R_swig_VecVoid___setitem__", (DL_FUNC) &R_swig_VecVoid___setitem__, 3},
   {"R_swig_VecVoid___getitem__", (DL_FUNC) &R_swig_VecVoid___getitem__, 3},
   {"R_swig_VecVoid___delitem__", (DL_FUNC) &R_swig_VecVoid___delitem__, 2},
   {"R_swig_VecDouble___delitem__", (DL_FUNC) &R_swig_VecDouble___delitem__, 2},
   {"R_swig_VecDouble___getitem__", (DL_FUNC) &R_swig_VecDouble___getitem__, 3},
   {"R_swig_VecDouble___setitem__", (DL_FUNC) &R_swig_VecDouble___setitem__, 3},
   {"R_swig_VecChar___delitem__", (DL_FUNC) &R_swig_VecChar___delitem__, 2},
   {"R_swig_VecChar___getitem__", (DL_FUNC) &R_swig_VecChar___getitem__, 3},
   {"R_swig_VecChar___setitem__", (DL_FUNC) &R_swig_VecChar___setitem__, 3},
   {"R_swig_VecVecDouble___delitem__", (DL_FUNC) &R_swig_VecVecDouble___delitem__, 2},
   {"R_swig_VecVecDouble___getitem__", (DL_FUNC) &R_swig_VecVecDouble___getitem__, 3},
   {"R_swig_VecVecDouble___setitem__", (DL_FUNC) &R_swig_VecVecDouble___setitem__, 3},
   {"R_swig_VecGeoDaColumn___delitem__", (DL_FUNC) &R_swig_VecGeoDaColumn___delitem__, 2},
   {"R_swig_VecGeoDaColumn___getitem__", (DL_FUNC) &R_swig_VecGeoDaColumn___getitem__, 3},
   {"R_swig_VecGeoDaColumn___setitem__", (DL_FUNC) &R_swig_VecGeoDaColumn___setitem__, 3},
   {"R_swig_VecVecChar___nonzero__", (DL_FUNC) &R_swig_VecVecChar___nonzero__, 2},
   {"R_swig_VecVecUINT8___nonzero__", (DL_FUNC) &R_swig_VecVecUINT8___nonzero__, 2},
   {"R_swig_VecUINT8___nonzero__", (DL_FUNC) &R_swig_VecUINT8___nonzero__, 2},
   {"R_swig_VecVecInt___nonzero__", (DL_FUNC) &R_swig_VecVecInt___nonzero__, 2},
   {"R_swig_VecInt___nonzero__", (DL_FUNC) &R_swig_VecInt___nonzero__, 2},
   {"R_swig_VecString___nonzero__", (DL_FUNC) &R_swig_VecString___nonzero__, 2},
   {"R_swig_VecVoid___nonzero__", (DL_FUNC) &R_swig_VecVoid___nonzero__, 2},
   {"R_swig_VecFloat___nonzero__", (DL_FUNC) &R_swig_VecFloat___nonzero__, 2},
   {"R_swig_VecDouble___nonzero__", (DL_FUNC) &R_swig_VecDouble___nonzero__, 2},
   {"R_swig_VecChar___nonzero__", (DL_FUNC) &R_swig_VecChar___nonzero__, 2},
   {"R_swig_VecVecDouble___nonzero__", (DL_FUNC) &R_swig_VecVecDouble___nonzero__, 2},
   {"R_swig_VecGeoDaColumn___nonzero__", (DL_FUNC) &R_swig_VecGeoDaColumn___nonzero__, 2},
   {"R_swig_GeoDaWeight_weight_type_set", (DL_FUNC) &R_swig_GeoDaWeight_weight_type_set, 2},
   {"R_swig_GeoDaColumn_field_type_set", (DL_FUNC) &R_swig_GeoDaColumn_field_type_set, 2},
   {"R_swig_GeoDaWeight_symmetry_checked_get", (DL_FUNC) &R_swig_GeoDaWeight_symmetry_checked_get, 2},
   {"R_swig_GeoDa_GetGeometryWKB", (DL_FUNC) &R_swig_GeoDa_GetGeometryWKB, 2},
   {"R_swig_AbstractLocalSA_CalcPseudoP_range", (DL_FUNC) &R_swig_AbstractLocalSA_CalcPseudoP_range, 4},
   {"R_swig_GeoDaIntColumn_data_set", (DL_FUNC) &R_swig_GeoDaIntColumn_data_set, 2},
   {"R_swig_GeoDaStringColumn_data_set", (DL_FUNC) &R_swig_GeoDaStringColumn_data_set, 2},
   {"R_swig_GeoDaRealColumn_data_set", (DL_FUNC) &R_swig_GeoDaRealColumn_data_set, 2},
   {"R_swig_VecVecChar___delslice__", (DL_FUNC) &R_swig_VecVecChar___delslice__, 3},
   {"R_swig_VecVecChar___setslice__", (DL_FUNC) &R_swig_VecVecChar___setslice__, 4},
   {"R_swig_VecVecChar___getslice__", (DL_FUNC) &R_swig_VecVecChar___getslice__, 3},
   {"R_swig_VecVecUINT8___delslice__", (DL_FUNC) &R_swig_VecVecUINT8___delslice__, 3},
   {"R_swig_VecVecUINT8___setslice__", (DL_FUNC) &R_swig_VecVecUINT8___setslice__, 4},
   {"R_swig_VecVecUINT8___getslice__", (DL_FUNC) &R_swig_VecVecUINT8___getslice__, 3},
   {"R_swig_VecUINT8___delslice__", (DL_FUNC) &R_swig_VecUINT8___delslice__, 3},
   {"R_swig_VecUINT8___setslice__", (DL_FUNC) &R_swig_VecUINT8___setslice__, 4},
   {"R_swig_VecUINT8___getslice__", (DL_FUNC) &R_swig_VecUINT8___getslice__, 3},
   {"R_swig_VecVecInt___delslice__", (DL_FUNC) &R_swig_VecVecInt___delslice__, 3},
   {"R_swig_VecVecInt___setslice__", (DL_FUNC) &R_swig_VecVecInt___setslice__, 4},
   {"R_swig_VecVecInt___getslice__", (DL_FUNC) &R_swig_VecVecInt___getslice__, 3},
   {"R_swig_VecInt___delslice__", (DL_FUNC) &R_swig_VecInt___delslice__, 3},
   {"R_swig_VecInt___setslice__", (DL_FUNC) &R_swig_VecInt___setslice__, 4},
   {"R_swig_VecInt___getslice__", (DL_FUNC) &R_swig_VecInt___getslice__, 3},
   {"R_swig_VecString___delslice__", (DL_FUNC) &R_swig_VecString___delslice__, 3},
   {"R_swig_VecString___setslice__", (DL_FUNC) &R_swig_VecString___setslice__, 4},
   {"R_swig_VecString___getslice__", (DL_FUNC) &R_swig_VecString___getslice__, 3},
   {"R_swig_VecFloat___delslice__", (DL_FUNC) &R_swig_VecFloat___delslice__, 3},
   {"R_swig_VecVoid___delslice__", (DL_FUNC) &R_swig_VecVoid___delslice__, 3},
   {"R_swig_VecVoid___setslice__", (DL_FUNC) &R_swig_VecVoid___setslice__, 4},
   {"R_swig_VecVoid___getslice__", (DL_FUNC) &R_swig_VecVoid___getslice__, 3},
   {"R_swig_VecFloat___getslice__", (DL_FUNC) &R_swig_VecFloat___getslice__, 3},
   {"R_swig_VecFloat___setslice__", (DL_FUNC) &R_swig_VecFloat___setslice__, 4},
   {"R_swig_VecDouble___getslice__", (DL_FUNC) &R_swig_VecDouble___getslice__, 3},
   {"R_swig_VecDouble___setslice__", (DL_FUNC) &R_swig_VecDouble___setslice__, 4},
   {"R_swig_VecDouble___delslice__", (DL_FUNC) &R_swig_VecDouble___delslice__, 3},
   {"R_swig_VecChar___getslice__", (DL_FUNC) &R_swig_VecChar___getslice__, 3},
   {"R_swig_VecChar___setslice__", (DL_FUNC) &R_swig_VecChar___setslice__, 4},
   {"R_swig_VecChar___delslice__", (DL_FUNC) &R_swig_VecChar___delslice__, 3},
   {"R_swig_VecVecDouble___getslice__", (DL_FUNC) &R_swig_VecVecDouble___getslice__, 3},
   {"R_swig_VecVecDouble___setslice__", (DL_FUNC) &R_swig_VecVecDouble___setslice__, 4},
   {"R_swig_VecVecDouble___delslice__", (DL_FUNC) &R_swig_VecVecDouble___delslice__, 3},
   {"R_swig_GeoDaColumn_field_decimals_set", (DL_FUNC) &R_swig_GeoDaColumn_field_decimals_set, 2},
   {"R_swig_VecGeoDaColumn___getslice__", (DL_FUNC) &R_swig_VecGeoDaColumn___getslice__, 3},
   {"R_swig_VecGeoDaColumn___setslice__", (DL_FUNC) &R_swig_VecGeoDaColumn___setslice__, 4},
   {"R_swig_VecGeoDaColumn___delslice__", (DL_FUNC) &R_swig_VecGeoDaColumn___delslice__, 3},
   {"R_swig_GeoDaWeight_SaveSpaceTimeWeights", (DL_FUNC) &R_swig_GeoDaWeight_SaveSpaceTimeWeights, 5},
   {"R_swig_GeoDaWeight_SaveDIDWeights", (DL_FUNC) &R_swig_GeoDaWeight_SaveDIDWeights, 6},
   {"R_swig_GeoDaWeight_IsInternalUse", (DL_FUNC) &R_swig_GeoDaWeight_IsInternalUse, 2},
   {"R_swig_VecVecDouble_clear", (DL_FUNC) &R_swig_VecVecDouble_clear, 1},
   {"R_swig_VecString_clear", (DL_FUNC) &R_swig_VecString_clear, 1},
   {"R_swig_VecDouble_clear", (DL_FUNC) &R_swig_VecDouble_clear, 1},
   {"R_swig_VecVecChar_clear", (DL_FUNC) &R_swig_VecVecChar_clear, 1},
   {"R_swig_VecVecUINT8_clear", (DL_FUNC) &R_swig_VecVecUINT8_clear, 1},
   {"R_swig_VecUINT8_clear", (DL_FUNC) &R_swig_VecUINT8_clear, 1},
   {"R_swig_VecVecInt_clear", (DL_FUNC) &R_swig_VecVecInt_clear, 1},
   {"R_swig_VecInt_clear", (DL_FUNC) &R_swig_VecInt_clear, 1},
   {"R_swig_VecFloat_clear", (DL_FUNC) &R_swig_VecFloat_clear, 1},
   {"R_swig_VecVoid_clear", (DL_FUNC) &R_swig_VecVoid_clear, 1},
   {"R_swig_VecChar_clear", (DL_FUNC) &R_swig_VecChar_clear, 1},
   {"R_swig_VecGeoDaColumn_clear", (DL_FUNC) &R_swig_VecGeoDaColumn_clear, 1},
   {"R_swig_VecDouble_pop", (DL_FUNC) &R_swig_VecDouble_pop, 2},
   {"R_swig_VecVecDouble_pop", (DL_FUNC) &R_swig_VecVecDouble_pop, 2},
   {"R_swig_GeoDa_GetGeometryWKT", (DL_FUNC) &R_swig_GeoDa_GetGeometryWKT, 2},
   {"R_swig_AbstractLocalSA_GetBO", (DL_FUNC) &R_swig_AbstractLocalSA_GetBO, 2},
   {"R_swig_new_GeoDaTable", (DL_FUNC) &R_swig_new_GeoDaTable, 0},
   {"R_swig_delete_GeoDaTable", (DL_FUNC) &R_swig_delete_GeoDaTable, 1},
   {"R_swig_VecGeoDaColumn_pop", (DL_FUNC) &R_swig_VecGeoDaColumn_pop, 2},
   {"R_swig_delete_VecString", (DL_FUNC) &R_swig_delete_VecString, 1},
   {"R_swig_AbstractLocalSA_CalcPseudoP", (DL_FUNC) &R_swig_AbstractLocalSA_CalcPseudoP, 1},
   {"R_swig_VecFloat_swap", (DL_FUNC) &R_swig_VecFloat_swap, 2},
   {"R_swig_VecVecInt_swap", (DL_FUNC) &R_swig_VecVecInt_swap, 2},
   {"R_swig_VecInt_swap", (DL_FUNC) &R_swig_VecInt_swap, 2},
   {"R_swig_GeoDaWeight_symmetry_checked_set", (DL_FUNC) &R_swig_GeoDaWeight_symmetry_checked_set, 2},
   {"R_swig_delete_VecVecDouble", (DL_FUNC) &R_swig_delete_VecVecDouble, 1},
   {"R_swig_delete_VecDouble", (DL_FUNC) &R_swig_delete_VecDouble, 1},
   {"R_swig_GeoDaWeight_GetNbrSize", (DL_FUNC) &R_swig_GeoDaWeight_GetNbrSize, 3},
   {"R_swig_GeoDaTable_GetNumCols", (DL_FUNC) &R_swig_GeoDaTable_GetNumCols, 2},
   {"R_swig_GeoDa_GetNumCols", (DL_FUNC) &R_swig_GeoDa_GetNumCols, 2},
   {"R_swig_AbstractLocalSA_SetFDR", (DL_FUNC) &R_swig_AbstractLocalSA_SetFDR, 2},
   {"R_swig_new_GeoDaIntColumn", (DL_FUNC) &R_swig_new_GeoDaIntColumn, 2},
   {"R_swig_delete_GeoDaIntColumn", (DL_FUNC) &R_swig_delete_GeoDaIntColumn, 1},
   {"R_swig_new_GeoDaRealColumn", (DL_FUNC) &R_swig_new_GeoDaRealColumn, 2},
   {"R_swig_delete_GeoDaRealColumn", (DL_FUNC) &R_swig_delete_GeoDaRealColumn, 1},
   {"R_swig_GeoDaTable_AddIntColumn", (DL_FUNC) &R_swig_GeoDaTable_AddIntColumn, 3},
   {"R_swig_GeoDaTable_AddRealColumn", (DL_FUNC) &R_swig_GeoDaTable_AddRealColumn, 3},
   {"R_swig_GeoDaColumn_name_get", (DL_FUNC) &R_swig_GeoDaColumn_name_get, 2},
   {"R_swig_new_GeoDaColumn", (DL_FUNC) &R_swig_new_GeoDaColumn, 4},
   {"R_swig_delete_GeoDaColumn", (DL_FUNC) &R_swig_delete_GeoDaColumn, 1},
   {"R_swig_new_GeoDaStringColumn", (DL_FUNC) &R_swig_new_GeoDaStringColumn, 2},
   {"R_swig_delete_GeoDaStringColumn", (DL_FUNC) &R_swig_delete_GeoDaStringColumn, 1},
   {"R_swig_GeoDaTable_AddStringColumn", (DL_FUNC) &R_swig_GeoDaTable_AddStringColumn, 3},
   {"R_swig_delete_VecGeoDaColumn", (DL_FUNC) &R_swig_delete_VecGeoDaColumn, 1},
   {"R_swig_VecVecChar_reserve", (DL_FUNC) &R_swig_VecVecChar_reserve, 2},
   {"R_swig_VecVecUINT8_reserve", (DL_FUNC) &R_swig_VecVecUINT8_reserve, 2},
   {"R_swig_VecUINT8_reserve", (DL_FUNC) &R_swig_VecUINT8_reserve, 2},
   {"R_swig_VecVecInt_reserve", (DL_FUNC) &R_swig_VecVecInt_reserve, 2},
   {"R_swig_VecInt_reserve", (DL_FUNC) &R_swig_VecInt_reserve, 2},
   {"R_swig_VecVecDouble_reserve", (DL_FUNC) &R_swig_VecVecDouble_reserve, 2},
   {"R_swig_VecFloat_reserve", (DL_FUNC) &R_swig_VecFloat_reserve, 2},
   {"R_swig_VecVoid_reserve", (DL_FUNC) &R_swig_VecVoid_reserve, 2},
   {"R_swig_VecString_reserve", (DL_FUNC) &R_swig_VecString_reserve, 2},
   {"R_swig_VecDouble_reserve", (DL_FUNC) &R_swig_VecDouble_reserve, 2},
   {"R_swig_VecChar_reserve", (DL_FUNC) &R_swig_VecChar_reserve, 2},
   {"R_swig_VecGeoDaColumn_reserve", (DL_FUNC) &R_swig_VecGeoDaColumn_reserve, 2},
   {"R_swig_GeoDaWeight_Update", (DL_FUNC) &R_swig_GeoDaWeight_Update, 2},
   {"R_swig_AbstractLocalSA_IsRowStandardize", (DL_FUNC) &R_swig_AbstractLocalSA_IsRowStandardize, 2},
   {"R_swig_AbstractLocalSA_SetRowStandardize", (DL_FUNC) &R_swig_AbstractLocalSA_SetRowStandardize, 2},
   {"R_swig_VecFloat_size", (DL_FUNC) &R_swig_VecFloat_size, 2},
   {"R_swig_VecVecInt_size", (DL_FUNC) &R_swig_VecVecInt_size, 2},
   {"R_swig_VecInt_size", (DL_FUNC) &R_swig_VecInt_size, 2},
   {"R_swig_GeoDaColumn_field_length_get", (DL_FUNC) &R_swig_GeoDaColumn_field_length_get, 2},
   {"R_swig_GeoDa_GetStringCol", (DL_FUNC) &R_swig_GeoDa_GetStringCol, 3},
   {"R_swig_delete_VecVoid", (DL_FUNC) &R_swig_delete_VecVoid, 1},
   {"R_swig_new_UniLisa", (DL_FUNC) &R_swig_new_UniLisa, 4},
   {"R_swig_delete_UniLisa", (DL_FUNC) &R_swig_delete_UniLisa, 1},
   {"R_swig_VecVecChar_assign", (DL_FUNC) &R_swig_VecVecChar_assign, 3},
   {"R_swig_VecVecUINT8_assign", (DL_FUNC) &R_swig_VecVecUINT8_assign, 3},
   {"R_swig_VecUINT8_assign", (DL_FUNC) &R_swig_VecUINT8_assign, 3},
   {"R_swig_VecVecInt_assign", (DL_FUNC) &R_swig_VecVecInt_assign, 3},
   {"R_swig_VecInt_assign", (DL_FUNC) &R_swig_VecInt_assign, 3},
   {"R_swig_VecVecDouble_assign", (DL_FUNC) &R_swig_VecVecDouble_assign, 3},
   {"R_swig_VecFloat_assign", (DL_FUNC) &R_swig_VecFloat_assign, 3},
   {"R_swig_VecVoid_assign", (DL_FUNC) &R_swig_VecVoid_assign, 3},
   {"R_swig_VecString_assign", (DL_FUNC) &R_swig_VecString_assign, 3},
   {"R_swig_VecDouble_assign", (DL_FUNC) &R_swig_VecDouble_assign, 3},
   {"R_swig_VecChar_assign", (DL_FUNC) &R_swig_VecChar_assign, 3},
   {"R_swig_VecGeoDaColumn_assign", (DL_FUNC) &R_swig_VecGeoDaColumn_assign, 3},
   {"R_swig_GeoDa_GetIntegerCol", (DL_FUNC) &R_swig_GeoDa_GetIntegerCol, 3},
   {"R_swig_VecVecChar_resize__SWIG_0", (DL_FUNC) &R_swig_VecVecChar_resize__SWIG_0, 2},
   {"R_swig_new_VecVecChar__SWIG_0", (DL_FUNC) &R_swig_new_VecVecChar__SWIG_0, 0},
   {"R_swig_VecVecUINT8_resize__SWIG_0", (DL_FUNC) &R_swig_VecVecUINT8_resize__SWIG_0, 2},
   {"R_swig_new_VecVecUINT8__SWIG_0", (DL_FUNC) &R_swig_new_VecVecUINT8__SWIG_0, 0},
   {"R_swig_VecUINT8_resize__SWIG_0", (DL_FUNC) &R_swig_VecUINT8_resize__SWIG_0, 2},
   {"R_swig_new_VecUINT8__SWIG_0", (DL_FUNC) &R_swig_new_VecUINT8__SWIG_0, 0},
   {"R_swig_VecVecInt_resize__SWIG_0", (DL_FUNC) &R_swig_VecVecInt_resize__SWIG_0, 2},
   {"R_swig_new_VecVecInt__SWIG_0", (DL_FUNC) &R_swig_new_VecVecInt__SWIG_0, 0},
   {"R_swig_VecInt_resize__SWIG_0", (DL_FUNC) &R_swig_VecInt_resize__SWIG_0, 2},
   {"R_swig_new_VecInt__SWIG_0", (DL_FUNC) &R_swig_new_VecInt__SWIG_0, 0},
   {"R_swig_VecVecDouble_resize__SWIG_0", (DL_FUNC) &R_swig_VecVecDouble_resize__SWIG_0, 2},
   {"R_swig_new_VecString__SWIG_0", (DL_FUNC) &R_swig_new_VecString__SWIG_0, 0},
   {"R_swig_VecFloat_resize__SWIG_0", (DL_FUNC) &R_swig_VecFloat_resize__SWIG_0, 2},
   {"R_swig_new_VecFloat__SWIG_0", (DL_FUNC) &R_swig_new_VecFloat__SWIG_0, 0},
   {"R_swig_new_VecVoid__SWIG_0", (DL_FUNC) &R_swig_new_VecVoid__SWIG_0, 0},
   {"R_swig_VecVoid_resize__SWIG_0", (DL_FUNC) &R_swig_VecVoid_resize__SWIG_0, 2},
   {"R_swig_VecString_resize__SWIG_0", (DL_FUNC) &R_swig_VecString_resize__SWIG_0, 2},
   {"R_swig_new_VecDouble__SWIG_0", (DL_FUNC) &R_swig_new_VecDouble__SWIG_0, 0},
   {"R_swig_VecDouble_resize__SWIG_0", (DL_FUNC) &R_swig_VecDouble_resize__SWIG_0, 2},
   {"R_swig_new_VecChar__SWIG_0", (DL_FUNC) &R_swig_new_VecChar__SWIG_0, 0},
   {"R_swig_VecChar_resize__SWIG_0", (DL_FUNC) &R_swig_VecChar_resize__SWIG_0, 2},
   {"R_swig_new_VecVecDouble__SWIG_0", (DL_FUNC) &R_swig_new_VecVecDouble__SWIG_0, 0},
   {"R_swig_GeoDaWeight_SaveToFile__SWIG_0", (DL_FUNC) &R_swig_GeoDaWeight_SaveToFile__SWIG_0, 6},
   {"R_swig_GeoDaTable_GetColumn__SWIG_0", (DL_FUNC) &R_swig_GeoDaTable_GetColumn__SWIG_0, 2},
   {"R_swig_new_GeoDa__SWIG_0", (DL_FUNC) &R_swig_new_GeoDa__SWIG_0, 7},
   {"R_swig_GeoDa_CreateContiguityWeights__SWIG_0", (DL_FUNC) &R_swig_GeoDa_CreateContiguityWeights__SWIG_0, 6},
   {"R_swig_GeoDa_CreateDistanceWeights__SWIG_0", (DL_FUNC) &R_swig_GeoDa_CreateDistanceWeights__SWIG_0, 4},
   {"R_swig_GeoDa_LISA__SWIG_0", (DL_FUNC) &R_swig_GeoDa_LISA__SWIG_0, 4},
   {"R_swig_GeoDa_SKATER__SWIG_0", (DL_FUNC) &R_swig_GeoDa_SKATER__SWIG_0, 8},
   {"R_swig_ToGeoDaColumn__SWIG_0", (DL_FUNC) &R_swig_ToGeoDaColumn__SWIG_0, 1},
   {"R_swig_new_VecGeoDaColumn__SWIG_0", (DL_FUNC) &R_swig_new_VecGeoDaColumn__SWIG_0, 0},
   {"R_swig_VecGeoDaColumn_resize__SWIG_0", (DL_FUNC) &R_swig_VecGeoDaColumn_resize__SWIG_0, 2},
   {"R_swig_VecVecChar_resize__SWIG_1", (DL_FUNC) &R_swig_VecVecChar_resize__SWIG_1, 3},
   {"R_swig_new_VecVecChar__SWIG_1", (DL_FUNC) &R_swig_new_VecVecChar__SWIG_1, 1},
   {"R_swig_VecVecUINT8_resize__SWIG_1", (DL_FUNC) &R_swig_VecVecUINT8_resize__SWIG_1, 3},
   {"R_swig_new_VecVecUINT8__SWIG_1", (DL_FUNC) &R_swig_new_VecVecUINT8__SWIG_1, 1},
   {"R_swig_VecUINT8_resize__SWIG_1", (DL_FUNC) &R_swig_VecUINT8_resize__SWIG_1, 3},
   {"R_swig_new_VecUINT8__SWIG_1", (DL_FUNC) &R_swig_new_VecUINT8__SWIG_1, 1},
   {"R_swig_VecVecInt_resize__SWIG_1", (DL_FUNC) &R_swig_VecVecInt_resize__SWIG_1, 3},
   {"R_swig_new_VecVecInt__SWIG_1", (DL_FUNC) &R_swig_new_VecVecInt__SWIG_1, 1},
   {"R_swig_VecInt_resize__SWIG_1", (DL_FUNC) &R_swig_VecInt_resize__SWIG_1, 3},
   {"R_swig_new_VecInt__SWIG_1", (DL_FUNC) &R_swig_new_VecInt__SWIG_1, 1},
   {"R_swig_VecVecDouble_resize__SWIG_1", (DL_FUNC) &R_swig_VecVecDouble_resize__SWIG_1, 3},
   {"R_swig_new_VecString__SWIG_1", (DL_FUNC) &R_swig_new_VecString__SWIG_1, 1},
   {"R_swig_VecFloat_resize__SWIG_1", (DL_FUNC) &R_swig_VecFloat_resize__SWIG_1, 3},
   {"R_swig_new_VecFloat__SWIG_1", (DL_FUNC) &R_swig_new_VecFloat__SWIG_1, 1},
   {"R_swig_new_VecVoid__SWIG_1", (DL_FUNC) &R_swig_new_VecVoid__SWIG_1, 1},
   {"R_swig_VecVoid_resize__SWIG_1", (DL_FUNC) &R_swig_VecVoid_resize__SWIG_1, 3},
   {"R_swig_VecString_resize__SWIG_1", (DL_FUNC) &R_swig_VecString_resize__SWIG_1, 3},
   {"R_swig_new_VecDouble__SWIG_1", (DL_FUNC) &R_swig_new_VecDouble__SWIG_1, 1},
   {"R_swig_VecDouble_resize__SWIG_1", (DL_FUNC) &R_swig_VecDouble_resize__SWIG_1, 3},
   {"R_swig_new_VecChar__SWIG_1", (DL_FUNC) &R_swig_new_VecChar__SWIG_1, 1},
   {"R_swig_VecChar_resize__SWIG_1", (DL_FUNC) &R_swig_VecChar_resize__SWIG_1, 3},
   {"R_swig_new_VecVecDouble__SWIG_1", (DL_FUNC) &R_swig_new_VecVecDouble__SWIG_1, 1},
   {"R_swig_GeoDaWeight_SaveToFile__SWIG_1", (DL_FUNC) &R_swig_GeoDaWeight_SaveToFile__SWIG_1, 6},
   {"R_swig_GeoDaTable_GetColumn__SWIG_1", (DL_FUNC) &R_swig_GeoDaTable_GetColumn__SWIG_1, 2},
   {"R_swig_new_GeoDa__SWIG_1", (DL_FUNC) &R_swig_new_GeoDa__SWIG_1, 2},
   {"R_swig_GeoDa_CreateContiguityWeights__SWIG_1", (DL_FUNC) &R_swig_GeoDa_CreateContiguityWeights__SWIG_1, 5},
   {"R_swig_GeoDa_CreateDistanceWeights__SWIG_1", (DL_FUNC) &R_swig_GeoDa_CreateDistanceWeights__SWIG_1, 3},
   {"R_swig_GeoDa_LISA__SWIG_1", (DL_FUNC) &R_swig_GeoDa_LISA__SWIG_1, 3},
   {"R_swig_GeoDa_SKATER__SWIG_1", (DL_FUNC) &R_swig_GeoDa_SKATER__SWIG_1, 7},
   {"R_swig_ToGeoDaColumn__SWIG_1", (DL_FUNC) &R_swig_ToGeoDaColumn__SWIG_1, 1},
   {"R_swig_new_VecGeoDaColumn__SWIG_1", (DL_FUNC) &R_swig_new_VecGeoDaColumn__SWIG_1, 1},
   {"R_swig_VecGeoDaColumn_resize__SWIG_1", (DL_FUNC) &R_swig_VecGeoDaColumn_resize__SWIG_1, 3},
   {"R_swig_new_VecVecChar__SWIG_2", (DL_FUNC) &R_swig_new_VecVecChar__SWIG_2, 1},
   {"R_swig_new_VecVecUINT8__SWIG_2", (DL_FUNC) &R_swig_new_VecVecUINT8__SWIG_2, 1},
   {"R_swig_new_VecUINT8__SWIG_2", (DL_FUNC) &R_swig_new_VecUINT8__SWIG_2, 1},
   {"R_swig_new_VecVecInt__SWIG_2", (DL_FUNC) &R_swig_new_VecVecInt__SWIG_2, 1},
   {"R_swig_new_VecInt__SWIG_2", (DL_FUNC) &R_swig_new_VecInt__SWIG_2, 1},
   {"R_swig_new_VecVecDouble__SWIG_2", (DL_FUNC) &R_swig_new_VecVecDouble__SWIG_2, 1},
   {"R_swig_new_VecFloat__SWIG_2", (DL_FUNC) &R_swig_new_VecFloat__SWIG_2, 1},
   {"R_swig_new_VecVoid__SWIG_2", (DL_FUNC) &R_swig_new_VecVoid__SWIG_2, 1},
   {"R_swig_new_VecString__SWIG_2", (DL_FUNC) &R_swig_new_VecString__SWIG_2, 1},
   {"R_swig_new_VecDouble__SWIG_2", (DL_FUNC) &R_swig_new_VecDouble__SWIG_2, 1},
   {"R_swig_new_VecChar__SWIG_2", (DL_FUNC) &R_swig_new_VecChar__SWIG_2, 1},
   {"R_swig_new_GeoDa__SWIG_2", (DL_FUNC) &R_swig_new_GeoDa__SWIG_2, 1},
   {"R_swig_GeoDa_CreateContiguityWeights__SWIG_2", (DL_FUNC) &R_swig_GeoDa_CreateContiguityWeights__SWIG_2, 4},
   {"R_swig_GeoDa_CreateDistanceWeights__SWIG_2", (DL_FUNC) &R_swig_GeoDa_CreateDistanceWeights__SWIG_2, 2},
   {"R_swig_GeoDa_SKATER__SWIG_2", (DL_FUNC) &R_swig_GeoDa_SKATER__SWIG_2, 6},
   {"R_swig_ToGeoDaColumn__SWIG_2", (DL_FUNC) &R_swig_ToGeoDaColumn__SWIG_2, 1},
   {"R_swig_new_VecGeoDaColumn__SWIG_2", (DL_FUNC) &R_swig_new_VecGeoDaColumn__SWIG_2, 1},
   {"R_swig_new_VecVecChar__SWIG_3", (DL_FUNC) &R_swig_new_VecVecChar__SWIG_3, 2},
   {"R_swig_new_VecVecUINT8__SWIG_3", (DL_FUNC) &R_swig_new_VecVecUINT8__SWIG_3, 2},
   {"R_swig_new_VecUINT8__SWIG_3", (DL_FUNC) &R_swig_new_VecUINT8__SWIG_3, 2},
   {"R_swig_new_VecVecInt__SWIG_3", (DL_FUNC) &R_swig_new_VecVecInt__SWIG_3, 2},
   {"R_swig_new_VecInt__SWIG_3", (DL_FUNC) &R_swig_new_VecInt__SWIG_3, 2},
   {"R_swig_new_VecVecDouble__SWIG_3", (DL_FUNC) &R_swig_new_VecVecDouble__SWIG_3, 2},
   {"R_swig_new_VecFloat__SWIG_3", (DL_FUNC) &R_swig_new_VecFloat__SWIG_3, 2},
   {"R_swig_new_VecVoid__SWIG_3", (DL_FUNC) &R_swig_new_VecVoid__SWIG_3, 2},
   {"R_swig_new_VecString__SWIG_3", (DL_FUNC) &R_swig_new_VecString__SWIG_3, 2},
   {"R_swig_new_VecDouble__SWIG_3", (DL_FUNC) &R_swig_new_VecDouble__SWIG_3, 2},
   {"R_swig_new_VecChar__SWIG_3", (DL_FUNC) &R_swig_new_VecChar__SWIG_3, 2},
   {"R_swig_GeoDa_CreateContiguityWeights__SWIG_3", (DL_FUNC) &R_swig_GeoDa_CreateContiguityWeights__SWIG_3, 3},
   {"R_swig_GeoDa_SKATER__SWIG_3", (DL_FUNC) &R_swig_GeoDa_SKATER__SWIG_3, 5},
   {"R_swig_new_VecGeoDaColumn__SWIG_3", (DL_FUNC) &R_swig_new_VecGeoDaColumn__SWIG_3, 2},
   {"R_swig_GeoDa_CreateContiguityWeights__SWIG_4", (DL_FUNC) &R_swig_GeoDa_CreateContiguityWeights__SWIG_4, 2},
   {"R_swig_GeoDa_SKATER__SWIG_4", (DL_FUNC) &R_swig_GeoDa_SKATER__SWIG_4, 8},
   {"R_swig_GeoDa_CreateContiguityWeights__SWIG_5", (DL_FUNC) &R_swig_GeoDa_CreateContiguityWeights__SWIG_5, 1},
   {"R_swig_GeoDa_SKATER__SWIG_5", (DL_FUNC) &R_swig_GeoDa_SKATER__SWIG_5, 7},
   {"R_swig_GeoDaWeight_GetNbrStats", (DL_FUNC) &R_swig_GeoDaWeight_GetNbrStats, 1},
   {"R_swig_GeoDaWeight_title_get", (DL_FUNC) &R_swig_GeoDaWeight_title_get, 2},
   {"R_swig_GeoDa_SKATER__SWIG_6", (DL_FUNC) &R_swig_GeoDa_SKATER__SWIG_6, 6},
   {"R_swig_GeoDa_SKATER__SWIG_7", (DL_FUNC) &R_swig_GeoDa_SKATER__SWIG_7, 5},
   {"R_swig_AbstractLocalSA_GetFDR", (DL_FUNC) &R_swig_AbstractLocalSA_GetFDR, 2},
   {"R_swig_GeoDaColumn_name_set", (DL_FUNC) &R_swig_GeoDaColumn_name_set, 2},
   {"R_swig_AbstractLocalSA_GetUserCutoff", (DL_FUNC) &R_swig_AbstractLocalSA_GetUserCutoff, 2},
   {"R_swig_AbstractLocalSA_SetUserCutoff", (DL_FUNC) &R_swig_AbstractLocalSA_SetUserCutoff, 2},
   {"R_swig_VecFloat_back", (DL_FUNC) &R_swig_VecFloat_back, 2},
   {"R_swig_AbstractLocalSA_GetSignificanceCutoff", (DL_FUNC) &R_swig_AbstractLocalSA_GetSignificanceCutoff, 2},
   {"R_swig_AbstractLocalSA_SetSignificanceCutoff", (DL_FUNC) &R_swig_AbstractLocalSA_SetSignificanceCutoff, 2},
   {"R_swig_VecVecInt_back", (DL_FUNC) &R_swig_VecVecInt_back, 2},
   {"R_swig_VecInt_back", (DL_FUNC) &R_swig_VecInt_back, 2},
   {"R_swig_GeoDaWeight_wflnm_get", (DL_FUNC) &R_swig_GeoDaWeight_wflnm_get, 2},
   {"R_swig_VecVecChar_swap", (DL_FUNC) &R_swig_VecVecChar_swap, 2},
   {"R_swig_VecChar_swap", (DL_FUNC) &R_swig_VecChar_swap, 2},
   {"R_swig_GeoDaColumn_field_length_set", (DL_FUNC) &R_swig_GeoDaColumn_field_length_set, 2},
   {"R_swig_VecVecChar_get_allocator", (DL_FUNC) &R_swig_VecVecChar_get_allocator, 2},
   {"R_swig_VecVecUINT8_get_allocator", (DL_FUNC) &R_swig_VecVecUINT8_get_allocator, 2},
   {"R_swig_VecUINT8_get_allocator", (DL_FUNC) &R_swig_VecUINT8_get_allocator, 2},
   {"R_swig_VecVecInt_get_allocator", (DL_FUNC) &R_swig_VecVecInt_get_allocator, 2},
   {"R_swig_VecInt_get_allocator", (DL_FUNC) &R_swig_VecInt_get_allocator, 2},
   {"R_swig_VecVecDouble_get_allocator", (DL_FUNC) &R_swig_VecVecDouble_get_allocator, 2},
   {"R_swig_VecFloat_get_allocator", (DL_FUNC) &R_swig_VecFloat_get_allocator, 2},
   {"R_swig_VecVoid_get_allocator", (DL_FUNC) &R_swig_VecVoid_get_allocator, 2},
   {"R_swig_VecString_get_allocator", (DL_FUNC) &R_swig_VecString_get_allocator, 2},
   {"R_swig_VecDouble_get_allocator", (DL_FUNC) &R_swig_VecDouble_get_allocator, 2},
   {"R_swig_VecChar_get_allocator", (DL_FUNC) &R_swig_VecChar_get_allocator, 2},
   {"R_swig_GeoDaWeight_min_nbrs_get", (DL_FUNC) &R_swig_GeoDaWeight_min_nbrs_get, 2},
   {"R_swig_GeoDaWeight_max_nbrs_get", (DL_FUNC) &R_swig_GeoDaWeight_max_nbrs_get, 2},
   {"R_swig_GeoDaWeight_mean_nbrs_get", (DL_FUNC) &R_swig_GeoDaWeight_mean_nbrs_get, 2},
   {"R_swig_GeoDaWeight_median_nbrs_get", (DL_FUNC) &R_swig_GeoDaWeight_median_nbrs_get, 2},
   {"R_swig_VecGeoDaColumn_get_allocator", (DL_FUNC) &R_swig_VecGeoDaColumn_get_allocator, 2},
   {"R_swig_VecString_swap", (DL_FUNC) &R_swig_VecString_swap, 2},
   {"R_swig_GeoDaWeight_id_field_get", (DL_FUNC) &R_swig_GeoDaWeight_id_field_get, 2},
   {"R_swig_AbstractLocalSA_CalcPseudoP_threaded", (DL_FUNC) &R_swig_AbstractLocalSA_CalcPseudoP_threaded, 1},
   {"R_swig_delete_VecVecInt", (DL_FUNC) &R_swig_delete_VecVecInt, 1},
   {"R_swig_delete_VecInt", (DL_FUNC) &R_swig_delete_VecInt, 1},
   {"R_swig_GeoDaIntColumn_GetData", (DL_FUNC) &R_swig_GeoDaIntColumn_GetData, 2},
   {"R_swig_GeoDaIntColumn_SetData", (DL_FUNC) &R_swig_GeoDaIntColumn_SetData, 2},
   {"R_swig_GeoDaStringColumn_GetData", (DL_FUNC) &R_swig_GeoDaStringColumn_GetData, 2},
   {"R_swig_GeoDaStringColumn_SetData", (DL_FUNC) &R_swig_GeoDaStringColumn_SetData, 2},
   {"R_swig_GeoDaRealColumn_GetData", (DL_FUNC) &R_swig_GeoDaRealColumn_GetData, 2},
   {"R_swig_GeoDaRealColumn_SetData", (DL_FUNC) &R_swig_GeoDaRealColumn_SetData, 2},
   {"R_swig_GeoDaWeight_title_set", (DL_FUNC) &R_swig_GeoDaWeight_title_set, 2},
   {"R_swig_VecVecChar_size", (DL_FUNC) &R_swig_VecVecChar_size, 2},
   {"R_swig_VecChar_size", (DL_FUNC) &R_swig_VecChar_size, 2},
   {"R_swig_AbstractLocalSA_GetHasUndefined", (DL_FUNC) &R_swig_AbstractLocalSA_GetHasUndefined, 2},
   {"R_swig_test", (DL_FUNC) &R_swig_test, 1},
   {"R_swig_GeoDa_GetFieldTypes", (DL_FUNC) &R_swig_GeoDa_GetFieldTypes, 2},
   {"R_swig_func", (DL_FUNC) &R_swig_func, 1},
   {"R_swig_VecVecInt_pop", (DL_FUNC) &R_swig_VecVecInt_pop, 2},
   {"R_swig_VecInt_pop", (DL_FUNC) &R_swig_VecInt_pop, 2},
   {"R_swig_GeoDaWeight_Equal", (DL_FUNC) &R_swig_GeoDaWeight_Equal, 3},
   {"R_swig_delete_VecFloat", (DL_FUNC) &R_swig_delete_VecFloat, 1},
   {"R_swig_VecVecChar_push_back", (DL_FUNC) &R_swig_VecVecChar_push_back, 2},
   {"R_swig_VecVecUINT8_push_back", (DL_FUNC) &R_swig_VecVecUINT8_push_back, 2},
   {"R_swig_VecUINT8_push_back", (DL_FUNC) &R_swig_VecUINT8_push_back, 2},
   {"R_swig_VecVecInt_push_back", (DL_FUNC) &R_swig_VecVecInt_push_back, 2},
   {"R_swig_VecInt_push_back", (DL_FUNC) &R_swig_VecInt_push_back, 2},
   {"R_swig_VecVecDouble_push_back", (DL_FUNC) &R_swig_VecVecDouble_push_back, 2},
   {"R_swig_VecFloat_push_back", (DL_FUNC) &R_swig_VecFloat_push_back, 2},
   {"R_swig_VecVoid_push_back", (DL_FUNC) &R_swig_VecVoid_push_back, 2},
   {"R_swig_VecString_push_back", (DL_FUNC) &R_swig_VecString_push_back, 2},
   {"R_swig_VecDouble_push_back", (DL_FUNC) &R_swig_VecDouble_push_back, 2},
   {"R_swig_VecChar_push_back", (DL_FUNC) &R_swig_VecChar_push_back, 2},
   {"R_swig_VecString_size", (DL_FUNC) &R_swig_VecString_size, 2},
   {"R_swig_VecGeoDaColumn_push_back", (DL_FUNC) &R_swig_VecGeoDaColumn_push_back, 2},
   {"R_swig_GeoDaWeight_wflnm_set", (DL_FUNC) &R_swig_GeoDaWeight_wflnm_set, 2},
   {"R_swig_AbstractLocalSA_GetNumPermutations", (DL_FUNC) &R_swig_AbstractLocalSA_GetNumPermutations, 2},
   {"R_swig_AbstractLocalSA_SetNumPermutations", (DL_FUNC) &R_swig_AbstractLocalSA_SetNumPermutations, 2},
   {"R_swig_AbstractLocalSA_GetClusterIndicators", (DL_FUNC) &R_swig_AbstractLocalSA_GetClusterIndicators, 2},
   {"R_swig_AbstractLocalSA_GetSigCatIndicators", (DL_FUNC) &R_swig_AbstractLocalSA_GetSigCatIndicators, 2},
   {"R_swig_UniLisa_GetClusterIndicators", (DL_FUNC) &R_swig_UniLisa_GetClusterIndicators, 2},
   {"R_swig_GeoDaWeight_GetNeighbors", (DL_FUNC) &R_swig_GeoDaWeight_GetNeighbors, 3},
   {"R_swig_VecVoid_pop", (DL_FUNC) &R_swig_VecVoid_pop, 2},
   {"R_swig_GeoDaWeight_min_nbrs_set", (DL_FUNC) &R_swig_GeoDaWeight_min_nbrs_set, 2},
   {"R_swig_GeoDaWeight_max_nbrs_set", (DL_FUNC) &R_swig_GeoDaWeight_max_nbrs_set, 2},
   {"R_swig_GeoDaWeight_mean_nbrs_set", (DL_FUNC) &R_swig_GeoDaWeight_mean_nbrs_set, 2},
   {"R_swig_GeoDaWeight_median_nbrs_set", (DL_FUNC) &R_swig_GeoDaWeight_median_nbrs_set, 2},
   {"R_swig_GeoDaWeight_id_field_set", (DL_FUNC) &R_swig_GeoDaWeight_id_field_set, 2},
   {"R_swig_GeoDaWeight_GetMinNumNbrs", (DL_FUNC) &R_swig_GeoDaWeight_GetMinNumNbrs, 2},
   {"R_swig_GeoDaWeight_GetMaxNumNbrs", (DL_FUNC) &R_swig_GeoDaWeight_GetMaxNumNbrs, 2},
   {"R_swig_GeoDaWeight_GetMeanNumNbrs", (DL_FUNC) &R_swig_GeoDaWeight_GetMeanNumNbrs, 2},
   {"R_swig_GeoDaWeight_GetMedianNumNbrs", (DL_FUNC) &R_swig_GeoDaWeight_GetMedianNumNbrs, 2},
   {"R_swig_VecVecChar_back", (DL_FUNC) &R_swig_VecVecChar_back, 2},
   {"R_swig_VecChar_back", (DL_FUNC) &R_swig_VecChar_back, 2},
   {"R_swig_delete_GeoDaWeight", (DL_FUNC) &R_swig_delete_GeoDaWeight, 1},
   {"R_swig_GeoDaWeight_HasIsolates", (DL_FUNC) &R_swig_GeoDaWeight_HasIsolates, 2},
   {"R_swig_AbstractLocalSA_GetHasIsolates", (DL_FUNC) &R_swig_AbstractLocalSA_GetHasIsolates, 2},
   {"R_swig_VecString_back", (DL_FUNC) &R_swig_VecString_back, 2},
   {"R_swig_VecVecDouble_swap", (DL_FUNC) &R_swig_VecVecDouble_swap, 2},
   {"R_swig_VecDouble_swap", (DL_FUNC) &R_swig_VecDouble_swap, 2},
   {"R_swig_delete_VecVecUINT8", (DL_FUNC) &R_swig_delete_VecVecUINT8, 1},
   {"R_swig_delete_VecUINT8", (DL_FUNC) &R_swig_delete_VecUINT8, 1},
   {"R_swig_GeoDaWeight_sparsity_get", (DL_FUNC) &R_swig_GeoDaWeight_sparsity_get, 2},
   {"R_swig_GeoDaWeight_density_get", (DL_FUNC) &R_swig_GeoDaWeight_density_get, 2},
   {"R_swig_GeoDa_GetUndefinesCol", (DL_FUNC) &R_swig_GeoDa_GetUndefinesCol, 3},
   {"R_swig_GeoDaWeight_is_internal_use_get", (DL_FUNC) &R_swig_GeoDaWeight_is_internal_use_get, 2},
   {"R_swig_VecVecDouble_size", (DL_FUNC) &R_swig_VecVecDouble_size, 2},
   {"R_swig_VecDouble_size", (DL_FUNC) &R_swig_VecDouble_size, 2},
   {"R_swig_AbstractLocalSA_SetSignificanceFilter", (DL_FUNC) &R_swig_AbstractLocalSA_SetSignificanceFilter, 2},
   {"R_swig_AbstractLocalSA_GetSignificanceFilter", (DL_FUNC) &R_swig_AbstractLocalSA_GetSignificanceFilter, 2},
   {"R_swig_VecVoid_swap", (DL_FUNC) &R_swig_VecVoid_swap, 2},
   {"R_swig_GeoDaWeight_GetSparsity", (DL_FUNC) &R_swig_GeoDaWeight_GetSparsity, 2},
   {"R_swig_VecFloat_pop", (DL_FUNC) &R_swig_VecFloat_pop, 2},
   {"R_swig_GeoDaWeight_GetDensity", (DL_FUNC) &R_swig_GeoDaWeight_GetDensity, 2},
   {"R_swig_AbstractLocalSA_Run", (DL_FUNC) &R_swig_AbstractLocalSA_Run, 1},
   {"R_swig_VecVecUINT8_pop", (DL_FUNC) &R_swig_VecVecUINT8_pop, 2},
   {"R_swig_VecUINT8_pop", (DL_FUNC) &R_swig_VecUINT8_pop, 2},
   {NULL, NULL, 0}
};

extern "C" SWIGEXPORT void R_init_libgeoda(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);


SWIG_init();
SWIG_InitializeModule(0);


}

